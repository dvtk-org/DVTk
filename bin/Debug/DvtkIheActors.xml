<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DvtkIheActors</name>
    </assembly>
    <members>
        <member name="T:Dvtk.IheActors.Actors.AcquisitionModalityActor">
            <summary>
            Summary description for AcquisitionModalityActor.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Actors.AcquisitionModalityActor.#ctor(System.String,Dvtk.IheActors.IheFramework.IheFramework)">
            <summary>
            Class constructor.
            </summary>
            <param name="id">Actor Id.</param>
            <param name="iheFramework">Ihe Framework container.</param>
        </member>
        <member name="P:Dvtk.IheActors.Actors.AcquisitionModalityActor.ModalityWorklistItems">
            <summary>
            Property - ModalityWorklistItems
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Actors.AcquisitionModalityActor.MapWorklistItemToStorageDirectory">
            <summary>
            Property - MapWorklistItemToStorageDirectory
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Actors.AcquisitionModalityActor.ApplyConfig(Dvtk.IheActors.Bases.CommonConfig,Dvtk.IheActors.Actors.BasePeerToPeerConfigCollection)">
            <summary>
            Apply the Actor Configuration.
            </summary>
            <param name="commonConfig">Common Configuration.</param>
            <param name="peerToPeerConfigCollection">Peer to Peer Configuration collection.</param>
        </member>
        <member name="M:Dvtk.IheActors.Actors.AcquisitionModalityActor.HandleTransactionFrom(Dvtk.IheActors.Bases.ActorName,Dvtk.IheActors.Dicom.DicomTransaction)">
            <summary>
            Handle a Dicom Transaction from the given Actor Name.
            </summary>
            <param name="actorName">Source Actor Name.</param>
            <param name="dicomTransaction">Dicom Transaction.</param>
        </member>
        <member name="M:Dvtk.IheActors.Actors.AcquisitionModalityActor.SubscribeStorageCommitmentNEventReportResponseEvent">
            <summary>
            Subscribe to the StorageCommitmentNEventReportResponse Event.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Actors.AcquisitionModalityActor.UnsubscribeStorageCommitmentNEventReportResponseEvent">
            <summary>
            Unsubscribe to the StorageCommitmentNEventReportResponse Event.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Actors.AcquisitionModalityActor.HandleStorageCommitmentNEventReportResponse(System.Object,Dvtk.IheActors.Bases.MessageAvailableEventArgs)">
            <summary>
            Only intereseted in Storage Commitment N-Event-Report Response messages.
            Signal the local N-Event-Report Response semaphore on receipt of this message type.
            </summary>
            <param name="server">Event source.</param>
            <param name="messageAvailableEvent">Message Available Event Details.</param>
        </member>
        <member name="M:Dvtk.IheActors.Actors.AcquisitionModalityActor.CreateUnscheduledWorklistItem(DvtkData.Dimse.TagValueCollection)">
            <summary>
            Create an unscheduled worklist item by adding the given user defined tags to those
            of the Default Value Manager. This worklist item can then be used in the
            SendNCreateModalityProcedureStepInProgress() and SendModalityImagesStored() method
            calls.
            This simulates the IHE Unscheduled Use Case.
            </summary>
            <param name="userDefinedTags">User defined Tags.</param>
            <returns>Modality worklist item populated from the user defined tags and default values.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Actors.AcquisitionModalityActor.SendQueryModalityWorklist(DvtkData.Dimse.TagValueCollection)">
            <summary>
            Send a CFind Modality Worklist Query trigger from the given queryTags.
            All other return keys are taken from the supported return key attributes
            in the Worklist Information Model.
            </summary>
            <param name="queryTags">List of Query Tags.</param>
            <returns>Boolean indicating success or failure.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Actors.AcquisitionModalityActor.SendQueryModalityWorklist(System.String,System.String)">
            <summary>
            Send a CFind Modality Worklist Query trigger by reading the query
            dataset from the given mwlQueryDcmFilename. If the scheduledProcedureStepStartDate
            is defined (not string empty) then if a value for this attribute is present in the
            read datset it will be overwritten by the scheduledProcedureStepStartDate value.
            </summary>
            <param name="mwlQueryDcmFilename">DCM file containing the MWL Query Dataset.</param>
            <param name="scheduledProcedureStepStartDate">Optional (not sting empty) start date to overwrite dataset value.</param>
            <returns>Boolean indicating success or failure.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Actors.AcquisitionModalityActor.SendNCreateModalityProcedureStepInProgress(Dvtk.IheActors.Dicom.DicomQueryItem)">
            <summary>
            Send an N-CREATE MPPS IN-PROGRESS message by using the Default Value Manager.
            Use the modalityWorklistItem to overwrite the appropriate attribute values.
            </summary>
            <param name="modalityWorklistItem">Modality Worklist Item used to update MPPS IN-PROGRESS dataset.</param>
            <returns>Boolean indicating success or failure.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Actors.AcquisitionModalityActor.SendNCreateModalityProcedureStepInProgress(System.String,Dvtk.IheActors.Dicom.DicomQueryItem)">
            <summary>
            Send an N-CREATE MPPS IN-PROGRESS message from the given mppsInProgressDcmFilename.
            Use the modalityWorklistItem to overwrite the appropriate attribute values.
            </summary>
            <param name="mppsInProgressDcmFilename">DCM Filename - contains MPPS IN-PROGRESS dataset.</param>
            <param name="modalityWorklistItem">Modality Worklist Item used to update MPPS IN-PROGRESS dataset.</param>
            <returns>Boolean indicating success or failure.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Actors.AcquisitionModalityActor.SendNSetModalityProcedureStepInProgress(Dvtk.IheActors.Dicom.DicomQueryItem)">
            <summary>
            Send an N-SET MPPS IN-PROGRESS message by using the Default Value Manager.
            Use the modalityWorklistItem to overwrite the appropriate attribute values.
            NOTE: This call should only be made after the SendModalityProcedureStepInProgress() (using default N-CREATE) 
            has been made.
            </summary>
            <param name="modalityWorklistItem">Modality Worklist Item used to update MPPS IN-PROGRESS dataset.</param>
            <returns>Boolean indicating success or failure.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Actors.AcquisitionModalityActor.SendNSetModalityProcedureStepInProgress(System.String,Dvtk.IheActors.Dicom.DicomQueryItem)">
            <summary>
            Send an N-SET MPPS IN-PROGRESS message from the given mppsInProgressDcmFilename.
            Use the modalityWorklistItem to overwrite the appropriate attribute values.
            NOTE: This call should only be made after the SendModalityProcedureStepInProgress() (using default N-CREATE) 
            has been made.
            </summary>
            <param name="mppsInProgressDcmFilename">DCM Filename - contains MPPS IN-PROGRESS dataset.</param>
            <param name="modalityWorklistItem">Modality Worklist Item used to update MPPS IN-PROGRESS dataset.</param>
            <returns>Boolean indicating success or failure.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Actors.AcquisitionModalityActor.SendNSetModalityProcedureStepCompleted">
            <summary>
            Send an N-SET MPPS COMPLETED message. Take the default values from the Default Value Manager.
            </summary>
            <returns>Boolean indicating success or failure.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Actors.AcquisitionModalityActor.SendNSetModalityProcedureStepCompleted(System.String,System.String,System.String)">
            <summary>
            Send an N-SET MPPS COMPLETED message. Take the default values from the given DCM file contents.
            </summary>
            <param name="mppsCompletedDcmFilename">DCM file for default MPPS Completed atribute values.</param>
            <param name="retrieveAETitle">Value of the RetrieveAETitle attribute</param>
            <returns></returns>
        </member>
        <member name="M:Dvtk.IheActors.Actors.AcquisitionModalityActor.SendNSetModalityProcedureStepCompleted(System.String)">
            <summary>
            Send an N-SET MPPS COMPLETED message. Take the default values from the given DCM file contents.
            </summary>
            <param name="mppsCompletedDcmFilename">DCM file for default MPPS Completed atribute values.</param>
            <returns>Boolean indicating success or failure.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Actors.AcquisitionModalityActor.SendNSetModalityProcedureStepDiscontinued">
            <summary>
            Send an N-SET MPPS DISCONTINUED message. Take the default values from the Default Value Manager.
            </summary>
            <returns>Boolean indicating success or failure.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Actors.AcquisitionModalityActor.SendNSetModalityProcedureStepDiscontinued(System.String)">
            <summary>
            Send an N-SET MPPS DISCONTINUED message. Take the default values from the given DCM file contents.
            </summary>
            <param name="mppsDiscontinuedDcmFilename">DCM file for default MPPS Discontinued atribute values.</param>
            <returns>Boolean indicating success or failure.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Actors.AcquisitionModalityActor.SendModalityImagesStored(System.Boolean,Dvtk.IheActors.Dicom.DicomQueryItem)">
            <summary>
            Send a single image generated from the Default Value Manager and
            the given Modality Worklist Item.
            </summary>
            <param name="startNewSeries">Boolean indicating if this image is part of a new
            Series or not.</param>
            <param name="modalityWorklistItem">Worklist Item used to provide overruling values for
            the Image header.</param>
            <returns>Boolean indicating success or failure.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Actors.AcquisitionModalityActor.SendModalityImagesStored(Dvtk.IheActors.Dicom.DicomQueryItem,System.Boolean)">
            <summary>
            Send all the images found in the data directory mapped from the given
            Modality Worklist item - the MapWorklistItemToStorageDirectory defines
            the data directory / worklist item attribute value mapping.
            </summary>
            <param name="modalityWorklistItem">Worklist Item used to provide overruling values for
            the Image headers.</param>
            <param name="withSingleAssociation">Boolean indicating whether the images should be sent in a single
            association or not.</param>
            <returns>Boolean indicating success or failure.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Actors.AcquisitionModalityActor.SendModalityImagesStored(System.String,Dvtk.IheActors.Dicom.DicomQueryItem,System.Boolean)">
            <summary>
            Send all the images found in the given storage directory.
            </summary>
            <param name="storageDirectory">Given storage directory - containing storage DCM files.</param>
            <param name="modalityWorklistItem">Worklist Item used to provide overruling values for
            the Image headers.</param>
            <param name="withSingleAssociation">Boolean indicating whether the images should be sent in a single
            association or not.</param>
            <returns>Boolean indicating success or failure.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Actors.AcquisitionModalityActor.SendStorageCommitment(System.Boolean,System.Int32)">
            <summary>
            Send the Storage Commitment message - use the storage commitment details
            built up during any previous SendModalityImagesStored() operations.
            The N-ACTION-RQ will be sent to the Image Manager.
            
            If the configured ActorOption1 for the DicomPeerToPeerConfiguration from the
            AcquisitionModalityActor to the ImageManagerActor is set to the string
            "DO_STORAGE_COMMITMENT_ON_SINGLE_ASSOCIATION" then the framework expects the
            Image Manager to return the N-EVENT-REPORT details over the same association
            as the N-ACTION details were sent. If the ActorOption1 configuration parameter
            is not set as above then the framework will expect the Image Manger to return
            the N-EVENT-REPORT details over a different association than the one used for the
            N-ACTION details.
            </summary>
            <param name="awaitNEventReport">Boolean indicating whether to wait for the
            N-EVENT-REPORT - either over the same or different association before returning
            to the caller.</param>
            <param name="timeOut">Time (in Seconds) to wait for the N-EVENT-REPORT to be sent
            from the Image Manager - only used if "awaitNEventReport" is set true.</param>
            <returns>Boolean indicating success or failure.</returns>
        </member>
        <member name="T:Dvtk.IheActors.Actors.ActorCollection">
            <summary>
            Summary description for ActorCollection.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ActorCollection.#ctor">
            <summary>
            Class Constructor.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Actors.ActorCollection.Item(System.Int32)">
            <summary>
            Gets or sets an <see cref="T:Dvtk.IheActors.Bases.BaseActor"/> from the collection.
            </summary>
            <param name="index">The zero-based index of the collection member to get or set.</param>
            <value>The <see cref="T:Dvtk.IheActors.Bases.BaseActor"/> at the specified index.</value>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ActorCollection.Add(Dvtk.IheActors.Bases.BaseActor)">
            <summary>
            Adds an object to the end of the <see cref="T:Dvtk.IheActors.Actors.ActorCollection"/>.
            </summary>
            <param name="value">The <see cref="T:Dvtk.IheActors.Bases.BaseActor"/> to be added to the end of the <see cref="T:Dvtk.IheActors.Actors.ActorCollection"/>.</param>
            <returns>The <see cref="T:Dvtk.IheActors.Actors.ActorCollection"/> index at which the value has been added.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ActorCollection.IndexOf(Dvtk.IheActors.Bases.BaseActor)">
            <summary>
            Searches for the specified <see cref="T:Dvtk.IheActors.Bases.BaseActor"/> and 
            returns the zero-based index of the first occurrence within the entire <see cref="T:Dvtk.IheActors.Actors.ActorCollection"/>.
            </summary>
            <param name="value">The <see cref="T:Dvtk.IheActors.Bases.BaseActor"/> to locate in the <see cref="T:Dvtk.IheActors.Actors.ActorCollection"/>.</param>
            <returns>
            The zero-based index of the first occurrence of value within the entire <see cref="T:Dvtk.IheActors.Actors.ActorCollection"/>, 
            if found; otherwise, -1.
            </returns>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ActorCollection.Insert(System.Int32,Dvtk.IheActors.Bases.BaseActor)">
            <summary>
            Inserts an <see cref="T:Dvtk.IheActors.Bases.BaseActor"/> element into the <see cref="T:Dvtk.IheActors.Actors.ActorCollection"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="value">The <see cref="T:Dvtk.IheActors.Bases.BaseActor"/> to insert.</param>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ActorCollection.Remove(Dvtk.IheActors.Bases.BaseActor)">
            <summary>
            Removes the first occurrence of a specific <see cref="T:Dvtk.IheActors.Bases.BaseActor"/> from the <see cref="T:Dvtk.IheActors.Actors.ActorCollection"/>.
            </summary>
            <param name="value">The <see cref="T:Dvtk.IheActors.Bases.BaseActor"/> to remove from the <see cref="T:Dvtk.IheActors.Actors.ActorCollection"/>.</param>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ActorCollection.Contains(Dvtk.IheActors.Bases.BaseActor)">
            <summary>
            Determines whether the <see cref="T:Dvtk.IheActors.Actors.ActorCollection"/> contains a specific element.
            </summary>
            <param name="value">The <see cref="T:Dvtk.IheActors.Bases.BaseActor"/> to locate in the <see cref="T:Dvtk.IheActors.Actors.ActorCollection"/>.</param>
            <returns>
            <c>true</c> if the <see cref="T:Dvtk.IheActors.Actors.ActorCollection"/> contains the specified value; 
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ActorCollection.OnInsert(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes before inserting a new element into the collection instance.
            </summary>
            <param name="index">The zero-based index at which to insert value.</param>
            <param name="value">The new value of the element at index.</param>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ActorCollection.OnRemove(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes when removing an element from the collection instance.
            </summary>
            <param name="index">The zero-based index at which value can be found.</param>
            <param name="value">The value of the element to remove from index.</param>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ActorCollection.OnSet(System.Int32,System.Object,System.Object)">
            <summary>
            Performs additional custom processes before setting a value in the collection instance.
            </summary>
            <param name="index">The zero-based index at which oldValue can be found.</param>
            <param name="oldValue">The value to replace with newValue.</param>
            <param name="newValue">The new value of the element at index.</param>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ActorCollection.OnValidate(System.Object)">
            <summary>
            Performs additional custom processes when validating a value.
            </summary>
            <param name="value">The object to validate.</param>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ActorCollection.CopyTo(Dvtk.IheActors.Bases.BaseActor[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to a strong-typed <c>BaseActor[]</c>, 
            starting at a particular <c>BaseActor[]</c> index.
            </summary>
            <param name="array">
            The one-dimensional <c>BaseActor[]</c> that is the destination of the elements 
            copied from <see cref="T:System.Collections.ICollection"/>.
            The <c>BaseActor[]</c> must have zero-based indexing. 
            </param>
            <param name="index">
            The zero-based index in array at which copying begins.
            </param>
            <remarks>
            Provides the strongly typed member for <see cref="T:System.Collections.ICollection"/>.
            </remarks>
        </member>
        <member name="T:Dvtk.IheActors.Actors.ActorConfig">
            <summary>
            Summary description for ActorConfig.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ActorConfig.#ctor(Dvtk.IheActors.Bases.ActorName,Dvtk.IheActors.Actors.ActorConfigStateEnum)">
            <summary>
            Class constructor.
            </summary>
            <param name="actorName">Actor Name.</param>
            <param name="actorConfigState">Actor Config State.</param>
        </member>
        <member name="P:Dvtk.IheActors.Actors.ActorConfig.ActorName">
            <summary>
            Property - ActorName
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Actors.ActorConfig.ConfigState">
            <summary>
            Property - Actor Config State.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ActorConfig.WriteXmlConfig(System.Xml.XmlTextWriter)">
            <summary>
            Write the configuration out in XML.
            </summary>
            <param name="writer">XML Text Writer.</param>
        </member>
        <member name="T:Dvtk.IheActors.Actors.ActorConfigCollection">
            <summary>
            Summary description for ActorConfigCollection.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ActorConfigCollection.#ctor">
            <summary>
            Class Constructor.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Actors.ActorConfigCollection.Item(System.Int32)">
            <summary>
            Gets or sets an <see cref="T:Dvtk.IheActors.Actors.ActorConfig"/> from the collection.
            </summary>
            <param name="index">The zero-based index of the collection member to get or set.</param>
            <value>The <see cref="T:Dvtk.IheActors.Actors.ActorConfig"/> at the specified index.</value>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ActorConfigCollection.Add(Dvtk.IheActors.Actors.ActorConfig)">
            <summary>
            Adds an object to the end of the <see cref="T:Dvtk.IheActors.Actors.ActorConfigCollection"/>.
            </summary>
            <param name="value">The <see cref="T:Dvtk.IheActors.Actors.ActorConfig"/> to be added to the end of the <see cref="T:Dvtk.IheActors.Actors.ActorConfigCollection"/>.</param>
            <returns>The <see cref="T:Dvtk.IheActors.Actors.ActorConfigCollection"/> index at which the value has been added.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ActorConfigCollection.IndexOf(Dvtk.IheActors.Actors.ActorConfig)">
            <summary>
            Searches for the specified <see cref="T:Dvtk.IheActors.Actors.ActorConfig"/> and 
            returns the zero-based index of the first occurrence within the entire <see cref="T:Dvtk.IheActors.Actors.ActorConfigCollection"/>.
            </summary>
            <param name="value">The <see cref="T:Dvtk.IheActors.Actors.ActorConfig"/> to locate in the <see cref="T:Dvtk.IheActors.Actors.ActorConfigCollection"/>.</param>
            <returns>
            The zero-based index of the first occurrence of value within the entire <see cref="T:Dvtk.IheActors.Actors.ActorConfigCollection"/>, 
            if found; otherwise, -1.
            </returns>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ActorConfigCollection.Insert(System.Int32,Dvtk.IheActors.Actors.ActorConfig)">
            <summary>
            Inserts an <see cref="T:Dvtk.IheActors.Actors.ActorConfig"/> element into the <see cref="T:Dvtk.IheActors.Actors.ActorConfigCollection"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="value">The <see cref="T:Dvtk.IheActors.Actors.ActorConfig"/> to insert.</param>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ActorConfigCollection.Remove(Dvtk.IheActors.Actors.ActorConfig)">
            <summary>
            Removes the first occurrence of a specific <see cref="T:Dvtk.IheActors.Actors.ActorConfig"/> from the <see cref="T:Dvtk.IheActors.Actors.ActorConfigCollection"/>.
            </summary>
            <param name="value">The <see cref="T:Dvtk.IheActors.Actors.ActorConfig"/> to remove from the <see cref="T:Dvtk.IheActors.Actors.ActorConfigCollection"/>.</param>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ActorConfigCollection.Contains(Dvtk.IheActors.Actors.ActorConfig)">
            <summary>
            Determines whether the <see cref="T:Dvtk.IheActors.Actors.ActorConfigCollection"/> contains a specific element.
            </summary>
            <param name="value">The <see cref="T:Dvtk.IheActors.Actors.ActorConfig"/> to locate in the <see cref="T:Dvtk.IheActors.Actors.ActorConfigCollection"/>.</param>
            <returns>
            <c>true</c> if the <see cref="T:Dvtk.IheActors.Actors.ActorConfigCollection"/> contains the specified value; 
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ActorConfigCollection.OnInsert(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes before inserting a new element into the collection instance.
            </summary>
            <param name="index">The zero-based index at which to insert value.</param>
            <param name="value">The new value of the element at index.</param>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ActorConfigCollection.OnRemove(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes when removing an element from the collection instance.
            </summary>
            <param name="index">The zero-based index at which value can be found.</param>
            <param name="value">The value of the element to remove from index.</param>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ActorConfigCollection.OnSet(System.Int32,System.Object,System.Object)">
            <summary>
            Performs additional custom processes before setting a value in the collection instance.
            </summary>
            <param name="index">The zero-based index at which oldValue can be found.</param>
            <param name="oldValue">The value to replace with newValue.</param>
            <param name="newValue">The new value of the element at index.</param>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ActorConfigCollection.OnValidate(System.Object)">
            <summary>
            Performs additional custom processes when validating a value.
            </summary>
            <param name="value">The object to validate.</param>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ActorConfigCollection.CopyTo(Dvtk.IheActors.Actors.ActorConfig[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to a strong-typed <c>ActorConfig[]</c>, 
            starting at a particular <c>ActorConfig[]</c> index.
            </summary>
            <param name="array">
            The one-dimensional <c>ActorConfig[]</c> that is the destination of the elements 
            copied from <see cref="T:System.Collections.ICollection"/>.
            The <c>ActorConfig[]</c> must have zero-based indexing. 
            </param>
            <param name="index">
            The zero-based index in array at which copying begins.
            </param>
            <remarks>
            Provides the strongly typed member for <see cref="T:System.Collections.ICollection"/>.
            </remarks>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ActorConfigCollection.WriteXmlConfig(System.Xml.XmlTextWriter)">
            <summary>
            Write the configuration out in XML.
            </summary>
            <param name="writer">XML Text Writer.</param>
        </member>
        <member name="T:Dvtk.IheActors.Actors.ActorsTransaction">
            <summary>
            Summary description for ActorsTransaction.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ActorsTransaction.#ctor(System.Int32,Dvtk.IheActors.Bases.ActorName,Dvtk.IheActors.Bases.ActorName,Dvtk.IheActors.Bases.BaseTransaction,System.String,System.String,System.UInt32,System.UInt32)">
            <summary>
            Class constructor.
            </summary>
            <param name="transactionNumber">Transaction Number.</param>
            <param name="fromActorName">Name of Actor sending Transaction.</param>
            <param name="toActorName">Name of Actor receiving Transaction.</param>
            <param name="transaction">Transaction itself.</param>
            <param name="resultsFilename">Results filename.</param>
            <param name="resultsPathname">Full Results filename - including directory.</param>
            <param name="nrErrors">Number of Errors in Transaction.</param>
            <param name="nrWarnings">Number of Warnings in Transaction.</param>
        </member>
        <member name="P:Dvtk.IheActors.Actors.ActorsTransaction.TransactionNumber">
            <summary>
            Property - TransactionNumber
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Actors.ActorsTransaction.FromActorName">
            <summary>
            Property - FromActorName
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Actors.ActorsTransaction.ToActorName">
            <summary>
            Property - ToActorName
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Actors.ActorsTransaction.Transaction">
            <summary>
            Property - Transaction
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Actors.ActorsTransaction.Direction">
            <summary>
            Property - Direction
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Actors.ActorsTransaction.ResultsFilename">
            <summary>
            Property - ResultsFilename
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Actors.ActorsTransaction.ResultsPathname">
            <summary>
            Property - ResultsPathname
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Actors.ActorsTransaction.NrErrors">
            <summary>
            Property - NrErrors
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Actors.ActorsTransaction.NrWarnings">
            <summary>
            Property - NrWarnings
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ActorsTransaction.LogToStream(System.IO.StreamWriter)">
            <summary>
            Log the transaction to the given stream.
            </summary>
            <param name="sw">Stream Writer - log the transaction to this stream.</param>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ActorsTransaction.GetNumberOfDicomMessages(System.String)">
            <summary>
            Get the number of DICOM messages in the transaction that match the DICOM command name.
            </summary>
            <param name="dimseCommandName">DICOM command name.</param>
            <returns>int - number of times the given DICOM command name is found in the transaction.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ActorsTransaction.GetFirstDicomAttributeValue(System.String,DvtkData.Dimse.Tag,System.String@)">
            <summary>
            Get the first value of the given attribute in the DICOM message with the given DICOM command name. 
            First search the command set and then the dataset (if present).
            </summary>
            <param name="dimseCommandName">DICOM command name.</param>
            <param name="tag">Tag identifying attribute whose first value will be returned.</param>
            <param name="attributeValue">Out - returned attribute value.</param>
            <returns>bool - indicates whether the dimseCommandName was found in the transaction or not - true / false.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ActorsTransaction.IsDicomAttributePresent(System.String,DvtkData.Dimse.Tag,System.Boolean@)">
            <summary>
            Check if the given attribute is present in the DICOM message with the given DICOM command name. 
            First search the command set and then the dataset (if present).
            </summary>
            <param name="dimseCommandName">DICOM command name.</param>
            <param name="tag">Tag identifying attribute whose first value will be returned.</param>
            <param name="attributePresent">Out - bool attribute present - true / false.</param>
            <returns>bool - indicates whether the dimseCommandName was found in the transaction or not - true / false.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ActorsTransaction.SetComparators(Dvtk.Comparator.BaseComparatorCollection)">
            <summary>
            Set the Comparators needed to handle each message in the Transaction.
            </summary>
            <param name="comparatorCollection">Comparator collection to fill.</param>
        </member>
        <member name="T:Dvtk.IheActors.Actors.ActorsTransactionCondition">
            <summary>
            Summary description for ActorsTransactionCondition.
            </summary>
        </member>
        <member name="T:Dvtk.IheActors.Actors.ActorsTransactionLog">
            <summary>
            Summary description for ActorsTransactionLog.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Actors.ActorsTransactionLog.Item(System.Int32)">
            <summary>
            Gets or sets an <see cref="T:Dvtk.IheActors.Actors.ActorsTransaction"/> from the collection.
            </summary>
            <param name="index">The zero-based index of the collection member to get or set.</param>
            <value>The <see cref="T:Dvtk.IheActors.Actors.ActorsTransactionLog"/> at the specified index.</value>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ActorsTransactionLog.Add(Dvtk.IheActors.Actors.ActorsTransaction)">
            <summary>
            Adds an object to the end of the <see cref="T:Dvtk.IheActors.Actors.ActorsTransactionLog"/>.
            </summary>
            <param name="value">The <see cref="T:Dvtk.IheActors.Actors.ActorsTransaction"/> to be added to the end of the <see cref="T:Dvtk.IheActors.Actors.ActorsTransactionLog"/>.</param>
            <returns>The <see cref="T:Dvtk.IheActors.Actors.ActorsTransactionLog"/> index at which the value has been added.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ActorsTransactionLog.IndexOf(Dvtk.IheActors.Actors.ActorsTransaction)">
            <summary>
            Searches for the specified <see cref="T:Dvtk.IheActors.Actors.ActorsTransaction"/> and 
            returns the zero-based index of the first occurrence within the entire <see cref="T:Dvtk.IheActors.Actors.ActorsTransactionLog"/>.
            </summary>
            <param name="value">The <see cref="T:Dvtk.IheActors.Actors.ActorsTransaction"/> to locate in the <see cref="T:Dvtk.IheActors.Actors.ActorsTransactionLog"/>.</param>
            <returns>
            The zero-based index of the first occurrence of value within the entire <see cref="T:Dvtk.IheActors.Actors.ActorsTransactionLog"/>, 
            if found; otherwise, -1.
            </returns>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ActorsTransactionLog.Insert(System.Int32,Dvtk.IheActors.Actors.ActorsTransaction)">
            <summary>
            Inserts an <see cref="T:Dvtk.IheActors.Actors.ActorsTransaction"/> element into the <see cref="T:Dvtk.IheActors.Actors.ActorsTransactionLog"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="value">The <see cref="T:Dvtk.IheActors.Actors.ActorsTransaction"/> to insert.</param>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ActorsTransactionLog.Remove(Dvtk.IheActors.Actors.ActorsTransaction)">
            <summary>
            Removes the first occurrence of a specific <see cref="T:Dvtk.IheActors.Actors.ActorsTransaction"/> from the <see cref="T:Dvtk.IheActors.Actors.ActorsTransactionLog"/>.
            </summary>
            <param name="value">The <see cref="T:Dvtk.IheActors.Actors.ActorsTransaction"/> to remove from the <see cref="T:Dvtk.IheActors.Actors.ActorsTransactionLog"/>.</param>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ActorsTransactionLog.Contains(Dvtk.IheActors.Actors.ActorsTransaction)">
            <summary>
            Determines whether the <see cref="T:Dvtk.IheActors.Actors.ActorsTransactionLog"/> contains a specific element.
            </summary>
            <param name="value">The <see cref="T:Dvtk.IheActors.Actors.ActorsTransaction"/> to locate in the <see cref="T:Dvtk.IheActors.Actors.ActorsTransactionLog"/>.</param>
            <returns>
            <c>true</c> if the <see cref="T:Dvtk.IheActors.Actors.ActorsTransactionLog"/> contains the specified value; 
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ActorsTransactionLog.OnInsert(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes before inserting a new element into the collection instance.
            </summary>
            <param name="index">The zero-based index at which to insert value.</param>
            <param name="value">The new value of the element at index.</param>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ActorsTransactionLog.OnRemove(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes when removing an element from the collection instance.
            </summary>
            <param name="index">The zero-based index at which value can be found.</param>
            <param name="value">The value of the element to remove from index.</param>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ActorsTransactionLog.OnSet(System.Int32,System.Object,System.Object)">
            <summary>
            Performs additional custom processes before setting a value in the collection instance.
            </summary>
            <param name="index">The zero-based index at which oldValue can be found.</param>
            <param name="oldValue">The value to replace with newValue.</param>
            <param name="newValue">The new value of the element at index.</param>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ActorsTransactionLog.OnValidate(System.Object)">
            <summary>
            Performs additional custom processes when validating a value.
            </summary>
            <param name="value">The object to validate.</param>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ActorsTransactionLog.CopyTo(Dvtk.IheActors.Actors.ActorsTransaction[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to a strong-typed <c>ActorsTransaction[]</c>, 
            starting at a particular <c>ActorsTransaction[]</c> index.
            </summary>
            <param name="array">
            The one-dimensional <c>ActorsTransaction[]</c> that is the destination of the elements 
            copied from <see cref="T:System.Collections.ICollection"/>.
            The <c>ActorsTransaction[]</c> must have zero-based indexing. 
            </param>
            <param name="index">
            The zero-based index in array at which copying begins.
            </param>
            <remarks>
            Provides the strongly typed member for <see cref="T:System.Collections.ICollection"/>.
            </remarks>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ActorsTransactionLog.NrErrors">
            <summary>
            Get the total number of errors occuring the Transaction Log.
            </summary>
            <returns>uint - Total number of errors.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ActorsTransactionLog.NrWarnings">
            <summary>
            Get the total number of warnings occuring the Transaction Log.
            </summary>
            <returns>uint - Total number of warnings.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ActorsTransactionLog.AddComparisonTagValueFilter(DvtkData.Dimse.DicomTagValue)">
            <summary>
            Add a Tag Value filter for the comparator.
            Only compare messages which contain the same values for this filter.
            </summary>
            <param name="tagValueFilter">Tag Value Filter.</param>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ActorsTransactionLog.AssertMessageCountBetweenActors(Dvtk.IheActors.Bases.ActorName,Dvtk.IheActors.Bases.ActorName,System.String,System.Int32)">
            <summary>
            Assert that the correct number of the given DICOM message has been seen between the two given actors.
            Stop after the first occurence of the given dimseCommandName in the transaction log.
            </summary>
            <param name="actorName1">First actor name in transaction.</param>
            <param name="actorName2">Second actor name in transaction.</param>
            <param name="dimseCommandName">DICOM command name.</param>
            <param name="expectedCount">Number of times the given DICOM command was expected to occur between these actors.</param>
            <returns>bool - indication if the assertion was true or false.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ActorsTransactionLog.AssertDicomAttributeValueBetweenActors(Dvtk.IheActors.Bases.ActorName,Dvtk.IheActors.Bases.ActorName,System.String,DvtkData.Dimse.Tag,System.Int32)">
            <summary>
            Assert that the given attribute value in the given DICOM message has the expected value between the two given actors.
            Check all occurences of the given dimseCommandName in the transaction log.
            </summary>
            <param name="actorName1">First actor name in transaction.</param>
            <param name="actorName2">Second actor name in transaction.</param>
            <param name="dimseCommandName">DICOM command name.</param>
            <param name="tag">tag - Attribute tag whose first value is the actual value.</param>
            <param name="expectedValue">The expected attribute value - this will be compared with the actual attribute value.</param>
            <returns>bool - indication if the assertion was true or false.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ActorsTransactionLog.AssertDicomAttributeValueBetweenActors(Dvtk.IheActors.Bases.ActorName,Dvtk.IheActors.Bases.ActorName,System.String,DvtkData.Dimse.Tag,System.String)">
            <summary>
            Assert that the given attribute value in the given DICOM message has the expected value between the two given actors.
            Check all occurences of the given dimseCommandName in the transaction log.
            </summary>
            <param name="actorName1">First actor name in transaction.</param>
            <param name="actorName2">Second actor name in transaction.</param>
            <param name="dimseCommandName">DICOM command name.</param>
            <param name="tag">tag - Attribute tag whose first value is the actual value.</param>
            <param name="expectedValue">The expected attribute value - this will be compared with the actual attribute value.</param>
            <returns>bool - indication if the assertion was true or false.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ActorsTransactionLog.AssertDicomAttributePresentBetweenActors(Dvtk.IheActors.Bases.ActorName,Dvtk.IheActors.Bases.ActorName,System.String,DvtkData.Dimse.Tag)">
            <summary>
            Assert that the given attribute is present in the given DICOM message between the two given actors.
            Check all occurences of the given dimseCommandName in the transaction log.
            </summary>
            <param name="actorName1">First actor name in transaction.</param>
            <param name="actorName2">Second actor name in transaction.</param>
            <param name="dimseCommandName">DICOM command name.</param>
            <param name="tag">tag - Attribute tag to check for.</param>
            <returns>bool - indication if the assertion was true or false.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ActorsTransactionLog.Evaluate(Dvtk.Results.ResultsReporter)">
            <summary>
            Evaluate the transaction log results using the associated comparators.
            </summary>
            <param name="resultsReporter">Results reporter.</param>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ActorsTransactionLog.LogToFile(System.String)">
            <summary>
            Log the Transactions to the given file.
            </summary>
            <param name="filename">The filename used to store the transaction log.</param>
        </member>
        <member name="T:Dvtk.IheActors.Actors.AdtPatientRegistrationActor">
            <summary>
            Summary description for AdtPatientRegistrationActor.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Actors.AdtPatientRegistrationActor.#ctor(System.String,Dvtk.IheActors.IheFramework.IheFramework)">
            <summary>
            Class constructor.
            </summary>
            <param name="id">Actor Id.</param>
            <param name="iheFramework">Ihe Framework container.</param>
        </member>
        <member name="M:Dvtk.IheActors.Actors.AdtPatientRegistrationActor.ApplyConfig(Dvtk.IheActors.Bases.CommonConfig,Dvtk.IheActors.Actors.BasePeerToPeerConfigCollection)">
            <summary>
            Apply the Actor Configuration.
            </summary>
            <param name="commonConfig">Common Configuration.</param>
            <param name="peerToPeerConfigCollection">Peer to Peer Configuration collection.</param>
        </member>
        <member name="T:Dvtk.IheActors.Actors.CommunicationBetweenActorsForm">
            <summary>
            Summary description for CommunicationBetweenActorsForm.
            </summary>
        </member>
        <member name="F:Dvtk.IheActors.Actors.CommunicationBetweenActorsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Actors.CommunicationBetweenActorsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Actors.CommunicationBetweenActorsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Dvtk.IheActors.Actors.DescriptionValueWritable">
            <summary>
            Summary description for DescriptionValueWritable.
            </summary>
        </member>
        <member name="T:Dvtk.IheActors.Actors.DssOrderFillerActor">
            <summary>
            Summary description for DssOrderFillerActor.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Actors.DssOrderFillerActor.#ctor(System.String,Dvtk.IheActors.IheFramework.IheFramework)">
            <summary>
            Class constructor.
            </summary>
            <param name="id">Actor Id.</param>
            <param name="iheFramework">Ihe Framework container.</param>
        </member>
        <member name="M:Dvtk.IheActors.Actors.DssOrderFillerActor.ApplyConfig(Dvtk.IheActors.Bases.CommonConfig,Dvtk.IheActors.Actors.BasePeerToPeerConfigCollection)">
            <summary>
            Apply the Actor Configuration.
            </summary>
            <param name="commonConfig">Common Configuration.</param>
            <param name="peerToPeerConfigCollection">Peer to Peer Configuration collection.</param>
        </member>
        <member name="M:Dvtk.IheActors.Actors.DssOrderFillerActor.HandleTransactionFrom(Dvtk.IheActors.Bases.ActorName,Dvtk.IheActors.Hl7.Hl7Transaction)">
            <summary>
            Handle an HL7 Transation from the given Actor Name.
            </summary>
            <param name="actorName">Source Actor Name.</param>
            <param name="hl7Transaction">HL7 Transaction.</param>
        </member>
        <member name="M:Dvtk.IheActors.Actors.DssOrderFillerActor.HandleTransactionFrom(Dvtk.IheActors.Bases.ActorName,Dvtk.IheActors.Dicom.DicomTransaction)">
            <summary>
            Handle a Dicom Transaction from the given Actor Name.
            </summary>
            <param name="actorName">Source Actor Name.</param>
            <param name="dicomTransaction">Dicom Transaction.</param>
        </member>
        <member name="M:Dvtk.IheActors.Actors.DssOrderFillerActor.SendFillerOrderManagement(Dvtk.Hl7.Messages.OrmMessage)">
            <summary>
            
            </summary>
            <param name="ormMessage"></param>
            <returns></returns>
        </member>
        <member name="T:Dvtk.IheActors.Actors.EvidenceCreatorActor">
            <summary>
            Summary description for EvidenceCreatorActor.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Actors.EvidenceCreatorActor.#ctor(System.String,Dvtk.IheActors.IheFramework.IheFramework)">
            <summary>
            Class constructor.
            </summary>
            <param name="id">Actor Id.</param>
            <param name="iheFramework">Ihe Framework container.</param>
        </member>
        <member name="M:Dvtk.IheActors.Actors.EvidenceCreatorActor.ApplyConfig(Dvtk.IheActors.Bases.CommonConfig,Dvtk.IheActors.Actors.BasePeerToPeerConfigCollection)">
            <summary>
            Apply the Actor Configuration.
            </summary>
            <param name="commonConfig">Common Configuration.</param>
            <param name="peerToPeerConfigCollection">Peer to Peer Configuration collection.</param>
        </member>
        <member name="M:Dvtk.IheActors.Actors.EvidenceCreatorActor.HandleTransactionFrom(Dvtk.IheActors.Bases.ActorName,Dvtk.IheActors.Dicom.DicomTransaction)">
            <summary>
            Handle a Dicom Transaction from the given Actor Name.
            </summary>
            <param name="actorName">Source Actor Name.</param>
            <param name="dicomTransaction">Dicom Transaction.</param>
        </member>
        <member name="T:Dvtk.IheActors.Actors.ImageArchiveActor">
            <summary>
            Summary description for ImageArchiveActor.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ImageArchiveActor.#ctor(System.String,Dvtk.IheActors.IheFramework.IheFramework)">
            <summary>
            Class constructor.
            </summary>
            <param name="id">Actor Id.</param>
            <param name="iheFramework">Ihe Framework container.</param>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ImageArchiveActor.ApplyConfig(Dvtk.IheActors.Bases.CommonConfig,Dvtk.IheActors.Actors.BasePeerToPeerConfigCollection)">
            <summary>
            Apply the Actor Configuration.
            </summary>
            <param name="commonConfig">Common Configuration.</param>
            <param name="peerToPeerConfigCollection">Peer to Peer Configuration collection.</param>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ImageArchiveActor.HandleTransactionFrom(Dvtk.IheActors.Bases.ActorName,Dvtk.IheActors.Dicom.DicomTransaction)">
            <summary>
            Handle a Dicom Transaction from the given Actor Name.
            </summary>
            <param name="actorName">Source Actor Name.</param>
            <param name="dicomTransaction">Dicom Transaction.</param>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ImageArchiveActor.HandleUpdateFromImageManagerActor(Dvtk.Hl7.Messages.Hl7Message)">
            <summary>
            Handle the HL7 message update from the Image Manager Actor.
            </summary>
            <param name="message">HL7 message from Image Manager Actor.</param>
        </member>
        <member name="T:Dvtk.IheActors.Actors.ImageDisplayActor">
            <summary>
            Summary description for ImageDisplayActor.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ImageDisplayActor.#ctor(System.String,Dvtk.IheActors.IheFramework.IheFramework)">
            <summary>
            Class constructor.
            </summary>
            <param name="id">Actor Id.</param>
            <param name="iheFramework">Ihe Framework container.</param>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ImageDisplayActor.QueryItems(DvtkHighLevelInterface.InformationModel.QueryRetrieveLevelEnum)">
            <summary>
            Property - QueryItems
            </summary>
            <param name="level">Q/R Information Model that was used in the corresponding SendQueryImages() method call.</param>
            <returns>Collection of C-FIND-RSP messages that contain a C-FIND-RSP Dataset. The number of entries in the collection
            indicates the number of query matches.</returns>
        </member>
        <member name="P:Dvtk.IheActors.Actors.ImageDisplayActor.RetrieveItems">
            <summary>
            Property - RetrieveItems.
            Collection of C-MOVE-RSP messages returned. There may be more than one entry in the collection if the retrieve SCP
            supports intermediate C-MOVE-RSP messages.
            Use DicomQueryItem.GetValue(Tag.NUMBER_OF_COMPLETED_SUBOPERATIONS) to get completed count.
            Use DicomQueryItem.GetValue(Tag.NUMBER_OF_FAILED_SUBOPERATIONS) to get failed count.
            Use DicomQueryItem.GetValue(Tag.NUMBER_OF_REMAINING_SUBOPERATIONS) to get remaining count.
            Use DicomQueryItem.GetValue(Tag.NUMBER_OF_WARNING_SUBOPERATIONS) to get warning count.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ImageDisplayActor.ApplyConfig(Dvtk.IheActors.Bases.CommonConfig,Dvtk.IheActors.Actors.BasePeerToPeerConfigCollection)">
            <summary>
            Apply the Actor Configuration.
            </summary>
            <param name="commonConfig">Common Configuration.</param>
            <param name="peerToPeerConfigCollection">Peer to Peer Configuration collection.</param>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ImageDisplayActor.HandleTransactionFrom(Dvtk.IheActors.Bases.ActorName,Dvtk.IheActors.Dicom.DicomTransaction)">
            <summary>
            Handle a Dicom Transaction from the given Actor Name.
            </summary>
            <param name="actorName">Source Actor Name.</param>
            <param name="dicomTransaction">Dicom Transaction.</param>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ImageDisplayActor.SendQueryImages(DvtkHighLevelInterface.InformationModel.QueryRetrieveInformationModelEnum,DvtkHighLevelInterface.InformationModel.QueryRetrieveLevelEnum,DvtkData.Dimse.TagValueCollection)">
            <summary>
            Send a C-FIND-RQ Information Model Query.
            Query based on the informationModel provided and the query/retrieve level. Take
            the query tags from the queryTags provided.
            
            The C-FIND-RSP messages returned are stored in a DicomQueryItemCollection named QueryItems.
            </summary>
            <param name="informationModel">Q/R Information Model to be used in the query operation.</param>
            <param name="level">Query / retrieve level.</param>
            <param name="queryTags">List of Query Tags.</param>
            <returns>Boolean indicating success or failure.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ImageDisplayActor.SendRetrieveImages(DvtkHighLevelInterface.InformationModel.QueryRetrieveInformationModelEnum,DvtkHighLevelInterface.InformationModel.QueryRetrieveLevelEnum,System.String,DvtkData.Dimse.TagValueCollection)">
            <summary>
            Send a C-MOVE-RQ Information Model Retrieve.
            Retrieve based on the informationModel provided and the query/retrieve level. Take
            the retrieve tags from the retrieveTags provided. The retrieve is done to the move
            destination.
            
            The C-MOVE-RSP messages returned are stored in a DicomQueryItemCollection named RetrieveItems.
            </summary>
            <param name="informationModel">Q/R Information Model to be used in the retrieve operation.</param>
            <param name="level">Query / retrieve level.</param>
            <param name="moveDestination">AE Title of the "move" destination.</param>
            <param name="retrieveTags">List of Retrieve Tags.</param>
            <returns>Boolean indicating success or failure.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ImageDisplayActor.ClearDicomStoreDataDirectory(Dvtk.IheActors.Bases.ActorName)">
            <summary>
            Delete all the files in the DICOM Store Data Directory used by
            the Dicom Server for objects received fromActorName.
            </summary>
            <param name="fromActorName">From actor name.</param>
            <returns>Boolean indicating success or failure.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ImageDisplayActor.GetNoDicomStoreDataFiles(Dvtk.IheActors.Bases.ActorName)">
            <summary>
            Get the number of files currently stored in the DICOM
            Storage Directory fromActorName.
            </summary>
            <param name="fromActorName">From actor name.</param>
            <returns>Number of files in directory.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ImageDisplayActor.GetDicomStoreDataFilename(Dvtk.IheActors.Bases.ActorName,System.Int32)">
            <summary>
            Get the name of the indexed file in the DICOM Storage Directory
            fromActorName. The filename can then be used to further access
            the file.
            </summary>
            <param name="fromActorName">From actor name.</param>
            <param name="index">Zero based index from directory System.IO.FileInfo[].</param>
            <returns>Full filename for indexed DICOM file.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ImageDisplayActor.GetDicomStoreDataDirectory(Dvtk.IheActors.Bases.ActorName)">
            <summary>
            Get the DICOM Store Data Directory for the given fromActorName.
            </summary>
            <param name="fromActorName">From Actor Name.</param>
            <returns>Full directory name for DICOM Store Data.</returns>
        </member>
        <member name="T:Dvtk.IheActors.Actors.ImageManagerActor">
            <summary>
            Summary description for ImageManagerActor.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ImageManagerActor.#ctor(System.String,Dvtk.IheActors.IheFramework.IheFramework)">
            <summary>
            Class constructor.
            </summary>
            <param name="id">Actor Id</param>
            <param name="iheFramework">Ihe Framework container.</param>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ImageManagerActor.ApplyConfig(Dvtk.IheActors.Bases.CommonConfig,Dvtk.IheActors.Actors.BasePeerToPeerConfigCollection)">
            <summary>
            Apply the Actor Configuration.
            </summary>
            <param name="commonConfig">Common Configuration.</param>
            <param name="peerToPeerConfigCollection">Peer to Peer Configuration collection.</param>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ImageManagerActor.HandleTransactionFrom(Dvtk.IheActors.Bases.ActorName,Dvtk.IheActors.Hl7.Hl7Transaction)">
            <summary>
            Handle an HL7 Transation from the given Actor Name.
            </summary>
            <param name="actorName">Source Actor Name.</param>
            <param name="hl7Transaction">HL7 Transaction.</param>
        </member>
        <member name="M:Dvtk.IheActors.Actors.ImageManagerActor.HandleTransactionFrom(Dvtk.IheActors.Bases.ActorName,Dvtk.IheActors.Dicom.DicomTransaction)">
            <summary>
            Handle a Dicom Transaction from the given Actor Name.
            </summary>
            <param name="actorName">Source Actor Name.</param>
            <param name="dicomTransaction">Dicom Transaction.</param>
        </member>
        <member name="T:Dvtk.IheActors.Actors.IAcquisitionModalityActor">
            <summary>
            Summary description for IAcquisitionModalityActor.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Actors.IAcquisitionModalityActor.CreateUnscheduledWorklistItem(DvtkData.Dimse.TagValueCollection)">
            <summary>
            Create an unscheduled worklist item by adding the given user defined tags to those
            of the Default Value Manager. This worklist item can then be used in the
            SendNCreateModalityProcedureStepInProgress() and SendModalityImagesStored() method
            calls.
            This simulates the IHE Unscheduled Use Case.
            </summary>
            <param name="userDefinedTags">User defined Tags.</param>
            <returns>Modality worklist item populated from the user defined tags and default values.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Actors.IAcquisitionModalityActor.SendQueryModalityWorklist(DvtkData.Dimse.TagValueCollection)">
            <summary>
            Send a CFind Modality Worklist Query trigger from the given queryTags.
            All other return keys are taken from the supported return key attributes
            in the Worklist Information Model.
            </summary>
            <param name="queryTags">List of Query Tags.</param>
            <returns>Boolean indicating success or failure.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Actors.IAcquisitionModalityActor.SendQueryModalityWorklist(System.String,System.String)">
            <summary>
            Send a CFind Modality Worklist Query trigger by reading the query
            dataset from the given mwlQueryDcmFilename. If the scheduledProcedureStepStartDate
            is defined (not string empty) then if a value for this attribute is present in the
            read datset it will be overwritten by the scheduledProcedureStepStartDate value.
            </summary>
            <param name="mwlQueryDcmFilename">DCM file containing the MWL Query Dataset.</param>
            <param name="scheduledProcedureStepStartDate">Optional (not sting empty) start date to overwrite dataset value.</param>
            <returns>Boolean indicating success or failure.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Actors.IAcquisitionModalityActor.SendNCreateModalityProcedureStepInProgress(Dvtk.IheActors.Dicom.DicomQueryItem)">
            <summary>
            Send an N-CREATE MPPS IN-PROGRESS message by using the Default Value Manager.
            Use the modalityWorklistItem to overwrite the appropriate attribute values.
            </summary>
            <param name="modalityWorklistItem">Modality Worklist Item used to update MPPS IN-PROGRESS dataset.</param>
            <returns>Boolean indicating success or failure.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Actors.IAcquisitionModalityActor.SendNCreateModalityProcedureStepInProgress(System.String,Dvtk.IheActors.Dicom.DicomQueryItem)">
            <summary>
            Send an N-CREATE MPPS IN-PROGRESS message from the given mppsInProgressDcmFilename.
            Use the modalityWorklistItem to overwrite the appropriate attribute values.
            </summary>
            <param name="mppsInProgressDcmFilename">DCM Filename - contains MPPS IN-PROGRESS dataset.</param>
            <param name="modalityWorklistItem">Modality Worklist Item used to update MPPS IN-PROGRESS dataset.</param>
            <returns>Boolean indicating success or failure.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Actors.IAcquisitionModalityActor.SendNSetModalityProcedureStepInProgress(Dvtk.IheActors.Dicom.DicomQueryItem)">
            <summary>
            Send an N-SET MPPS IN-PROGRESS message by using the Default Value Manager.
            Use the modalityWorklistItem to overwrite the appropriate attribute values.
            NOTE: This call should only be made after the SendModalityProcedureStepInProgress() (using default N-CREATE) 
            has been made.
            </summary>
            <param name="modalityWorklistItem">Modality Worklist Item used to update MPPS IN-PROGRESS dataset.</param>
            <returns>Boolean indicating success or failure.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Actors.IAcquisitionModalityActor.SendNSetModalityProcedureStepInProgress(System.String,Dvtk.IheActors.Dicom.DicomQueryItem)">
            <summary>
            Send an N-SET MPPS IN-PROGRESS message from the given mppsInProgressDcmFilename.
            Use the modalityWorklistItem to overwrite the appropriate attribute values.
            NOTE: This call should only be made after the SendModalityProcedureStepInProgress() (using default N-CREATE) 
            has been made.
            </summary>
            <param name="mppsInProgressDcmFilename">DCM Filename - contains MPPS IN-PROGRESS dataset.</param>
            <param name="modalityWorklistItem">Modality Worklist Item used to update MPPS IN-PROGRESS dataset.</param>
            <returns>Boolean indicating success or failure.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Actors.IAcquisitionModalityActor.SendNSetModalityProcedureStepCompleted">
            <summary>
            Send an N-SET MPPS COMPLETED message. Take the default values from the Default Value Manager.
            </summary>
            <returns>Boolean indicating success or failure.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Actors.IAcquisitionModalityActor.SendNSetModalityProcedureStepCompleted(System.String)">
            <summary>
            Send an N-SET MPPS COMPLETED message. Take the default values from the given DCM file contents.
            </summary>
            <param name="mppsCompletedDcmFilename">DCM file for default MPPS Completed atribute values.</param>
            <returns>Boolean indicating success or failure.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Actors.IAcquisitionModalityActor.SendNSetModalityProcedureStepDiscontinued">
            <summary>
            Send an N-SET MPPS DISCONTINUED message. Take the default values from the Default Value Manager.
            </summary>
            <returns>Boolean indicating success or failure.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Actors.IAcquisitionModalityActor.SendNSetModalityProcedureStepDiscontinued(System.String)">
            <summary>
            Send an N-SET MPPS DISCONTINUED message. Take the default values from the given DCM file contents.
            </summary>
            <param name="mppsDiscontinuedDcmFilename">DCM file for default MPPS Discontinued atribute values.</param>
            <returns>Boolean indicating success or failure.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Actors.IAcquisitionModalityActor.SendModalityImagesStored(System.Boolean,Dvtk.IheActors.Dicom.DicomQueryItem)">
            <summary>
            Send a single image generated from the Default Value Manager and
            the given Modality Worklist Item.
            </summary>
            <param name="startNewSeries">Boolean indicating if this image is part of a new
            Series or not.</param>
            <param name="modalityWorklistItem">Worklist Item used to provide overruling values for
            the Image header.</param>
            <returns>Boolean indicating success or failure.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Actors.IAcquisitionModalityActor.SendModalityImagesStored(Dvtk.IheActors.Dicom.DicomQueryItem,System.Boolean)">
            <summary>
            Send all the images found in the data directory mapped from the given
            Modality Worklist item - the MapWorklistItemToStorageDirectory defines
            the data directory / worklist item attribute value mapping.
            </summary>
            <param name="modalityWorklistItem">Worklist Item used to provide overruling values for
            the Image headers.</param>
            <param name="withSingleAssociation">Boolean indicating whether the images should be sent in a single
            association or not.</param>
            <returns>Boolean indicating success or failure.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Actors.IAcquisitionModalityActor.SendModalityImagesStored(System.String,Dvtk.IheActors.Dicom.DicomQueryItem,System.Boolean)">
            <summary>
            Send all the images found in the given storage directory.
            </summary>
            <param name="storageDirectory">Given storage directory - containing storage DCM files.</param>
            <param name="modalityWorklistItem">Worklist Item used to provide overruling values for
            the Image headers.</param>
            <param name="withSingleAssociation">Boolean indicating whether the images should be sent in a single
            association or not.</param>
            <returns>Boolean indicating success or failure.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Actors.IAcquisitionModalityActor.SendStorageCommitment(System.Boolean,System.Int32)">
            <summary>
            Send the Storage Commitment message - use the storage commitment details
            built up during any previous SendModalityImagesStored() operations.
            The N-ACTION-RQ will be sent to the Image Manager.
            
            If the configured ActorOption1 for the DicomPeerToPeerConfiguration from the
            AcquisitionModalityActor to the ImageManagerActor is set to the string
            "DO_STORAGE_COMMITMENT_ON_SINGLE_ASSOCIATION" then the framework expects the
            Image Manager to return the N-EVENT-REPORT details over the same association
            as the N-ACTION details were sent. If the ActorOption1 configuration parameter
            is not set as above then the framework will expect the Image Manger to return
            the N-EVENT-REPORT details over a different association than the one used for the
            N-ACTION details.
            </summary>
            <param name="awaitNEventReport">Boolean indicating whether to wait for the
            N-EVENT-REPORT - either over the same or different association before returning
            to the caller.</param>
            <param name="timeOut">Time (in Seconds) to wait for the N-EVENT-REPORT to be sent
            from the Image Manager - only used if "awaitNEventReport" is set true.</param>
            <returns>Boolean indicating success or failure.</returns>
        </member>
        <member name="T:Dvtk.IheActors.Actors.IAdtPatientRegistrationActor">
            <summary>
            Summary description for IAdtPatientRegistrationActor.
            </summary>
        </member>
        <member name="T:Dvtk.IheActors.Actors.IDssOrderFillerActor">
            <summary>
            Summary description for IDssOrderFillerActor.
            </summary>
        </member>
        <member name="T:Dvtk.IheActors.Actors.IEvidenceCreatorActor">
            <summary>
            Summary description for IEvidenceCreatorActor.
            </summary>
        </member>
        <member name="T:Dvtk.IheActors.Actors.IImageDisplayActor">
            <summary>
            Summary description for IImageDisplayActor.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Actors.IImageDisplayActor.SendQueryImages(DvtkHighLevelInterface.InformationModel.QueryRetrieveInformationModelEnum,DvtkHighLevelInterface.InformationModel.QueryRetrieveLevelEnum,DvtkData.Dimse.TagValueCollection)">
            <summary>
            Send a C-FIND-RQ Information Model Query.
            Query based on the informationModel provided and the query/retrieve level. Take
            the query tags from the queryTags provided.
            
            The C-FIND-RSP messages returned are stored in a DicomQueryItemCollection named QueryItems.
            </summary>
            <param name="informationModel">Q/R Information Model to be used in the query operation.</param>
            <param name="level">Query / retrieve level.</param>
            <param name="queryTags">List of Query Tags.</param>
            <returns>Boolean indicating success or failure.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Actors.IImageDisplayActor.QueryItems(DvtkHighLevelInterface.InformationModel.QueryRetrieveLevelEnum)">
            <summary>
            Property - QueryItems
            </summary>
            <param name="level">Q/R Information Model that was used in the corresponding SendQueryImages() method call.</param>
            <returns>Collection of C-FIND-RSP messages that contain a C-FIND-RSP Dataset. The number of entries in the collection
            indicates the number of query matches.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Actors.IImageDisplayActor.SendRetrieveImages(DvtkHighLevelInterface.InformationModel.QueryRetrieveInformationModelEnum,DvtkHighLevelInterface.InformationModel.QueryRetrieveLevelEnum,System.String,DvtkData.Dimse.TagValueCollection)">
            <summary>
            Send a C-MOVE-RQ Information Model Retrieve.
            Retrieve based on the informationModel provided and the query/retrieve level. Take
            the retrieve tags from the retrieveTags provided. The retrieve is done to the move
            destination.
            
            The C-MOVE-RSP messages returned are stored in a DicomQueryItemCollection named RetrieveItems.
            </summary>
            <param name="informationModel">Q/R Information Model to be used in the retrieve operation.</param>
            <param name="level">Query / retrieve level.</param>
            <param name="moveDestination">AE Title of the "move" destination.</param>
            <param name="retrieveTags">List of Retrieve Tags.</param>
            <returns>Boolean indicating success or failure.</returns>
        </member>
        <member name="T:Dvtk.IheActors.Actors.IImageManagerActor">
            <summary>
            Summary description for IImageManagerActor.
            </summary>
        </member>
        <member name="T:Dvtk.IheActors.Actors.IOrderPlacerActor">
            <summary>
            Summary description for IOrderPlacerActor.
            </summary>
        </member>
        <member name="T:Dvtk.IheActors.Actors.IPpsManagerActor">
            <summary>
            Summary description for IPpsManagerActor.
            </summary>
        </member>
        <member name="T:Dvtk.IheActors.Actors.OrderPlacerActor">
            <summary>
            Summary description for OrderPlacerActor.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Actors.OrderPlacerActor.#ctor(System.String,Dvtk.IheActors.IheFramework.IheFramework)">
            <summary>
            Class constructor.
            </summary>
            <param name="id">Actor Id.</param>
            <param name="iheFramework">Ihe Framework container.</param>
        </member>
        <member name="M:Dvtk.IheActors.Actors.OrderPlacerActor.ApplyConfig(Dvtk.IheActors.Bases.CommonConfig,Dvtk.IheActors.Actors.BasePeerToPeerConfigCollection)">
            <summary>
            Apply the Actor Configuration.
            </summary>
            <param name="commonConfig">Common Configuration.</param>
            <param name="peerToPeerConfigCollection">Peer to Peer Configuration collection.</param>
        </member>
        <member name="M:Dvtk.IheActors.Actors.OrderPlacerActor.HandleTransactionFrom(Dvtk.IheActors.Bases.ActorName,Dvtk.IheActors.Hl7.Hl7Transaction)">
            <summary>
            Handle an HL7 Transation from the given Actor Name.
            </summary>
            <param name="actorName">Source Actor Name.</param>
            <param name="hl7Transaction">HL7 Transaction.</param>
        </member>
        <member name="T:Dvtk.IheActors.Actors.PpsManagerActor">
            <summary>
            Summary description for PpsManagerActor.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Actors.PpsManagerActor.#ctor(System.String,Dvtk.IheActors.IheFramework.IheFramework)">
            <summary>
            Class constructor.
            </summary>
            <param name="id">Actor Id.</param>
            <param name="iheFramework">Ihe Framework container.</param>
        </member>
        <member name="M:Dvtk.IheActors.Actors.PpsManagerActor.ApplyConfig(Dvtk.IheActors.Bases.CommonConfig,Dvtk.IheActors.Actors.BasePeerToPeerConfigCollection)">
            <summary>
            Apply the Actor Configuration.
            </summary>
            <param name="commonConfig">Common Configuration.</param>
            <param name="peerToPeerConfigCollection">Peer to Peer Configuration collection.</param>
        </member>
        <member name="M:Dvtk.IheActors.Actors.PpsManagerActor.HandleTransactionFrom(Dvtk.IheActors.Bases.ActorName,Dvtk.IheActors.Dicom.DicomTransaction)">
            <summary>
            Handle a Dicom Transaction from the given Actor Name.
            </summary>
            <param name="actorName">Source Actor Name.</param>
            <param name="dicomTransaction">Dicom Transaction.</param>
        </member>
        <member name="T:Dvtk.IheActors.Actors.PrintComposerActor">
            <summary>
            Summary description for PrintComposerActor.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Actors.PrintComposerActor.#ctor(System.String,Dvtk.IheActors.IheFramework.IheFramework)">
            <summary>
            Class constructor.
            </summary>
            <param name="id">Actor Id.</param>
            <param name="iheFramework">Ihe Framework container.</param>
        </member>
        <member name="M:Dvtk.IheActors.Actors.PrintComposerActor.ApplyConfig(Dvtk.IheActors.Bases.CommonConfig,Dvtk.IheActors.Actors.BasePeerToPeerConfigCollection)">
            <summary>
            Apply the Actor Configuration.
            </summary>
            <param name="commonConfig">Common Configuration.</param>
            <param name="peerToPeerConfigCollection">Peer to Peer Configuration collection.</param>
        </member>
        <member name="T:Dvtk.IheActors.Actors.PrintServerActor">
            <summary>
            Summary description for PrintServerActor.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Actors.PrintServerActor.#ctor(System.String,Dvtk.IheActors.IheFramework.IheFramework)">
            <summary>
            Class constructor.
            </summary>
            <param name="id">Actor Id.</param>
            <param name="iheFramework">Ihe Framework container.</param>
        </member>
        <member name="M:Dvtk.IheActors.Actors.PrintServerActor.ApplyConfig(Dvtk.IheActors.Bases.CommonConfig,Dvtk.IheActors.Actors.BasePeerToPeerConfigCollection)">
            <summary>
            Apply the Actor Configuration.
            </summary>
            <param name="commonConfig">Common Configuration.</param>
            <param name="peerToPeerConfigCollection">Peer to Peer Configuration collection.</param>
        </member>
        <member name="M:Dvtk.IheActors.Actors.PrintServerActor.HandleTransactionFrom(Dvtk.IheActors.Bases.ActorName,Dvtk.IheActors.Dicom.DicomTransaction)">
            <summary>
            Handle a Dicom Transaction from the given Actor Name.
            </summary>
            <param name="actorName">Source Actor Name.</param>
            <param name="dicomTransaction">Dicom Transaction.</param>
        </member>
        <member name="T:Dvtk.IheActors.Actors.BasePeerToPeerConfigCollection">
            <summary>
            Summary description for BasePeerToPeerConfigCollection.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Actors.BasePeerToPeerConfigCollection.#ctor">
            <summary>
            Class Constructor.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Actors.BasePeerToPeerConfigCollection.Item(System.Int32)">
            <summary>
            Gets or sets an <see cref="T:Dvtk.IheActors.Bases.BasePeerToPeerConfig"/> from the collection.
            </summary>
            <param name="index">The zero-based index of the collection member to get or set.</param>
            <value>The <see cref="T:Dvtk.IheActors.Bases.BasePeerToPeerConfig"/> at the specified index.</value>
        </member>
        <member name="M:Dvtk.IheActors.Actors.BasePeerToPeerConfigCollection.Add(Dvtk.IheActors.Bases.BasePeerToPeerConfig)">
            <summary>
            Adds an object to the end of the <see cref="T:Dvtk.IheActors.Actors.BasePeerToPeerConfigCollection"/>.
            </summary>
            <param name="value">The <see cref="T:Dvtk.IheActors.Bases.BasePeerToPeerConfig"/> to be added to the end of the <see cref="T:Dvtk.IheActors.Actors.BasePeerToPeerConfigCollection"/>.</param>
            <returns>The <see cref="T:Dvtk.IheActors.Actors.BasePeerToPeerConfigCollection"/> index at which the value has been added.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Actors.BasePeerToPeerConfigCollection.IndexOf(Dvtk.IheActors.Bases.BasePeerToPeerConfig)">
            <summary>
            Searches for the specified <see cref="T:Dvtk.IheActors.Bases.BasePeerToPeerConfig"/> and 
            returns the zero-based index of the first occurrence within the entire <see cref="T:Dvtk.IheActors.Actors.BasePeerToPeerConfigCollection"/>.
            </summary>
            <param name="value">The <see cref="T:Dvtk.IheActors.Bases.BasePeerToPeerConfig"/> to locate in the <see cref="T:Dvtk.IheActors.Actors.BasePeerToPeerConfigCollection"/>.</param>
            <returns>
            The zero-based index of the first occurrence of value within the entire <see cref="T:Dvtk.IheActors.Actors.BasePeerToPeerConfigCollection"/>, 
            if found; otherwise, -1.
            </returns>
        </member>
        <member name="M:Dvtk.IheActors.Actors.BasePeerToPeerConfigCollection.Insert(System.Int32,Dvtk.IheActors.Bases.BasePeerToPeerConfig)">
            <summary>
            Inserts an <see cref="T:Dvtk.IheActors.Bases.BasePeerToPeerConfig"/> element into the <see cref="T:Dvtk.IheActors.Actors.BasePeerToPeerConfigCollection"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="value">The <see cref="T:Dvtk.IheActors.Bases.BasePeerToPeerConfig"/> to insert.</param>
        </member>
        <member name="M:Dvtk.IheActors.Actors.BasePeerToPeerConfigCollection.Remove(Dvtk.IheActors.Bases.BasePeerToPeerConfig)">
            <summary>
            Removes the first occurrence of a specific <see cref="T:Dvtk.IheActors.Bases.BasePeerToPeerConfig"/> from the <see cref="T:Dvtk.IheActors.Actors.BasePeerToPeerConfigCollection"/>.
            </summary>
            <param name="value">The <see cref="T:Dvtk.IheActors.Bases.BasePeerToPeerConfig"/> to remove from the <see cref="T:Dvtk.IheActors.Actors.BasePeerToPeerConfigCollection"/>.</param>
        </member>
        <member name="M:Dvtk.IheActors.Actors.BasePeerToPeerConfigCollection.Contains(Dvtk.IheActors.Bases.BasePeerToPeerConfig)">
            <summary>
            Determines whether the <see cref="T:Dvtk.IheActors.Actors.BasePeerToPeerConfigCollection"/> contains a specific element.
            </summary>
            <param name="value">The <see cref="T:Dvtk.IheActors.Bases.BasePeerToPeerConfig"/> to locate in the <see cref="T:Dvtk.IheActors.Actors.BasePeerToPeerConfigCollection"/>.</param>
            <returns>
            <c>true</c> if the <see cref="T:Dvtk.IheActors.Actors.BasePeerToPeerConfigCollection"/> contains the specified value; 
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dvtk.IheActors.Actors.BasePeerToPeerConfigCollection.OnInsert(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes before inserting a new element into the collection instance.
            </summary>
            <param name="index">The zero-based index at which to insert value.</param>
            <param name="value">The new value of the element at index.</param>
        </member>
        <member name="M:Dvtk.IheActors.Actors.BasePeerToPeerConfigCollection.OnRemove(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes when removing an element from the collection instance.
            </summary>
            <param name="index">The zero-based index at which value can be found.</param>
            <param name="value">The value of the element to remove from index.</param>
        </member>
        <member name="M:Dvtk.IheActors.Actors.BasePeerToPeerConfigCollection.OnSet(System.Int32,System.Object,System.Object)">
            <summary>
            Performs additional custom processes before setting a value in the collection instance.
            </summary>
            <param name="index">The zero-based index at which oldValue can be found.</param>
            <param name="oldValue">The value to replace with newValue.</param>
            <param name="newValue">The new value of the element at index.</param>
        </member>
        <member name="M:Dvtk.IheActors.Actors.BasePeerToPeerConfigCollection.OnValidate(System.Object)">
            <summary>
            Performs additional custom processes when validating a value.
            </summary>
            <param name="value">The object to validate.</param>
        </member>
        <member name="M:Dvtk.IheActors.Actors.BasePeerToPeerConfigCollection.CopyTo(Dvtk.IheActors.Bases.BasePeerToPeerConfig[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to a strong-typed <c>BasePeerToPeerConfig[]</c>, 
            starting at a particular <c>BasePeerToPeerConfig[]</c> index.
            </summary>
            <param name="array">
            The one-dimensional <c>BasePeerToPeerConfig[]</c> that is the destination of the elements 
            copied from <see cref="T:System.Collections.ICollection"/>.
            The <c>BasePeerToPeerConfig[]</c> must have zero-based indexing. 
            </param>
            <param name="index">
            The zero-based index in array at which copying begins.
            </param>
            <remarks>
            Provides the strongly typed member for <see cref="T:System.Collections.ICollection"/>.
            </remarks>
        </member>
        <member name="M:Dvtk.IheActors.Actors.BasePeerToPeerConfigCollection.WriteXmlConfig(System.Xml.XmlTextWriter)">
            <summary>
            Write Configuration data in XML format to the XML Text Writer.
            </summary>
            <param name="writer">XML Text Writer</param>
        </member>
        <member name="T:Dvtk.IheActors.Actors.BaseTriggerCollection">
            <summary>
            Summary description for BaseTriggerCollection.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Actors.BaseTriggerCollection.#ctor">
            <summary>
            Class Constructor.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Actors.BaseTriggerCollection.Item(System.Int32)">
            <summary>
            Gets or sets an <see cref="T:Dvtk.IheActors.Bases.BaseTrigger"/> from the collection.
            </summary>
            <param name="index">The zero-based index of the collection member to get or set.</param>
            <value>The <see cref="T:Dvtk.IheActors.Bases.BaseTrigger"/> at the specified index.</value>
        </member>
        <member name="M:Dvtk.IheActors.Actors.BaseTriggerCollection.Add(Dvtk.IheActors.Bases.BaseTrigger)">
            <summary>
            Adds an object to the end of the <see cref="T:Dvtk.IheActors.Actors.BaseTriggerCollection"/>.
            </summary>
            <param name="value">The <see cref="T:Dvtk.IheActors.Bases.BaseTrigger"/> to be added to the end of the <see cref="T:Dvtk.IheActors.Actors.BaseTriggerCollection"/>.</param>
            <returns>The <see cref="T:Dvtk.IheActors.Actors.BaseTriggerCollection"/> index at which the value has been added.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Actors.BaseTriggerCollection.IndexOf(Dvtk.IheActors.Bases.BaseTrigger)">
            <summary>
            Searches for the specified <see cref="T:Dvtk.IheActors.Bases.BaseTrigger"/> and 
            returns the zero-based index of the first occurrence within the entire <see cref="T:Dvtk.IheActors.Actors.BaseTriggerCollection"/>.
            </summary>
            <param name="value">The <see cref="T:Dvtk.IheActors.Bases.BaseTrigger"/> to locate in the <see cref="T:Dvtk.IheActors.Actors.BaseTriggerCollection"/>.</param>
            <returns>
            The zero-based index of the first occurrence of value within the entire <see cref="T:Dvtk.IheActors.Actors.BaseTriggerCollection"/>, 
            if found; otherwise, -1.
            </returns>
        </member>
        <member name="M:Dvtk.IheActors.Actors.BaseTriggerCollection.Insert(System.Int32,Dvtk.IheActors.Bases.BaseTrigger)">
            <summary>
            Inserts an <see cref="T:Dvtk.IheActors.Bases.BaseTrigger"/> element into the <see cref="T:Dvtk.IheActors.Actors.BaseTriggerCollection"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="value">The <see cref="T:Dvtk.IheActors.Bases.BaseTrigger"/> to insert.</param>
        </member>
        <member name="M:Dvtk.IheActors.Actors.BaseTriggerCollection.Remove(Dvtk.IheActors.Bases.BaseTrigger)">
            <summary>
            Removes the first occurrence of a specific <see cref="T:Dvtk.IheActors.Bases.BaseTrigger"/> from the <see cref="T:Dvtk.IheActors.Actors.BaseTriggerCollection"/>.
            </summary>
            <param name="value">The <see cref="T:Dvtk.IheActors.Bases.BaseTrigger"/> to remove from the <see cref="T:Dvtk.IheActors.Actors.BaseTriggerCollection"/>.</param>
        </member>
        <member name="M:Dvtk.IheActors.Actors.BaseTriggerCollection.Contains(Dvtk.IheActors.Bases.BaseTrigger)">
            <summary>
            Determines whether the <see cref="T:Dvtk.IheActors.Actors.BaseTriggerCollection"/> contains a specific element.
            </summary>
            <param name="value">The <see cref="T:Dvtk.IheActors.Bases.BaseTrigger"/> to locate in the <see cref="T:Dvtk.IheActors.Actors.BaseTriggerCollection"/>.</param>
            <returns>
            <c>true</c> if the <see cref="T:Dvtk.IheActors.Actors.BaseTriggerCollection"/> contains the specified value; 
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dvtk.IheActors.Actors.BaseTriggerCollection.OnInsert(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes before inserting a new element into the collection instance.
            </summary>
            <param name="index">The zero-based index at which to insert value.</param>
            <param name="value">The new value of the element at index.</param>
        </member>
        <member name="M:Dvtk.IheActors.Actors.BaseTriggerCollection.OnRemove(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes when removing an element from the collection instance.
            </summary>
            <param name="index">The zero-based index at which value can be found.</param>
            <param name="value">The value of the element to remove from index.</param>
        </member>
        <member name="M:Dvtk.IheActors.Actors.BaseTriggerCollection.OnSet(System.Int32,System.Object,System.Object)">
            <summary>
            Performs additional custom processes before setting a value in the collection instance.
            </summary>
            <param name="index">The zero-based index at which oldValue can be found.</param>
            <param name="oldValue">The value to replace with newValue.</param>
            <param name="newValue">The new value of the element at index.</param>
        </member>
        <member name="M:Dvtk.IheActors.Actors.BaseTriggerCollection.OnValidate(System.Object)">
            <summary>
            Performs additional custom processes when validating a value.
            </summary>
            <param name="value">The object to validate.</param>
        </member>
        <member name="M:Dvtk.IheActors.Actors.BaseTriggerCollection.CopyTo(Dvtk.IheActors.Bases.BaseTrigger[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to a strong-typed <c>BaseTrigger[]</c>, 
            starting at a particular <c>BaseTrigger[]</c> index.
            </summary>
            <param name="array">
            The one-dimensional <c>BaseTrigger[]</c> that is the destination of the elements 
            copied from <see cref="T:System.Collections.ICollection"/>.
            The <c>BaseTrigger[]</c> must have zero-based indexing. 
            </param>
            <param name="index">
            The zero-based index in array at which copying begins.
            </param>
            <remarks>
            Provides the strongly typed member for <see cref="T:System.Collections.ICollection"/>.
            </remarks>
        </member>
        <member name="T:Dvtk.IheActors.Bases.ActorConnection">
            <summary>
            Summary description for ActorConnection.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Bases.ActorConnection.#ctor(Dvtk.IheActors.Bases.ActorName,System.Boolean)">
            <summary>
            Class constructor
            </summary>
            <param name="actorName">Actor Name.</param>
            <param name="active">Active flag - true/false.</param>
        </member>
        <member name="M:Dvtk.IheActors.Bases.ActorConnection.#ctor(Dvtk.IheActors.Bases.ActorTypeEnum,System.String,System.Boolean)">
            <summary>
            Class constructor
            </summary>
            <param name="actorType">Actor Type.</param>
            <param name="id">Actor Id.</param>
            <param name="active">Active flag - true/false.</param>
        </member>
        <member name="P:Dvtk.IheActors.Bases.ActorConnection.ActorName">
            <summary>
            Property - ActorName.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Bases.ActorConnection.IsActive">
            <summary>
            Property - IsActive.
            </summary>
        </member>
        <member name="T:Dvtk.IheActors.Bases.ActorConnectionCollection">
            <summary>
            Summary description for ActorConnectionCollection.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Bases.ActorConnectionCollection.#ctor">
            <summary>
            Class Constructor.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Bases.ActorConnectionCollection.Item(System.Int32)">
            <summary>
            Gets or sets an <see cref="T:Dvtk.IheActors.Bases.ActorConnection"/> from the collection.
            </summary>
            <param name="index">The zero-based index of the collection member to get or set.</param>
            <value>The <see cref="T:Dvtk.IheActors.Bases.ActorConnection"/> at the specified index.</value>
        </member>
        <member name="M:Dvtk.IheActors.Bases.ActorConnectionCollection.Add(Dvtk.IheActors.Bases.ActorConnection)">
            <summary>
            Adds an object to the end of the <see cref="T:Dvtk.IheActors.Bases.ActorConnectionCollection"/>.
            </summary>
            <param name="value">The <see cref="T:Dvtk.IheActors.Bases.ActorConnection"/> to be added to the end of the <see cref="T:Dvtk.IheActors.Bases.ActorConnectionCollection"/>.</param>
            <returns>The <see cref="T:Dvtk.IheActors.Bases.ActorConnectionCollection"/> index at which the value has been added.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Bases.ActorConnectionCollection.IndexOf(Dvtk.IheActors.Bases.ActorConnection)">
            <summary>
            Searches for the specified <see cref="T:Dvtk.IheActors.Bases.ActorConnection"/> and 
            returns the zero-based index of the first occurrence within the entire <see cref="T:Dvtk.IheActors.Bases.ActorConnectionCollection"/>.
            </summary>
            <param name="value">The <see cref="T:Dvtk.IheActors.Bases.ActorConnection"/> to locate in the <see cref="T:Dvtk.IheActors.Bases.ActorConnectionCollection"/>.</param>
            <returns>
            The zero-based index of the first occurrence of value within the entire <see cref="T:Dvtk.IheActors.Bases.ActorConnectionCollection"/>, 
            if found; otherwise, -1.
            </returns>
        </member>
        <member name="M:Dvtk.IheActors.Bases.ActorConnectionCollection.Insert(System.Int32,Dvtk.IheActors.Bases.ActorConnection)">
            <summary>
            Inserts an <see cref="T:Dvtk.IheActors.Bases.ActorConnection"/> element into the <see cref="T:Dvtk.IheActors.Bases.ActorConnectionCollection"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="value">The <see cref="T:Dvtk.IheActors.Bases.ActorConnection"/> to insert.</param>
        </member>
        <member name="M:Dvtk.IheActors.Bases.ActorConnectionCollection.Remove(Dvtk.IheActors.Bases.ActorConnection)">
            <summary>
            Removes the first occurrence of a specific <see cref="T:Dvtk.IheActors.Bases.ActorConnection"/> from the <see cref="T:Dvtk.IheActors.Bases.ActorConnectionCollection"/>.
            </summary>
            <param name="value">The <see cref="T:Dvtk.IheActors.Bases.ActorConnection"/> to remove from the <see cref="T:Dvtk.IheActors.Bases.ActorConnectionCollection"/>.</param>
        </member>
        <member name="M:Dvtk.IheActors.Bases.ActorConnectionCollection.Contains(Dvtk.IheActors.Bases.ActorConnection)">
            <summary>
            Determines whether the <see cref="T:Dvtk.IheActors.Bases.ActorConnectionCollection"/> contains a specific element.
            </summary>
            <param name="value">The <see cref="T:Dvtk.IheActors.Bases.ActorConnection"/> to locate in the <see cref="T:Dvtk.IheActors.Bases.ActorConnectionCollection"/>.</param>
            <returns>
            <c>true</c> if the <see cref="T:Dvtk.IheActors.Bases.ActorConnectionCollection"/> contains the specified value; 
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dvtk.IheActors.Bases.ActorConnectionCollection.OnInsert(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes before inserting a new element into the collection instance.
            </summary>
            <param name="index">The zero-based index at which to insert value.</param>
            <param name="value">The new value of the element at index.</param>
        </member>
        <member name="M:Dvtk.IheActors.Bases.ActorConnectionCollection.OnRemove(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes when removing an element from the collection instance.
            </summary>
            <param name="index">The zero-based index at which value can be found.</param>
            <param name="value">The value of the element to remove from index.</param>
        </member>
        <member name="M:Dvtk.IheActors.Bases.ActorConnectionCollection.OnSet(System.Int32,System.Object,System.Object)">
            <summary>
            Performs additional custom processes before setting a value in the collection instance.
            </summary>
            <param name="index">The zero-based index at which oldValue can be found.</param>
            <param name="oldValue">The value to replace with newValue.</param>
            <param name="newValue">The new value of the element at index.</param>
        </member>
        <member name="M:Dvtk.IheActors.Bases.ActorConnectionCollection.OnValidate(System.Object)">
            <summary>
            Performs additional custom processes when validating a value.
            </summary>
            <param name="value">The object to validate.</param>
        </member>
        <member name="M:Dvtk.IheActors.Bases.ActorConnectionCollection.CopyTo(Dvtk.IheActors.Bases.ActorConnection[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to a strong-typed <c>ActorConnection[]</c>, 
            starting at a particular <c>ActorConnection[]</c> index.
            </summary>
            <param name="array">
            The one-dimensional <c>ActorConnection[]</c> that is the destination of the elements 
            copied from <see cref="T:System.Collections.ICollection"/>.
            The <c>ActorConnection[]</c> must have zero-based indexing. 
            </param>
            <param name="index">
            The zero-based index in array at which copying begins.
            </param>
            <remarks>
            Provides the strongly typed member for <see cref="T:System.Collections.ICollection"/>.
            </remarks>
        </member>
        <member name="M:Dvtk.IheActors.Bases.ActorConnectionCollection.EnableAll">
            <summary>
            Enable connections to all the destination actors 
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Bases.ActorConnectionCollection.Enable(Dvtk.IheActors.Bases.ActorTypeEnum,System.String)">
            <summary>
            Enable the connection to a specific actor.
            </summary>
            <param name="actorType">Destination actor type.</param>
            <param name="id">Destination actor id.</param>
            <returns>bool - destination enabled true/false. False indicates that the destination actor was not found.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Bases.ActorConnectionCollection.DisableAll">
            <summary>
            Disable connections to all the destination actors 
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Bases.ActorConnectionCollection.Disable(Dvtk.IheActors.Bases.ActorTypeEnum,System.String)">
            <summary>
            Disable the connection to a specific actor.
            </summary>
            <param name="actorType">Destination actor type.</param>
            <param name="id">Destination actor id.</param>
            <returns>bool - destination disabled true/false. False indicates that the destination actor was not found.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Bases.ActorConnectionCollection.IsEnabled(Dvtk.IheActors.Bases.ActorTypeEnum)">
            <summary>
            Return a list of all the destination actor names of the given actor type that are active.
            </summary>
            <param name="actorType">Destination actor type.</param>
            <returns>ActorNameCollection - all active destination actor names of the given actor type.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Bases.ActorConnectionCollection.IsEnabled(Dvtk.IheActors.Bases.ActorName)">
            <summary>
            Check if an actor connection is already enabled for the given actor name.
            </summary>
            <param name="actorName">Actor Name.</param>
            <returns>Boolean indicating whether the actor connection is enabled or not.</returns>
        </member>
        <member name="T:Dvtk.IheActors.Bases.ActorTypeEnum">
            <summary>
            Actor Type Enum.
            </summary>
        </member>
        <member name="T:Dvtk.IheActors.Bases.ActorTypes">
            <summary>
            Summary description for ActorTypes.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Bases.ActorTypes.Type(Dvtk.IheActors.Bases.ActorTypeEnum)">
            <summary>
            Actor string based type from enum.
            </summary>
            <param name="actorType">Actor Type as Enum.</param>
            <returns>Actor Type as String.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Bases.ActorTypes.TypeEnum(System.String)">
            <summary>
            Actor enum based type from string.
            </summary>
            <param name="type">Actor type as String.</param>
            <returns>Actor Type as Enum.</returns>
        </member>
        <member name="T:Dvtk.IheActors.Bases.ActorName">
            <summary>
            Summary description for ActorName.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Bases.ActorName.#ctor(Dvtk.IheActors.Bases.ActorTypeEnum,System.String)">
            <summary>
            Class constructor.
            </summary>
            <param name="type">Actor Type.</param>
            <param name="id">Actor Id.</param>
        </member>
        <member name="P:Dvtk.IheActors.Bases.ActorName.Type">
            <summary>
            Property - Actor Type
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Bases.ActorName.Id">
            <summary>
            Property - Actor Id
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Bases.ActorName.TypeId">
            <summary>
            Property - TypeId combination - used as indexer
            </summary>
        </member>
        <member name="T:Dvtk.IheActors.Bases.ActorNameCollection">
            <summary>
            Summary description for ActorNameCollection.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Bases.ActorNameCollection.#ctor">
            <summary>
            Class Constructor.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Bases.ActorNameCollection.Item(System.Int32)">
            <summary>
            Gets or sets an <see cref="T:Dvtk.IheActors.Bases.ActorName"/> from the collection.
            </summary>
            <param name="index">The zero-based index of the collection member to get or set.</param>
            <value>The <see cref="T:Dvtk.IheActors.Bases.ActorName"/> at the specified index.</value>
        </member>
        <member name="M:Dvtk.IheActors.Bases.ActorNameCollection.Add(Dvtk.IheActors.Bases.ActorName)">
            <summary>
            Adds an object to the end of the <see cref="T:Dvtk.IheActors.Bases.ActorNameCollection"/>.
            </summary>
            <param name="value">The <see cref="T:Dvtk.IheActors.Bases.ActorName"/> to be added to the end of the <see cref="T:Dvtk.IheActors.Bases.ActorNameCollection"/>.</param>
            <returns>The <see cref="T:Dvtk.IheActors.Bases.ActorNameCollection"/> index at which the value has been added.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Bases.ActorNameCollection.IndexOf(Dvtk.IheActors.Bases.ActorName)">
            <summary>
            Searches for the specified <see cref="T:Dvtk.IheActors.Bases.ActorName"/> and 
            returns the zero-based index of the first occurrence within the entire <see cref="T:Dvtk.IheActors.Bases.ActorNameCollection"/>.
            </summary>
            <param name="value">The <see cref="T:Dvtk.IheActors.Bases.ActorName"/> to locate in the <see cref="T:Dvtk.IheActors.Bases.ActorNameCollection"/>.</param>
            <returns>
            The zero-based index of the first occurrence of value within the entire <see cref="T:Dvtk.IheActors.Bases.ActorNameCollection"/>, 
            if found; otherwise, -1.
            </returns>
        </member>
        <member name="M:Dvtk.IheActors.Bases.ActorNameCollection.Insert(System.Int32,Dvtk.IheActors.Bases.ActorName)">
            <summary>
            Inserts an <see cref="T:Dvtk.IheActors.Bases.ActorName"/> element into the <see cref="T:Dvtk.IheActors.Bases.ActorNameCollection"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="value">The <see cref="T:Dvtk.IheActors.Bases.ActorName"/> to insert.</param>
        </member>
        <member name="M:Dvtk.IheActors.Bases.ActorNameCollection.Remove(Dvtk.IheActors.Bases.ActorName)">
            <summary>
            Removes the first occurrence of a specific <see cref="T:Dvtk.IheActors.Bases.ActorName"/> from the <see cref="T:Dvtk.IheActors.Bases.ActorNameCollection"/>.
            </summary>
            <param name="value">The <see cref="T:Dvtk.IheActors.Bases.ActorName"/> to remove from the <see cref="T:Dvtk.IheActors.Bases.ActorNameCollection"/>.</param>
        </member>
        <member name="M:Dvtk.IheActors.Bases.ActorNameCollection.Contains(Dvtk.IheActors.Bases.ActorName)">
            <summary>
            Determines whether the <see cref="T:Dvtk.IheActors.Bases.ActorNameCollection"/> contains a specific element.
            </summary>
            <param name="value">The <see cref="T:Dvtk.IheActors.Bases.ActorName"/> to locate in the <see cref="T:Dvtk.IheActors.Bases.ActorNameCollection"/>.</param>
            <returns>
            <c>true</c> if the <see cref="T:Dvtk.IheActors.Bases.ActorNameCollection"/> contains the specified value; 
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dvtk.IheActors.Bases.ActorNameCollection.OnInsert(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes before inserting a new element into the collection instance.
            </summary>
            <param name="index">The zero-based index at which to insert value.</param>
            <param name="value">The new value of the element at index.</param>
        </member>
        <member name="M:Dvtk.IheActors.Bases.ActorNameCollection.OnRemove(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes when removing an element from the collection instance.
            </summary>
            <param name="index">The zero-based index at which value can be found.</param>
            <param name="value">The value of the element to remove from index.</param>
        </member>
        <member name="M:Dvtk.IheActors.Bases.ActorNameCollection.OnSet(System.Int32,System.Object,System.Object)">
            <summary>
            Performs additional custom processes before setting a value in the collection instance.
            </summary>
            <param name="index">The zero-based index at which oldValue can be found.</param>
            <param name="oldValue">The value to replace with newValue.</param>
            <param name="newValue">The new value of the element at index.</param>
        </member>
        <member name="M:Dvtk.IheActors.Bases.ActorNameCollection.OnValidate(System.Object)">
            <summary>
            Performs additional custom processes when validating a value.
            </summary>
            <param name="value">The object to validate.</param>
        </member>
        <member name="M:Dvtk.IheActors.Bases.ActorNameCollection.CopyTo(Dvtk.IheActors.Bases.ActorName[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to a strong-typed <c>ActorName[]</c>, 
            starting at a particular <c>ActorName[]</c> index.
            </summary>
            <param name="array">
            The one-dimensional <c>ActorName[]</c> that is the destination of the elements 
            copied from <see cref="T:System.Collections.ICollection"/>.
            The <c>ActorName[]</c> must have zero-based indexing. 
            </param>
            <param name="index">
            The zero-based index in array at which copying begins.
            </param>
            <remarks>
            Provides the strongly typed member for <see cref="T:System.Collections.ICollection"/>.
            </remarks>
        </member>
        <member name="T:Dvtk.IheActors.Bases.ActorNode">
            <summary>
            Summary description for ActorNode.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Bases.ActorNode.#ctor">
            <summary>
            Class constructor.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Bases.ActorNode.#ctor(Dvtk.IheActors.Bases.ActorName,System.String)">
            <summary>
            Class constructor.
            </summary>
            <param name="actorName">Actor Name.</param>
            <param name="aeTitle">Actor AE Title.</param>
        </member>
        <member name="P:Dvtk.IheActors.Bases.ActorNode.ActorName">
            <summary>
            Property - Actor Name.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Bases.ActorNode.AeTitle">
            <summary>
            Property - Actor AE Title.
            </summary>
        </member>
        <member name="T:Dvtk.IheActors.Bases.BaseActor">
            <summary>
            Summary description for BaseActor.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Bases.BaseActor.#ctor(Dvtk.IheActors.Bases.ActorName,Dvtk.IheActors.IheFramework.IheFramework)">
            <summary>
            Class constructor.
            </summary>
            <param name="actorName">Actor Name.</param>
            <param name="iheFramework">Ihe Framework container.</param>
        </member>
        <member name="P:Dvtk.IheActors.Bases.BaseActor.ActorName">
            <summary>
            Property - ActorName
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Bases.BaseActor.IheFramework">
            <summary>
            Property - IheFramework
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Bases.BaseActor.ActorConnectionCollection">
            <summary>
            Property - ActorConnectionCollection
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Bases.BaseActor.ActorsTransactionLog">
            <summary>
            Property - ActorsTransactionLog
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Bases.BaseActor.ThreadManager">
            <summary>
            Property - DvtThreadManager
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Bases.BaseActor.DefaultValueManager">
            <summary>
            Property - DefaultValueManager
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Bases.BaseActor.InitActor">
            <summary>
            Initialize the Actor
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Bases.BaseActor.AttachThreadToThreadUserInterfaces(DvtkHighLevelInterface.Common.Threads.Thread)">
            <summary>
            This object has zero or more attached User Interfaces.
            Attach the supplied thread to all the User Interfaces that also implement the IThreadUserInterface.
            </summary>
            <param name="thread">HLI Thread</param>
        </member>
        <member name="M:Dvtk.IheActors.Bases.BaseActor.ConfigActor(Dvtk.IheActors.Bases.CommonConfig,Dvtk.IheActors.Actors.BasePeerToPeerConfigCollection)">
            <summary>
            Configure the Actor
            </summary>
            <param name="commonConfig">Common Configuration.</param>
            <param name="peerToPeerConfigCollection">Peer to Peer Configuration collection.</param>
        </member>
        <member name="M:Dvtk.IheActors.Bases.BaseActor.ApplyConfig(Dvtk.IheActors.Bases.CommonConfig,Dvtk.IheActors.Actors.BasePeerToPeerConfigCollection)">
            <summary>
            Apply the Actor Configuration.
            </summary>
            <param name="commonConfig">Common Configuration.</param>
            <param name="peerToPeerConfigCollection">Peer to Peer Configuration collection.</param>
        </member>
        <member name="M:Dvtk.IheActors.Bases.BaseActor.StartActor(Dvtk.Dicom.InformationEntity.DefaultValues.DefaultValueManager)">
            <summary>
            Start the Actor.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Bases.BaseActor.StopActor">
            <summary>
            Stop the Actor.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Bases.BaseActor.TriggerActorInstances(Dvtk.IheActors.Bases.ActorTypeEnum,Dvtk.IheActors.Bases.BaseTrigger,System.Boolean)">
            <summary>
            Trigger the Actor Instances of the given Actor Type.
            </summary>
            <param name="actorType">Destination Actor Type.</param>
            <param name="trigger">Trigger message.</param>
            <param name="awaitCompletion">Boolean indicating whether this a synchronous call or not.</param>
            <returns>Boolean indicating success or failure.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Bases.BaseActor.TriggerActorDicomClientVerificationInstances(Dvtk.IheActors.Bases.ActorTypeEnum)">
            <summary>
            Trigger the DICOM Client Verification (E-ECHO-RQ).
            </summary>
            <param name="actorType">Destination Actor Type.</param>
            <returns>Boolean indicating success or failure.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Bases.BaseActor.AddResponseTriggerToActor(Dvtk.IheActors.Bases.ActorTypeEnum,Dvtk.IheActors.Bases.BaseTrigger)">
            <summary>
            Add a reponse trigger to the Actor.
            </summary>
            <param name="actorType">Destination Actor Type.</param>
            <param name="trigger">Trigger message.</param>
        </member>
        <member name="M:Dvtk.IheActors.Bases.BaseActor.GetHl7Server(Dvtk.IheActors.Bases.ActorName)">
            <summary>
            Get the HL7Server that corresponds with the Destination Actor Name.
            </summary>
            <param name="actorName">Destination Actor Name.</param>
            <returns>Hl7Server.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Bases.BaseActor.AddHl7Server(Dvtk.IheActors.Bases.Hl7ServerTypeEnum,Dvtk.IheActors.Bases.ActorTypeEnum,Dvtk.IheActors.Bases.CommonConfig,Dvtk.IheActors.Actors.BasePeerToPeerConfigCollection)">
            <summary>
            Add an HL7Server for the given Destination Actor Name and Configuration.
            </summary>
            <param name="hl7ServerType">Hl7 Server Type.</param>
            <param name="fromActorType">From Actor Type.</param>
            <param name="commonConfig">Common Configuration.</param>
            <param name="peerToPeerConfigCollection">Peer to Peer Configuration collection.</param>
        </member>
        <member name="M:Dvtk.IheActors.Bases.BaseActor.GetHl7Client(Dvtk.IheActors.Bases.ActorName)">
            <summary>
            Get the HL7Client that corresponds with the Destination Actor Name.
            </summary>
            <param name="actorName">Destination Actor Name.</param>
            <returns>Hl7Vlient.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Bases.BaseActor.AddHl7Client(Dvtk.IheActors.Bases.Hl7ClientTypeEnum,Dvtk.IheActors.Bases.ActorTypeEnum,Dvtk.IheActors.Bases.CommonConfig,Dvtk.IheActors.Actors.BasePeerToPeerConfigCollection)">
            <summary>
            Add an HL7Client for the given Destination Actor Name and Configuration.
            </summary>
            <param name="hl7ClientType">Hl7 Client Type.</param>
            <param name="toActorType">To Actor Type.</param>
            <param name="commonConfig">Common Configuration.</param>
            <param name="peerToPeerConfigCollection">Peer to Peer Configuration collection.</param>
        </member>
        <member name="M:Dvtk.IheActors.Bases.BaseActor.GetFirstActorIdFromDicomServer(Dvtk.IheActors.Bases.ActorTypeEnum)">
            <summary>
            Get the Actor Id of the first instance of the given peer actor type DicomServer
            in this actor.
            </summary>
            <param name="actorType">Peer actor type.</param>
            <returns>String - Actor Id.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Bases.BaseActor.GetDicomServer(Dvtk.IheActors.Bases.ActorName)">
            <summary>
            Get the DicomServer that corresponds with the Destination Actor Name.
            </summary>
            <param name="actorName">Destination Actor Name.</param>
            <returns>DicomServer.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Bases.BaseActor.AddDicomServer(Dvtk.IheActors.Bases.DicomServerTypeEnum,Dvtk.IheActors.Bases.ActorTypeEnum,Dvtk.IheActors.Bases.CommonConfig,Dvtk.IheActors.Actors.BasePeerToPeerConfigCollection)">
            <summary>
            Add the given DicomServer using the Destination Actor Configuration.
            </summary>
            <param name="dicomServerType">Dicom Server Type.</param>
            <param name="fromActorType">From Actor Type.</param>
            <param name="commonConfig">Common Configuration.</param>
            <param name="peerToPeerConfigCollection">Peer to Peer Configuration collection.</param>
        </member>
        <member name="M:Dvtk.IheActors.Bases.BaseActor.UpdateDicomServer(Dvtk.IheActors.Bases.ActorName,Dvtk.IheActors.Bases.ActorTypeEnum,Dvtk.IheActors.Bases.CommonConfig,Dvtk.IheActors.Actors.BasePeerToPeerConfigCollection)">
            <summary>
            Update the given DicomServer using the Destination Actor Configuration.
            </summary>
            <param name="serverActorName">DicomServer Actor Name.</param>
            <param name="clientActorType">DicomClient Actor Type.</param>
            <param name="commonConfig">Common Configuration.</param>
            <param name="peerToPeerConfigCollection">Peer to Peer Configuration collection.</param>
        </member>
        <member name="M:Dvtk.IheActors.Bases.BaseActor.GetDicomClient(Dvtk.IheActors.Bases.ActorName)">
            <summary>
            Get the DicomClient that corresponds with the Destination Actor Name.
            </summary>
            <param name="actorName">Destination Actor Name.</param>
            <returns>DicomClient.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Bases.BaseActor.AddDicomClient(Dvtk.IheActors.Bases.DicomClientTypeEnum,Dvtk.IheActors.Bases.ActorTypeEnum,Dvtk.IheActors.Bases.CommonConfig,Dvtk.IheActors.Actors.BasePeerToPeerConfigCollection)">
            <summary>
            Add the given DicomClient using the Destination Actor Configuration.
            </summary>
            <param name="dicomClientType">Dicom Client Type.</param>
            <param name="toActorType">To Actor Type.</param>
            <param name="commonConfig">Common Configuration.</param>
            <param name="peerToPeerConfigCollection">Peer to Peer Configuration collection.</param>
        </member>
        <member name="M:Dvtk.IheActors.Bases.BaseActor.TransactionIsAvailable(System.Object,Dvtk.IheActors.Bases.TransactionAvailableEventArgs)">
            <summary>
            Transaction is available.
            </summary>
            <param name="server">Event source.</param>
            <param name="transactionAvailableEvent">Transaction Available Event Details.</param>
        </member>
        <member name="T:Dvtk.IheActors.Bases.BaseActor.TransactionAvailableHandler">
            <summary>
            Delegate the Transaction Available Event to a Handler.
            </summary>
        </member>
        <member name="E:Dvtk.IheActors.Bases.BaseActor.OnTransactionAvailable">
            <summary>
            Transaction Available Event
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Bases.BaseActor.PublishTransactionAvailableEvent(Dvtk.IheActors.Bases.TransactionAvailableEventArgs)">
            <summary>
            Publish the Transaction Available Event.
            </summary>
            <param name="transactionAvailableEvent">Available transaction.</param>
        </member>
        <member name="M:Dvtk.IheActors.Bases.BaseActor.HandleTransactionFrom(Dvtk.IheActors.Bases.ActorName,Dvtk.IheActors.Hl7.Hl7Transaction)">
            <summary>
            Handle an HL7 Transation from the given Actor Name.
            </summary>
            <param name="actorName">Source Actor Name.</param>
            <param name="hl7Transaction">HL7 Transaction.</param>
        </member>
        <member name="M:Dvtk.IheActors.Bases.BaseActor.HandleTransactionFrom(Dvtk.IheActors.Bases.ActorName,Dvtk.IheActors.Dicom.DicomTransaction)">
            <summary>
            Handle a Dicom Transaction from the given Actor Name.
            </summary>
            <param name="actorName">Source Actor Name.</param>
            <param name="dicomTransaction">Dicom Transaction.</param>
        </member>
        <member name="M:Dvtk.IheActors.Bases.BaseActor.MessageIsAvailable(System.Object,Dvtk.IheActors.Bases.MessageAvailableEventArgs)">
            <summary>
            Message is available.
            </summary>
            <param name="server">Event source.</param>
            <param name="messageAvailableEvent">Message Available Event Details.</param>
        </member>
        <member name="T:Dvtk.IheActors.Bases.BaseActor.MessageAvailableHandler">
            <summary>
            Delegate the Message Available Event to a Handler.
            Available messages are either messages about to be sent from this server to the destination server or
            messages received by this server from the source server.
            </summary>
        </member>
        <member name="E:Dvtk.IheActors.Bases.BaseActor.OnMessageAvailable">
            <summary>
            Message Available Event
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Bases.BaseActor.PublishMessageAvailableEvent(Dvtk.IheActors.Bases.MessageAvailableEventArgs)">
            <summary>
            Publish the Message Available Event.
            </summary>
            <param name="messageAvailableEvent">Available message.</param>
        </member>
        <member name="T:Dvtk.IheActors.Bases.BaseClient">
            <summary>
            Summary description for BaseClient.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Bases.BaseClient.#ctor(Dvtk.IheActors.Bases.BaseActor,Dvtk.IheActors.Bases.ActorName)">
            <summary>
            Class constructor.
            </summary>
            <param name="parentActor">Parent Actor Name (containing Actor).</param>
            <param name="actorName">Destination Actor Name.</param>
        </member>
        <member name="P:Dvtk.IheActors.Bases.BaseClient.ActorName">
            <summary>
            Property - ActorName - Destination Actor Name.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Bases.BaseClient.ParentActor">
            <summary>
            Property - ParentActor - containing Actor Name.
            </summary>
        </member>
        <member name="T:Dvtk.IheActors.Bases.BaseClient.TransactionAvailableHandler">
            <summary>
            Delegate the Transaction Available Event to a Handler.
            </summary>
        </member>
        <member name="E:Dvtk.IheActors.Bases.BaseClient.OnTransactionAvailable">
            <summary>
            Transaction Available Event
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Bases.BaseClient.PublishTransactionAvailableEvent(Dvtk.IheActors.Bases.ActorName,Dvtk.IheActors.Actors.ActorsTransaction)">
            <summary>
            Publish the Transaction Available Event.
            </summary>
            <param name="actorName">Name of Actor from which the Transaction was received.</param>
            <param name="transaction">Transaction.</param>
        </member>
        <member name="T:Dvtk.IheActors.Bases.BaseClient.MessageAvailableHandler">
            <summary>
            Delegate the Message Available Event to a Handler.
            Available messages are either messages about to be sent from this server to the destination server or
            messages received by this server from the source server.
            </summary>
        </member>
        <member name="E:Dvtk.IheActors.Bases.BaseClient.OnMessageAvailable">
            <summary>
            Message Available Event
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Bases.BaseClient.PublishMessageAvailableEvent(Dvtk.IheActors.Bases.ActorName,Dvtk.IheActors.Bases.ActorName,DvtkHighLevelInterface.Common.Messages.Message,Dvtk.IheActors.Bases.MessageDirectionEnum)">
            <summary>
            Publish the Message Available Event.
            </summary>
            <param name="localActorName">Local Actor Name.</param>
            <param name="remoteActorName">Remote Actor Name.</param>
            <param name="message">Message.</param>
            <param name="direction">Message direction.></param>
        </member>
        <member name="T:Dvtk.IheActors.Bases.BaseMessage">
            <summary>
            Summary description for BaseMessage Class.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Bases.BaseMessage.#ctor(DvtkHighLevelInterface.Common.Messages.Message,Dvtk.IheActors.Bases.MessageDirectionEnum)">
            <summary>
            Class constructor.
            </summary>
            <param name="message">Base message.</param>
            <param name="direction">Message direction.</param>
        </member>
        <member name="P:Dvtk.IheActors.Bases.BaseMessage.Message">
            <summary>
            Property Message - base message.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Bases.BaseMessage.Direction">
            <summary>
            Property - Direction.
            </summary>
        </member>
        <member name="T:Dvtk.IheActors.Bases.BasePeerToPeerConfig">
            <summary>
            Summary description for BasePeerToPeerConfig.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Bases.BasePeerToPeerConfig.#ctor">
            <summary>
            Class constructor.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Bases.BasePeerToPeerConfig.PortNumber">
            <summary>
            Property - PortNumber.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Bases.BasePeerToPeerConfig.SecureConnection">
            <summary>
            Property - SecureConnection.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Bases.BasePeerToPeerConfig.AutoValidate">
            <summary>
            Property - AutoValidate.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Bases.BasePeerToPeerConfig.ToActorName">
            <summary>
            Property - ToActorName.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Bases.BasePeerToPeerConfig.ToActorAeTitle">
            <summary>
            Property - ToActorAeTitle.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Bases.BasePeerToPeerConfig.ToActorIpAddress">
            <summary>
            Property - ToActorIpAddress.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Bases.BasePeerToPeerConfig.FromActorName">
            <summary>
            Property - FromActorName.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Bases.BasePeerToPeerConfig.FromActorAeTitle">
            <summary>
            Property - FromActorAeTitle.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Bases.BasePeerToPeerConfig.ActorOption1">
            <summary>
            Property - ActorOption1.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Bases.BasePeerToPeerConfig.ActorOption2">
            <summary>
            Property - ActorOption2.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Bases.BasePeerToPeerConfig.ActorOption3">
            <summary>
            Property - ActorOption3.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Bases.BasePeerToPeerConfig.WriteXmlConfig(System.Xml.XmlTextWriter)">
            <summary>
            Write the Configuration in XML format to the XML Text Writer.
            </summary>
            <param name="writer">XML Text Writer</param>
        </member>
        <member name="T:Dvtk.IheActors.Bases.BaseServer">
            <summary>
            Summary description for BaseServer.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Bases.BaseServer.#ctor(Dvtk.IheActors.Bases.BaseActor,Dvtk.IheActors.Bases.ActorName)">
            <summary>
            Class constructor.
            </summary>
            <param name="parentActor">Parent Actor Name (containing Actor).</param>
            <param name="actorName">Destination Actor Name.</param>
        </member>
        <member name="P:Dvtk.IheActors.Bases.BaseServer.ActorName">
            <summary>
            Property - ActorName - Destination Actor Name.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Bases.BaseServer.ParentActor">
            <summary>
            Property - ParentActor - containing Actor Name.
            </summary>
        </member>
        <member name="T:Dvtk.IheActors.Bases.BaseServer.TransactionAvailableHandler">
            <summary>
            Delegate the Transaction Available Event to a Handler.
            </summary>
        </member>
        <member name="E:Dvtk.IheActors.Bases.BaseServer.OnTransactionAvailable">
            <summary>
            Transaction Available Event
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Bases.BaseServer.PublishTransactionAvailableEvent(Dvtk.IheActors.Bases.ActorName,Dvtk.IheActors.Actors.ActorsTransaction)">
            <summary>
            Publish the Transaction Available Event.
            </summary>
            <param name="actorName">Name of Actor from which the Transaction was received.</param>
            <param name="transaction">Transaction.</param>
        </member>
        <member name="T:Dvtk.IheActors.Bases.BaseServer.MessageAvailableHandler">
            <summary>
            Delegate the Message Available Event to a Handler.
            Available messages are either messages about to be sent from this server to the destination server or
            messages received by this server from the source server.
            </summary>
        </member>
        <member name="E:Dvtk.IheActors.Bases.BaseServer.OnMessageAvailable">
            <summary>
            Message Available Event
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Bases.BaseServer.PublishMessageAvailableEvent(Dvtk.IheActors.Bases.ActorName,Dvtk.IheActors.Bases.ActorName,DvtkHighLevelInterface.Common.Messages.Message,Dvtk.IheActors.Bases.MessageDirectionEnum)">
            <summary>
            Publish the Message Available Event.
            </summary>
            <param name="localActorName">Local Actor Name.</param>
            <param name="remoteActorName">Remote Actor Name.</param>
            <param name="message">Message.</param>
            <param name="direction">Message direction.></param>
        </member>
        <member name="T:Dvtk.IheActors.Bases.BaseTransaction">
            <summary>
            Summary description for BaseTransaction.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Bases.BaseTransaction.#ctor(Dvtk.IheActors.Bases.TransactionNameEnum,Dvtk.IheActors.Bases.TransactionDirectionEnum)">
            <summary>
            Class constructor.
            </summary>
            <param name="transactionName">IHE Transaction Name.</param>
            <param name="direction">Transaction direction - sent/received.</param>
        </member>
        <member name="P:Dvtk.IheActors.Bases.BaseTransaction.Direction">
            <summary>
            Property - Direction.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Bases.BaseTransaction.TransactionName">
            <summary>
            Property - TransactionName.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Bases.BaseTransaction.Processed">
            <summary>
            Property - Processed.
            </summary>
        </member>
        <member name="T:Dvtk.IheActors.Bases.BaseTrigger">
            <summary>
            Summary description for BaseTrigger.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Bases.BaseTrigger.#ctor(Dvtk.IheActors.Bases.TransactionNameEnum)">
            <summary>
            Class constructor.
            </summary>
            <param name="triggerName">Name of Trigger.</param>
        </member>
        <member name="P:Dvtk.IheActors.Bases.BaseTrigger.TriggerName">
            <summary>
            Property - TriggerName
            </summary>
        </member>
        <member name="T:Dvtk.IheActors.Bases.DicomClientTypeEnum">
            <summary>
            Dicom Client Type Enum.
            </summary>
        </member>
        <member name="T:Dvtk.IheActors.Bases.DicomServerTypeEnum">
            <summary>
            Dicom Server Type Enum.
            </summary>
        </member>
        <member name="T:Dvtk.IheActors.Bases.Hl7ClientTypeEnum">
            <summary>
            Hl7 Client Type Enum.
            </summary>
        </member>
        <member name="T:Dvtk.IheActors.Bases.Hl7ServerTypeEnum">
            <summary>
            Hl7 Server Type Enum.
            </summary>
        </member>
        <member name="T:Dvtk.IheActors.Bases.ClientServerFactory">
            <summary>
            Summary description for ClientServerFactory.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Bases.ClientServerFactory.CreateDicomClient(Dvtk.IheActors.Bases.DicomClientTypeEnum,Dvtk.IheActors.Bases.BaseActor,Dvtk.IheActors.Bases.ActorName)">
            <summary>
            Create a Dicom Client of the given type.
            </summary>
            <param name="dicomClientType">Dicom Client Type - enum.</param>
            <param name="fromActor">From Actor instance.</param>
            <param name="toActorName">To Actor Name.</param>
            <returns>Dicom Client.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Bases.ClientServerFactory.CreateDicomServer(Dvtk.IheActors.Bases.DicomServerTypeEnum,Dvtk.IheActors.Bases.BaseActor,Dvtk.IheActors.Bases.ActorName)">
            <summary>
            Create a Dicom Server of the given type.
            </summary>
            <param name="dicomServerType">Dicom Server Type - enum.</param>
            <param name="toActor">To Actor instance.</param>
            <param name="fromActorName">From Actor Name.</param>
            <returns>Dicom Server.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Bases.ClientServerFactory.CreateHl7Client(Dvtk.IheActors.Bases.Hl7ClientTypeEnum,Dvtk.IheActors.Bases.BaseActor,Dvtk.IheActors.Bases.ActorName,Dvtk.IheActors.Bases.CommonConfig,Dvtk.IheActors.Hl7.Hl7PeerToPeerConfig)">
            <summary>
            Create an Hl7 Client of the given type.
            </summary>
            <param name="hl7ClientType">Hl7 Client Type - enum.</param>
            <param name="fromActor">From Actor instance.</param>
            <param name="toActorName">To Actor Name.</param>
            <param name="commonConfig">Common Configuration.</param>
            <param name="config">HL7 Configuration.</param>
            <returns>Hl7 Client.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Bases.ClientServerFactory.CreateHl7Server(Dvtk.IheActors.Bases.Hl7ServerTypeEnum,Dvtk.IheActors.Bases.BaseActor,Dvtk.IheActors.Bases.ActorName,Dvtk.IheActors.Bases.CommonConfig,Dvtk.IheActors.Hl7.Hl7PeerToPeerConfig)">
            <summary>
            Create a Hl7 Server of the given type.
            </summary>
            <param name="hl7ServerType">Hl7 Server Type - enum.</param>
            <param name="toActor">To Actor instance.</param>
            <param name="fromActorName">From Actor Name.</param>
            <param name="commonConfig">Common Configuration.</param>
            <param name="config">HL7 Configuration.</param>
            <returns>Hl7 Server.</returns>
        </member>
        <member name="T:Dvtk.IheActors.Bases.CommonConfig">
            <summary>
            Summary description for CommonConfig.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Bases.CommonConfig.#ctor">
            <summary>
            Class constructor.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Bases.CommonConfig.RootedBaseDirectory">
            <summary>
            Property - Rooted Base Directory.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Bases.CommonConfig.ResultsDirectory">
            <summary>
            Property - Results Directory.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Bases.CommonConfig.ResultsSubdirectory">
            <summary>
            Property - Results Sub-directory. 
            Maybe defined to produce a subdirectory for the results at runtime. This must be set by the application - it does not
            come from any kind of config file.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Bases.CommonConfig.OverwriteResults">
            <summary>
            Property - Overwrite results files.
            True - the results will be written directly into the results subdirectory specified by ResultsSubdirectory. Any existing
            results files may be overwritten if a test case is re-run.
            False - a new subdirectory with a date / time stamp as the directory name will be created in the results subdirectory s
            pecified by ResultsSubdirectory and the results files written in this directory. 
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Bases.CommonConfig.CredentialsFilename">
            <summary>
            Property - Credentials Filename.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Bases.CommonConfig.CertificateFilename">
            <summary>
            Property - Certificate Filename.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Bases.CommonConfig.NistWebServiceUrl">
            <summary>
            Property - NIST Web Service URL.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Bases.CommonConfig.Hl7ProfileDirectory">
            <summary>
            Property - Hl7 Profile Directory.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Bases.CommonConfig.Hl7ProfileStoreName">
            <summary>
            Property - Hl7 Profile Store Name.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Bases.CommonConfig.Hl7ValidationContextFilename">
            <summary>
            Property - Hl7 Validation Context Filename.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Bases.CommonConfig.Interactive">
            <summary>
            Property - Interactive.
            This property can be accessed from within the test scripts to determine if the script 
            should be run in an interactive mode or not. True indicates that the activity log will
            be displayed together with any user input when the script is being run.
            </summary>
        </member>
        <member name="T:Dvtk.IheActors.Bases.CommunicationNode">
            <summary>
            Summary description for CommunicationNode.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Bases.CommunicationNode.#ctor">
            <summary>
            Class constructor.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Bases.CommunicationNode.#ctor(System.String,System.UInt16,System.String)">
            <summary>
            Class constructor.
            </summary>
            <param name="ipAddress">IP Address.</param>
            <param name="portNumber">Port Number.</param>
            <param name="aeTitle">AE Title.</param>
        </member>
        <member name="P:Dvtk.IheActors.Bases.CommunicationNode.IpAddress">
            <summary>
            Property - IpAddress.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Bases.CommunicationNode.PortNumber">
            <summary>
            Property - PortNumber.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Bases.CommunicationNode.AeTitle">
            <summary>
            Property - AeTitle.
            </summary>
        </member>
        <member name="T:Dvtk.IheActors.Bases.IBaseDevice">
            <summary>
            Summary description for IBaseDevice.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Bases.IBaseDevice.ConfigDevice(System.Collections.ArrayList)">
            <summary>
            Configure the Device.
            </summary>
            <param name="configArray">Configuration array.</param>
        </member>
        <member name="M:Dvtk.IheActors.Bases.IBaseDevice.StartDevice">
            <summary>
            Start the Device.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Bases.IBaseDevice.StopDevice">
            <summary>
            Stop the Device.
            </summary>
        </member>
        <member name="T:Dvtk.IheActors.Bases.IClient">
            <summary>
            Summary description for IClient.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Bases.IClient.StartClient">
            <summary>
            Start the Client.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Bases.IClient.TriggerClient(Dvtk.IheActors.Bases.ActorName,Dvtk.IheActors.Bases.BaseTrigger,System.Boolean)">
            <summary>
            Trigger the Client.
            </summary>
            <param name="actorName">Destination Actor Name.</param>
            <param name="trigger">Trigger message.</param>
            <param name="awaitCompletion">Boolean indicating whether this a synchronous call or not.</param>
            <returns>Boolean indicating success or failure.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Bases.IClient.StopClient">
            <summary>
            Stop the Client.
            </summary>
        </member>
        <member name="T:Dvtk.IheActors.Bases.IServer">
            <summary>
            Summary description for IServer.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Bases.IServer.StartServer">
            <summary>
            Start the Server.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Bases.IServer.StopServer">
            <summary>
            Stop the Server.
            </summary>
        </member>
        <member name="T:Dvtk.IheActors.Bases.MapWorklistItemToStorageDirectory">
            <summary>
            Summary description for MapWorklistItemToStorageDirectory.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Bases.MapWorklistItemToStorageDirectory.#ctor">
            <summary>
            Class constructor.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Bases.MapWorklistItemToStorageDirectory.MapTag">
            <summary>
            Property - MapTag.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Bases.MapWorklistItemToStorageDirectory.ClearMappings">
            <summary>
            Clear the Worklist Item to Storage Directory Mappings 
            - the MapTag remains set (and can be changed by the MapTag property).
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Bases.MapWorklistItemToStorageDirectory.AddMapping(System.String,System.String)">
            <summary>
            Add a new Worklist Item to Storage Directory Mapping. 
            </summary>
            <param name="description">Worklist Item Description.</param>
            <param name="storageDirectory">Absolute Storage Directory name.</param>
        </member>
        <member name="M:Dvtk.IheActors.Bases.MapWorklistItemToStorageDirectory.RemoveMapping(System.String)">
            <summary>
            Remove a Worklist Item to Storage Directory Mapping.
            </summary>
            <param name="description">Worklist Item Description.</param>
        </member>
        <member name="M:Dvtk.IheActors.Bases.MapWorklistItemToStorageDirectory.IsExistingMapping(System.String)">
            <summary>
            Check if the given Worklist Item Description already exists as a the mapping.
            </summary>
            <param name="description">Worklist Item Description.</param>
            <returns>bool - true if mapping already exists - false otherwise.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Bases.MapWorklistItemToStorageDirectory.GetStorageDirectory(System.String)">
            <summary>
            Return the Storage Directory matching the given Worklist Item Description.
            </summary>
            <param name="description">Worklist Item Description.</param>
            <returns>Returns the matching Storage Directory - empty string if no match found.</returns>
        </member>
        <member name="T:Dvtk.IheActors.Bases.MessageAvailableEventArgs">
            <summary>
            Summary description for MessageAvailableEventArgs.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Bases.MessageAvailableEventArgs.#ctor(Dvtk.IheActors.Bases.ActorName,Dvtk.IheActors.Bases.ActorName,Dvtk.IheActors.Bases.BaseMessage)">
            <summary>
            Class constructor.
            </summary>
            <param name="localActorName">Local Actor Name.</param>
            <param name="remoteActorName">Remote Actor Name.</param>
            <param name="message">Message.</param>
        </member>
        <member name="P:Dvtk.IheActors.Bases.MessageAvailableEventArgs.LocalActorName">
            <summary>
            Property - LocalActorName.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Bases.MessageAvailableEventArgs.RemoteActorName">
            <summary>
            Property - RemoteActorName.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Bases.MessageAvailableEventArgs.Message">
            <summary>
            Property - Message.
            </summary>
        </member>
        <member name="T:Dvtk.IheActors.Bases.RootedBaseDirectory">
            <summary>
            Summary description for RootedBaseDirectory.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Bases.RootedBaseDirectory.GetFullPathname(System.String,System.String)">
            <summary>
            Get the full pathname. The given pathname my already be full in which case it is just returned.
            Otherwise the full pathname is generated by prefixing the pathname with the full (rooted) base
            directory.
            </summary>
            <param name="rootedBaseDirectory">Full (rooted) base directory.</param>
            <param name="pathname">Pathname - maybe rooted or relative.</param>
            <returns>Full (rooted) pathname.</returns>
        </member>
        <member name="T:Dvtk.IheActors.Bases.Semaphore">
            <summary>
            Summary description for Semaphore.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Bases.Semaphore.#ctor(System.UInt32)">
            <summary>
            Class constructor.
            </summary>
            <param name="pollInterval">Millisecond interval to sleep between polls.</param>
        </member>
        <member name="M:Dvtk.IheActors.Bases.Semaphore.Wait(System.UInt32)">
            <summary>
            Wait for the semaphore to be signalled.
            </summary>
            <param name="timeout">Millisecond time-out - return if time-out expires</param>
            <returns>bool - returns true if semaphore signalled within time-out or false otherwise.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Bases.Semaphore.Signal">
            <summary>
            Signal the semaphore.
            </summary>
        </member>
        <member name="T:Dvtk.IheActors.Bases.ToActorNode">
            <summary>
            Summary description for ToActorNode.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Bases.ToActorNode.#ctor">
            <summary>
            Class constructor.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Bases.ToActorNode.#ctor(Dvtk.IheActors.Bases.ActorName,System.String,System.String)">
            <summary>
            Class constructor.
            </summary>
            <param name="actorName">Actor Name.</param>
            <param name="aeTitle">Actor AE Title.</param>
            <param name="ipAddress">Ip Address.</param>
        </member>
        <member name="P:Dvtk.IheActors.Bases.ToActorNode.IpAddress">
            <summary>
            Property - IpAddress.
            </summary>
        </member>
        <member name="T:Dvtk.IheActors.Bases.TransactionAvailableEventArgs">
            <summary>
            Summary description for TransactionAvailableEventArgs.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Bases.TransactionAvailableEventArgs.#ctor(Dvtk.IheActors.Bases.ActorName,Dvtk.IheActors.Actors.ActorsTransaction)">
            <summary>
            Class constructor.
            </summary>
            <param name="actorName">Event source Actor Name.</param>
            <param name="transaction">Transaction.</param>
        </member>
        <member name="P:Dvtk.IheActors.Bases.TransactionAvailableEventArgs.ActorName">
            <summary>
            Property - ActorName.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Bases.TransactionAvailableEventArgs.Transaction">
            <summary>
            Property - Transaction.
            </summary>
        </member>
        <member name="T:Dvtk.IheActors.Bases.TransactionNumber">
            <summary>
            Summary description for TransactionNumber.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Bases.TransactionNumber.GetNextTransactionNumber">
            <summary>
            Generate the next transaction number - allows the transacations to be ordered on a time basis.
            </summary>
            <returns>int TransactionNumber.</returns>
        </member>
        <member name="T:Dvtk.IheActors.Bases.TriggerQueue">
            <summary>
            Summary description for TriggerQueue.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Bases.TriggerQueue.#ctor">
            <summary>
            Class constructor.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Bases.TriggerQueue.Enqueue(Dvtk.IheActors.Bases.BaseTrigger)">
            <summary>
            Enqueue a Trigger message.
            </summary>
            <param name="trigger">Trigger message.</param>
        </member>
        <member name="M:Dvtk.IheActors.Bases.TriggerQueue.Dequeue">
            <summary>
            Dequeue a Trigger message.
            </summary>
            <returns>Trigger message.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Bases.TriggerQueue.IsEmpty">
            <summary>
            Test if queue is empty.
            </summary>
            <returns>bool - true / false - queue empty.</returns>
        </member>
        <member name="T:Dvtk.IheActors.IheFramework.FileSemaphore">
            <summary>
            Summary of class FileSemaphore
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.IheFramework.FileSemaphore.SignalTestCompletion">
            <summary>
            Signal that the test has completed.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.IheFramework.FileSemaphore.PendTestCompletion">
            <summary>
            Wait until told that the test has completed.
            </summary>
        </member>
        <member name="T:Dvtk.IheActors.IheFramework.StoreDataDirectory">
            <summary>
            StoreDataDirectory class.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.IheFramework.StoreDataDirectory.HtmlOutputFilename">
            <summary>
            Property - HtmlOutputFilename - to set output filename.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.IheFramework.StoreDataDirectory.UnVrDefinitionLookUpWhenReading">
            <summary>
            Property - UnVrDefinitionLookUpWhenReading - to set the attribute
            VR look-up via the definition file for any received VR UN values.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.IheFramework.StoreDataDirectory.CompareVR">
            <summary>
            Property - CompareVR - set to include VR comparison between
            attributes.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.IheFramework.StoreDataDirectory.DisplayGroupLength">
            <summary>
            Property - DisplayGroupLength - set to include Group Lengths
            in comparison.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.IheFramework.StoreDataDirectory.IncludeDetailedResults">
            <summary>
            Property - IncludeDetailedResults - set to include a full
            comparison of the attributes of each file compared.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.IheFramework.StoreDataDirectory.Compare(System.String,System.String,DvtkData.Dimse.Tag)">
            <summary>
            Compare the DICOM files in the two directories based on there being corresponding
            files in each directory with the same attribute value for the matching Tag.
            </summary>
            <param name="directory1">Full directory name of first directory.</param>
            <param name="directory2">Full directory name of second directory.</param>
            <param name="matchingTag">DICOM Tag value to match in a file in each directory.</param>
            <returns>Total number of differences between compared files.</returns>
        </member>
        <member name="T:Dvtk.IheActors.IheFramework.IheFramework">
            <summary>
            Summary description for IheFramework.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.IheFramework.IheFramework.#ctor(System.String)">
            <summary>
            Class Constructor.
            </summary>
            <param name="profileName">Integration Profile Name.</param>
        </member>
        <member name="P:Dvtk.IheActors.IheFramework.IheFramework.Config">
            <summary>
            Property - Config.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.IheFramework.IheFramework.TransactionLog">
            <summary>
            Property - TransactionLog
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.IheFramework.IheFramework.NrErrors">
            <summary>
            Property - Number of Errors.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.IheFramework.IheFramework.NrWarnings">
            <summary>
            Property - Number of Warnings.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.IheFramework.IheFramework.GetActor(Dvtk.IheActors.Bases.ActorName)">
            <summary>
            Get the Actor with the given actor name.
            </summary>
            <param name="actorName">Actor Name to seach for.</param>
            <returns>Actor with given name - maybe null.</returns>
        </member>
        <member name="M:Dvtk.IheActors.IheFramework.IheFramework.AddComparisonTagValueFilter(DvtkData.Dimse.DicomTagValue)">
            <summary>
            Add a Tag Value filter for the comparator.
            Only compare messages which contain the same values for this filter.
            </summary>
            <param name="tagValueFilter">Tag Value Filter.</param>
        </member>
        <member name="M:Dvtk.IheActors.IheFramework.IheFramework.AddUserDefinedDefaultTagValue(DvtkData.Dimse.BaseDicomTagValue)">
            <summary>
            Add user defined default Tag Values. Used to help define the message tag/values 
            used during the tests.
            </summary>
            <param name="defaultTagValue">Default Tag Value pair.</param>
        </member>
        <member name="M:Dvtk.IheActors.IheFramework.IheFramework.UpdateInstantiatedDefaultTagValue(DvtkData.Dimse.DicomTagValue)">
            <summary>
            Update the instantiated default tag values with the given tag value.
            </summary>
            <param name="tagValueUpdate">Tag/Value pair to update.</param>
        </member>
        <member name="M:Dvtk.IheActors.IheFramework.IheFramework.UpdateInstantiatedDefaultTagValues(DvtkData.Dimse.AffectedEntityEnum)">
            <summary>
            Update the default DICOM Tag Values grouped by the given affected entity.
            Any 'auto' default value in the affected entity will get it's next value.
            </summary>
            <param name="affectedEntity">Affected Entity enum - to update.</param>
        </member>
        <member name="M:Dvtk.IheActors.IheFramework.IheFramework.OpenResults">
            <summary>
            Open the Results reporting.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.IheFramework.IheFramework.CloseResults">
            <summary>
            Close the Results reporting.
            </summary>
            <returns>System.String - results filename.</returns>
        </member>
        <member name="M:Dvtk.IheActors.IheFramework.IheFramework.ApplyConfig">
            <summary>
            Apply the ActorConfigs by instantiating the corresponding actors.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.IheFramework.IheFramework.StartTest">
            <summary>
            Start the integration profile test by starting up all the
            configured actors.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.IheFramework.IheFramework.StopTest">
            <summary>
            Stop the integration profile test by stopping all the configured
            actors.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.IheFramework.IheFramework.SignalTestCompletion">
            <summary>
            Signal that the test has completed.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.IheFramework.IheFramework.PendTestCompletion">
            <summary>
            Wait until told that the test has completed.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.IheFramework.IheFramework.SetUiStatusText(System.String)">
            <summary>
            Set the UI Status text to the given string.
            </summary>
            <param name="text">Text to write to UI status field.</param>
        </member>
        <member name="M:Dvtk.IheActors.IheFramework.IheFramework.AssertMessageCountBetweenActors(Dvtk.IheActors.Bases.ActorName,Dvtk.IheActors.Bases.ActorName,System.String,System.Int32)">
            <summary>
            Assert that the correct number of the given DICOM message has been seen between the two given actors.
            </summary>
            <param name="actorName1">First actor name in transaction.</param>
            <param name="actorName2">Second actor name in transaction.</param>
            <param name="dimseCommandName">DICOM command name.</param>
            <param name="expectedCount">Number of times the given DICOM command was expected to occur between these actors.</param>
            <returns>bool - indication if the assertion was true or false.</returns>
        </member>
        <member name="M:Dvtk.IheActors.IheFramework.IheFramework.AssertDicomAttributeValueBetweenActors(Dvtk.IheActors.Bases.ActorName,Dvtk.IheActors.Bases.ActorName,System.String,DvtkData.Dimse.Tag,System.Int32)">
            <summary>
            Assert that the given attribute value in the given DICOM message has the expected value between the two given actors.
            </summary>
            <param name="actorName1">First actor name in transaction.</param>
            <param name="actorName2">Second actor name in transaction.</param>
            <param name="dimseCommandName">DICOM command name.</param>
            <param name="tag">tag - Attribute tag whose first value is the actual value.</param>
            <param name="expectedValue">The expected attribute value - this will be compared with the actual attribute value.</param>
            <returns>bool - indication if the assertion was true or false.</returns>
        </member>
        <member name="M:Dvtk.IheActors.IheFramework.IheFramework.AssertDicomAttributeValueBetweenActors(Dvtk.IheActors.Bases.ActorName,Dvtk.IheActors.Bases.ActorName,System.String,DvtkData.Dimse.Tag,System.String)">
            <summary>
            Assert that the given attribute value in the given DICOM message has the expected value between the two given actors.
            </summary>
            <param name="actorName1">First actor name in transaction.</param>
            <param name="actorName2">Second actor name in transaction.</param>
            <param name="dimseCommandName">DICOM command name.</param>
            <param name="tag">tag - Attribute tag whose first value is the actual value.</param>
            <param name="expectedValue">The expected attribute value - this will be compared with the actual attribute value.</param>
            <returns>bool - indication if the assertion was true or false.</returns>
        </member>
        <member name="M:Dvtk.IheActors.IheFramework.IheFramework.AssertDicomAttributePresentBetweenActors(Dvtk.IheActors.Bases.ActorName,Dvtk.IheActors.Bases.ActorName,System.String,DvtkData.Dimse.Tag)">
            <summary>
            Assert that the given attribute is present in the given DICOM message between the two given actors.
            Check all occurences of the given dimseCommandName in the transaction log.
            </summary>
            <param name="actorName1">First actor name in transaction.</param>
            <param name="actorName2">Second actor name in transaction.</param>
            <param name="dimseCommandName">DICOM command name.</param>
            <param name="tag">tag - Attribute tag to check for.</param>
            <returns>bool - indication if the assertion was true or false.</returns>
        </member>
        <member name="M:Dvtk.IheActors.IheFramework.IheFramework.EvaluateTest">
            <summary>
            Evaluate the integration profile test.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.IheFramework.IheFramework.CleanUpCurrentWorkingDirectory">
            <summary>
            Clean up the current working directory at the end of a test.
            PIX files are left in the current working directory after a test. These should be cleaned
            up by the Media File Class destructor in the C++ code but it seems that this is not always
            called. So a more robust approach is to delete the files explicitly.
            </summary>
        </member>
        <member name="T:Dvtk.IheActors.IheFramework.IheFrameworkConfig">
            <summary>
            Summary description for IheFrameworkConfig.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.IheFramework.IheFrameworkConfig.#ctor(System.String)">
            <summary>
            Class Constructor.
            </summary>
            <param name="profileName">Integration Profile Name.</param>
        </member>
        <member name="P:Dvtk.IheActors.IheFramework.IheFrameworkConfig.ProfileName">
            <summary>
            Property - Profile Name.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.IheFramework.IheFrameworkConfig.CommonConfig">
            <summary>
            Property Common Configuration.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.IheFramework.IheFrameworkConfig.ActorConfig">
            <summary>
            Property Actor Configuration Collection.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.IheFramework.IheFrameworkConfig.PeerToPeerConfig">
            <summary>
            Property Peer To Peer Configuration Collection.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.IheFramework.IheFrameworkConfig.Load(System.String)">
            <summary>
            Load the Actor Configuration into the Integration Profile.
            </summary>
            <param name="configurationFilename">Configuration Filename</param>
        </member>
        <member name="M:Dvtk.IheActors.IheFramework.IheFrameworkConfig.Save(System.String)">
            <summary>
            Save the Actor Configuration into the given file.
            </summary>
            <param name="configurationFilename">Configuration Filename</param>
        </member>
        <member name="T:Dvtk.IheActors.IheFramework.IIheFramework">
            <summary>
            Summary description for IIheFramework.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.IheFramework.IIheFramework.GetActor(Dvtk.IheActors.Bases.ActorName)">
            <summary>
            Get the Actor with the given actor name.
            </summary>
            <param name="actorName">Actor Name to seach for.</param>
            <returns>Actor with given name - maybe null.</returns>
        </member>
        <member name="M:Dvtk.IheActors.IheFramework.IIheFramework.AddComparisonTagValueFilter(DvtkData.Dimse.DicomTagValue)">
            <summary>
            Add a Tag Value filter for the comparator.
            Only compare messages which contain the same values for this filter.
            </summary>
            <param name="tagValueFilter">Tag Value Filter.</param>
        </member>
        <member name="M:Dvtk.IheActors.IheFramework.IIheFramework.AddUserDefinedDefaultTagValue(DvtkData.Dimse.BaseDicomTagValue)">
            <summary>
            Add user defined default Tag Values. Used to help define the message tag/values 
            used during the tests.
            </summary>
            <param name="defaultTagValue">Default Tag Value pair.</param>
        </member>
        <member name="M:Dvtk.IheActors.IheFramework.IIheFramework.OpenResults">
            <summary>
            Open the Results reporting.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.IheFramework.IIheFramework.CloseResults">
            <summary>
            Close the Results reporting.
            </summary>
            <returns>System.String - results filename.</returns>
        </member>
        <member name="M:Dvtk.IheActors.IheFramework.IIheFramework.ApplyConfig">
            <summary>
            Apply the ActorConfigs by instantiating the corresponding actors.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.IheFramework.IIheFramework.StartTest">
            <summary>
            Start the integration profile test by starting up all the
            configured actors.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.IheFramework.IIheFramework.StopTest">
            <summary>
            Stop the integration profile test by stopping all the configured
            actors.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.IheFramework.IIheFramework.EvaluateTest">
            <summary>
            Evaluate the integration profile test.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.IheFramework.IIheFramework.CleanUpCurrentWorkingDirectory">
            <summary>
            Clean up the current working directory at the end of a test.
            PIX files are left in the current working directory after a test. These should be cleaned
            up by the Media File Class destructor in the C++ code but it seems that this is not always
            called. So a more robust approach is to delete the files explicitly.
            </summary>
        </member>
        <member name="T:Dvtk.IheActors.Dicom.DicomClient">
            <summary>
            Summary description for DicomClient.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Dicom.DicomClient.Scu">
            <summary>
            Property - Scu
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomClient.#ctor(Dvtk.IheActors.Bases.BaseActor,Dvtk.IheActors.Bases.ActorName,System.Boolean)">
            <summary>
            Class constructor.
            </summary>
            <param name="parentActor">Parent Actor Name - (containing actor).</param>
            <param name="actorName">Destination Actor Name.</param>
            <param name="storageCommitmentScu">Boolean indicating if this is a Storage Commitment SCU or not.</param>
        </member>
        <member name="P:Dvtk.IheActors.Dicom.DicomClient.ConfigOption1">
            <summary>
            Property ConfigOption1
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Dicom.DicomClient.ConfigOption2">
            <summary>
            Property ConfigOption2
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Dicom.DicomClient.ConfigOption3">
            <summary>
            Property ConfigOption3
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomClient.Signal">
            <summary>
            Signal the semaphore.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomClient.ApplyConfig(Dvtk.IheActors.Bases.CommonConfig,Dvtk.IheActors.Dicom.DicomPeerToPeerConfig)">
            <summary>
            Apply the Dicom Configuration to the Client,
            </summary>
            <param name="commonConfig">Common Configuration.</param>
            <param name="config">Dicom Configuration.</param>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomClient.StartClient">
            <summary>
            Start the Client.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomClient.TriggerClient(Dvtk.IheActors.Bases.ActorName,Dvtk.IheActors.Bases.BaseTrigger,System.Boolean)">
            <summary>
            Trigger the Client.
            </summary>
            <param name="actorName">Destination Actor Name.</param>
            <param name="trigger">Trigger message.</param>
            <param name="awaitCompletion">Boolean indicating whether this a synchronous call or not.</param>
            <returns>Boolean indicating success or failure.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomClient.TriggerClientVerification(Dvtk.IheActors.Bases.ActorName)">
            <summary>
            Trigger the Client to send a Verification (DICOM C-ECHO-RQ).
            </summary>
            <param name="actorName">Destination Actor Name.</param>
            <returns>Boolean indicating success or failure.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomClient.StopClient">
            <summary>
            Stop the Client.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomClient.ClearTransferSyntaxes">
            <summary>
            Clear the current transfer syntax list - reset contents to empty.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomClient.AddTransferSyntax(System.String)">
            <summary>
            Add a single transfer syntax to the list.
            </summary>
            <param name="transferSyntax">Transfer Syntax UID.</param>
        </member>
        <member name="T:Dvtk.IheActors.Dicom.DicomPeerToPeerConfig">
            <summary>
            Summary description for DicomPeerToPeerConfig.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomPeerToPeerConfig.#ctor">
            <summary>
            Class constructor.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Dicom.DicomPeerToPeerConfig.SessionId">
            <summary>
            Proprty - SessionId.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomPeerToPeerConfig.AddDefinitionFile(System.String)">
            <summary>
            Add Definition Files.
            </summary>
            <param name="definitionFile">Definition Filename.</param>
        </member>
        <member name="P:Dvtk.IheActors.Dicom.DicomPeerToPeerConfig.DefinitionFiles">
            <summary>
            Property - DefinitionFiles.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Dicom.DicomPeerToPeerConfig.SourceDataDirectory">
            <summary>
            Property - SourceDataDirectory.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Dicom.DicomPeerToPeerConfig.StoreDataDirectory">
            <summary>
            Property - StoreDataDirectory.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Dicom.DicomPeerToPeerConfig.StoreData">
            <summary>
            Property - StoreData.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomPeerToPeerConfig.WriteXmlConfig(System.Xml.XmlTextWriter)">
            <summary>
            Write Configuration data in XML format to the XML Text Writer.
            </summary>
            <param name="writer">XML Text Writer</param>
        </member>
        <member name="T:Dvtk.IheActors.Dicom.DicomMppsClient">
            <summary>
            Summary description for DicomMppsClient.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomMppsClient.#ctor(Dvtk.IheActors.Bases.BaseActor,Dvtk.IheActors.Bases.ActorName)">
            <summary>
            Class constructor.
            </summary>
            <param name="parentActor">Parent Actor Name - containing actor.</param>
            <param name="actorName">Destination Actor Name.</param>
        </member>
        <member name="T:Dvtk.IheActors.Dicom.DicomMppsServer">
            <summary>
            Summary description for DicomMppsServer.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomMppsServer.#ctor(Dvtk.IheActors.Bases.BaseActor,Dvtk.IheActors.Bases.ActorName)">
            <summary>
            Class constructor.
            </summary>
            <param name="parentActor">Parent Actor Name - containing actor.</param>
            <param name="actorName">Destination Actor Name.</param>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomMppsServer.ApplyConfig(Dvtk.IheActors.Bases.CommonConfig,Dvtk.IheActors.Dicom.DicomPeerToPeerConfig)">
            <summary>
            Apply the Dicom Configuration to the Client,
            </summary>
            <param name="commonConfig">Common Configuration.</param>
            <param name="config">Dicom Configuration.</param>
        </member>
        <member name="T:Dvtk.IheActors.Dicom.DicomPrintClient">
            <summary>
            Summary description for DicomPrintClient.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomPrintClient.#ctor(Dvtk.IheActors.Bases.BaseActor,Dvtk.IheActors.Bases.ActorName)">
            <summary>
            Class constructor.
            </summary>
            <param name="parentActor">Parent Actor Name - containing actor.</param>
            <param name="actorName">Destination Actor Name.</param>
        </member>
        <member name="T:Dvtk.IheActors.Dicom.DicomPrintServer">
            <summary>
            Summary description for DicomPrintServer.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomPrintServer.#ctor(Dvtk.IheActors.Bases.BaseActor,Dvtk.IheActors.Bases.ActorName)">
            <summary>
            Class constructor.
            </summary>
            <param name="parentActor">Parent Actor Name - containing actor.</param>
            <param name="actorName">Destination Actor Name.</param>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomPrintServer.ApplyConfig(Dvtk.IheActors.Bases.CommonConfig,Dvtk.IheActors.Dicom.DicomPeerToPeerConfig)">
            <summary>
            Apply the Dicom Configuration to the Client,
            </summary>
            <param name="commonConfig">Common Configuration.</param>
            <param name="config">Dicom Configuration.</param>
        </member>
        <member name="T:Dvtk.IheActors.Dicom.DicomQueryItem">
            <summary>
            Summary description for DicomQueryItem.
            </summary>
        </member>
        <member name="T:Dvtk.IheActors.Dicom.DicomQueryItemCollection">
            <summary>
            Summary description for DicomQueryItemCollection.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Dicom.DicomQueryItemCollection.Item(System.Int32)">
            <summary>
            Gets or sets an <see cref="T:Dvtk.IheActors.Dicom.DicomQueryItem"/> from the collection.
            </summary>
            <param name="index">The zero-based index of the collection member to get or set.</param>
            <value>The <see cref="T:Dvtk.IheActors.Dicom.DicomQueryItemCollection"/> at the specified index.</value>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomQueryItemCollection.Add(Dvtk.IheActors.Dicom.DicomQueryItem)">
            <summary>
            Adds an object to the end of the <see cref="T:Dvtk.IheActors.Dicom.DicomQueryItemCollection"/>.
            </summary>
            <param name="value">The <see cref="T:Dvtk.IheActors.Dicom.DicomQueryItem"/> to be added to the end of the <see cref="T:Dvtk.IheActors.Dicom.DicomQueryItemCollection"/>.</param>
            <returns>The <see cref="T:Dvtk.IheActors.Dicom.DicomQueryItemCollection"/> index at which the value has been added.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomQueryItemCollection.IndexOf(Dvtk.IheActors.Dicom.DicomQueryItem)">
            <summary>
            Searches for the specified <see cref="T:Dvtk.IheActors.Dicom.DicomQueryItem"/> and 
            returns the zero-based index of the first occurrence within the entire <see cref="T:Dvtk.IheActors.Dicom.DicomQueryItemCollection"/>.
            </summary>
            <param name="value">The <see cref="T:Dvtk.IheActors.Dicom.DicomQueryItem"/> to locate in the <see cref="T:Dvtk.IheActors.Dicom.DicomQueryItemCollection"/>.</param>
            <returns>
            The zero-based index of the first occurrence of value within the entire <see cref="T:Dvtk.IheActors.Dicom.DicomQueryItemCollection"/>, 
            if found; otherwise, -1.
            </returns>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomQueryItemCollection.Insert(System.Int32,Dvtk.IheActors.Dicom.DicomQueryItem)">
            <summary>
            Inserts an <see cref="T:Dvtk.IheActors.Dicom.DicomQueryItem"/> element into the <see cref="T:Dvtk.IheActors.Dicom.DicomQueryItemCollection"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="value">The <see cref="T:Dvtk.IheActors.Dicom.DicomQueryItem"/> to insert.</param>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomQueryItemCollection.Remove(Dvtk.IheActors.Dicom.DicomQueryItem)">
            <summary>
            Removes the first occurrence of a specific <see cref="T:Dvtk.IheActors.Dicom.DicomQueryItem"/> from the <see cref="T:Dvtk.IheActors.Dicom.DicomQueryItemCollection"/>.
            </summary>
            <param name="value">The <see cref="T:Dvtk.IheActors.Dicom.DicomQueryItem"/> to remove from the <see cref="T:Dvtk.IheActors.Dicom.DicomQueryItemCollection"/>.</param>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomQueryItemCollection.Contains(Dvtk.IheActors.Dicom.DicomQueryItem)">
            <summary>
            Determines whether the <see cref="T:Dvtk.IheActors.Dicom.DicomQueryItemCollection"/> contains a specific element.
            </summary>
            <param name="value">The <see cref="T:Dvtk.IheActors.Dicom.DicomQueryItem"/> to locate in the <see cref="T:Dvtk.IheActors.Dicom.DicomQueryItemCollection"/>.</param>
            <returns>
            <c>true</c> if the <see cref="T:Dvtk.IheActors.Dicom.DicomQueryItemCollection"/> contains the specified value; 
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomQueryItemCollection.OnInsert(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes before inserting a new element into the collection instance.
            </summary>
            <param name="index">The zero-based index at which to insert value.</param>
            <param name="value">The new value of the element at index.</param>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomQueryItemCollection.OnRemove(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes when removing an element from the collection instance.
            </summary>
            <param name="index">The zero-based index at which value can be found.</param>
            <param name="value">The value of the element to remove from index.</param>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomQueryItemCollection.OnSet(System.Int32,System.Object,System.Object)">
            <summary>
            Performs additional custom processes before setting a value in the collection instance.
            </summary>
            <param name="index">The zero-based index at which oldValue can be found.</param>
            <param name="oldValue">The value to replace with newValue.</param>
            <param name="newValue">The new value of the element at index.</param>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomQueryItemCollection.OnValidate(System.Object)">
            <summary>
            Performs additional custom processes when validating a value.
            </summary>
            <param name="value">The object to validate.</param>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomQueryItemCollection.CopyTo(Dvtk.IheActors.Dicom.DicomQueryItem[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to a strong-typed <c>DicomQueryItem[]</c>, 
            starting at a particular <c>DicomQueryItem[]</c> index.
            </summary>
            <param name="array">
            The one-dimensional <c>DicomQueryItem[]</c> that is the destination of the elements 
            copied from <see cref="T:System.Collections.ICollection"/>.
            The <c>DicomQueryItem[]</c> must have zero-based indexing. 
            </param>
            <param name="index">
            The zero-based index in array at which copying begins.
            </param>
            <remarks>
            Provides the strongly typed member for <see cref="T:System.Collections.ICollection"/>.
            </remarks>
        </member>
        <member name="T:Dvtk.IheActors.Dicom.DicomQueryRetrieveClient">
            <summary>
            Summary description for DicomQueryRetrieveClient.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomQueryRetrieveClient.#ctor(Dvtk.IheActors.Bases.BaseActor,Dvtk.IheActors.Bases.ActorName)">
            <summary>
            Class constructor.
            </summary>
            <param name="parentActor">Parent Actor Name - containing actor.</param>
            <param name="actorName">Destination Actor Name.</param>
        </member>
        <member name="T:Dvtk.IheActors.Dicom.DicomQueryRetrieveServer">
            <summary>
            Summary description for DicomQueryRetrieveServer.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomQueryRetrieveServer.#ctor(Dvtk.IheActors.Bases.BaseActor,Dvtk.IheActors.Bases.ActorName)">
            <summary>
            Class constructor.
            </summary>
            <param name="parentActor">Parent Actor Name - containing actor.</param>
            <param name="actorName">Destination Actor Name.</param>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomQueryRetrieveServer.ApplyConfig(Dvtk.IheActors.Bases.CommonConfig,Dvtk.IheActors.Dicom.DicomPeerToPeerConfig)">
            <summary>
            Apply the Dicom Configuration to the Client,
            </summary>
            <param name="commonConfig">Common Configuration.</param>
            <param name="config">Dicom Configuration.</param>
        </member>
        <member name="T:Dvtk.IheActors.Dicom.DicomScu">
            <summary>
            Summary description of the DicomScu class.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomScu.#ctor(Dvtk.IheActors.Dicom.DicomClient)">
            <summary>
            Class constructor.
            </summary>
            <param name="dicomClient"></param>
        </member>
        <member name="P:Dvtk.IheActors.Dicom.DicomScu.DicomClient">
            <summary>
            Property - DicomClient
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Dicom.DicomScu.SignalCompletion">
            <summary>
            Property - Signal SCU completion.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomScu.BeforeProcessTrigger(System.Object)">
            <summary>
            Do this before processing the Client Trigger.
            </summary>
            <param name="trigger">Trigger message.</param>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomScu.AfterProcessTrigger(System.Object)">
            <summary>
            Do this after processing the Client Trigger.
            </summary>
            <param name="trigger">Trigger message.</param>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomScu.SubscribeEvent">
            <summary>
            Subscribe to the message sending and received events.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomScu.UnSubscribeEvent">
            <summary>
            Un-subscribe to the message sending and received events.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomScu.ScuSendingMessageEventHandler(DvtkHighLevelInterface.Dicom.Messages.DicomProtocolMessage)">
            <summary>
            Handle the Mesage Sending Event for all messages.
            </summary>
            <param name="dicomProtocolMessage">Received DICOM Protocol Message.</param>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomScu.ScuMessageReceivedEventHandler(DvtkHighLevelInterface.Dicom.Messages.DicomProtocolMessage)">
            <summary>
            Handle the Mesage Received Event for all messages.
            </summary>
            <param name="dicomProtocolMessage">Received DICOM Protocol Message.</param>
        </member>
        <member name="T:Dvtk.IheActors.Dicom.DicomServer">
            <summary>
            Summary description for DicomServer.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomServer.#ctor(Dvtk.IheActors.Bases.BaseActor,Dvtk.IheActors.Bases.ActorName)">
            <summary>
            Class constructor.
            </summary>
            <param name="parentActor">Parent Actor Name - (containing actor).</param>
            <param name="actorName">Destination Actor Name.</param>
        </member>
        <member name="P:Dvtk.IheActors.Dicom.DicomServer.ConfigOption1">
            <summary>
            Property ConfigOption1
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Dicom.DicomServer.ConfigOption2">
            <summary>
            Property ConfigOption2
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Dicom.DicomServer.ConfigOption3">
            <summary>
            Property ConfigOption3
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomServer.ApplyConfig(Dvtk.IheActors.Bases.CommonConfig,Dvtk.IheActors.Dicom.DicomPeerToPeerConfig)">
            <summary>
            Apply the Dicom Configuration to the Server.
            </summary>
            <param name="commonConfig">Common Configuration.</param>
            <param name="config">Dicom Configuration.</param>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomServer.UpdateConfig(Dvtk.IheActors.Bases.CommonConfig,Dvtk.IheActors.Dicom.DicomPeerToPeerConfig)">
            <summary>
            Update the Dicom Configuration of the Server.
            </summary>
            <param name="commonConfig">Common Configuration.</param>
            <param name="clientConfig">Dicom Client Configuration.</param>
        </member>
        <member name="P:Dvtk.IheActors.Dicom.DicomServer.StoreDataDirectory">
            <summary>
            Get the directory where the DicomServer stores the DCM files.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Dicom.DicomServer.Scp">
            <summary>
            Property - Scp
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomServer.StartServer">
            <summary>
            Start the Server.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomServer.StopServer">
            <summary>
            Stop the Server.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomServer.SubscribeEvent">
            <summary>
            Subscribe to the message sending and received events.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomServer.UnSubscribeEvent">
            <summary>
            Un-subscribe to the message sending and received events.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomServer.ScpSendingMessageEventHandler(DvtkHighLevelInterface.Dicom.Messages.DicomProtocolMessage)">
            <summary>
            Handle the Mesage Sending Event for all messages.
            </summary>
            <param name="dicomProtocolMessage">Received DICOM Protocol Message.</param>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomServer.ScpMessageReceivedEventHandler(DvtkHighLevelInterface.Dicom.Messages.DicomProtocolMessage)">
            <summary>
            Handle the Mesage Received Event for all messages.
            </summary>
            <param name="dicomProtocolMessage">Received DICOM Protocol Message.</param>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomServer.ClearTransferSyntaxes">
            <summary>
            Clear the current transfer syntax list - reset contents to empty.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomServer.AddTransferSyntax(System.String)">
            <summary>
            Add a single transfer syntax to the list.
            </summary>
            <param name="transferSyntax">Transfer Syntax UID.</param>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomServer.SetRespondToAssociateRequest(Dvtk.DvtkDicomEmulators.Bases.HliScp.ScpRespondToAssociateRequestEnum)">
            <summary>
            SetRespondToAssociateRequest - define how the SCP should react to the Associate Request.
            </summary>
            <param name="scpRespondToAssociateRequest">scpRespondToAssociateRequest enum.</param>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomServer.SetRespondToReleaseRequest(Dvtk.DvtkDicomEmulators.Bases.HliScp.ScpRespondToReleaseRequestEnum)">
            <summary>
            SetRespondToReleaseRequest - define how the SCP should react to the Release Request.
            </summary>
            <param name="scpRespondToReleaseRequest">scpRespondToReleaseRequest enum.</param>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomServer.SetRejectParameters(System.Byte,System.Byte,System.Byte)">
            <summary>
             Set Associate Reject parameters.
            </summary>
            <param name="result">DULP reject result.</param>
            <param name="source">DULP reject source.</param>
            <param name="reason">DULP reject reason.</param>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomServer.SetAbortParameters(System.Byte,System.Byte)">
            <summary>
            Set the Abort Request parameters.
            </summary>
            <param name="source">DULP abort source.</param>
            <param name="reason">DULP abort reason.</param>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomServer.SetResultsFilePerAssociation(System.Boolean)">
            <summary>
            Set the ResultsFilePerAssociation parameter.
            </summary>
            <param name="resultsFilePerAssociation">Boolean indicating whether the results files are generated per association or not.</param>
        </member>
        <member name="T:Dvtk.IheActors.Dicom.DicomStorageClient">
            <summary>
            Summary description for DicomStorageClient.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomStorageClient.#ctor(Dvtk.IheActors.Bases.BaseActor,Dvtk.IheActors.Bases.ActorName)">
            <summary>
            Class constructor.
            </summary>
            <param name="parentActor">Parent Actor Name - containing actor.</param>
            <param name="actorName">Destination Actor Name.</param>
        </member>
        <member name="T:Dvtk.IheActors.Dicom.DicomStorageCommitClient">
            <summary>
            Summary description for DicomStorageCommitClient.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomStorageCommitClient.#ctor(Dvtk.IheActors.Bases.BaseActor,Dvtk.IheActors.Bases.ActorName)">
            <summary>
            Class constructor.
            </summary>
            <param name="parentActor">Parent Actor Name - containing actor.</param>
            <param name="actorName">Destination Actor Name.</param>
        </member>
        <member name="T:Dvtk.IheActors.Dicom.DicomStorageCommitmentScu">
            <summary>
            Summary description of the DicomStorageCommitmentScu class.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomStorageCommitmentScu.#ctor(Dvtk.IheActors.Dicom.DicomClient)">
            <summary>
            Class constructor.
            </summary>
            <param name="dicomClient"></param>
        </member>
        <member name="T:Dvtk.IheActors.Dicom.DicomStorageCommitServer">
            <summary>
            Summary description for DicomStorageCommitServer.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomStorageCommitServer.#ctor(Dvtk.IheActors.Bases.BaseActor,Dvtk.IheActors.Bases.ActorName)">
            <summary>
            Class constructor.
            </summary>
            <param name="parentActor">Parent Actor Name - containing actor.</param>
            <param name="actorName">Destination Actor Name.</param>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomStorageCommitServer.ApplyConfig(Dvtk.IheActors.Bases.CommonConfig,Dvtk.IheActors.Dicom.DicomPeerToPeerConfig)">
            <summary>
            Apply the Dicom Configuration to the Client,
            </summary>
            <param name="commonConfig">Common Configuration.</param>
            <param name="config">Dicom Configuration.</param>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomStorageCommitServer.ScpMessageReceivedEventHandler(DvtkHighLevelInterface.Dicom.Messages.DicomProtocolMessage)">
            <summary>
            Handle the Mesage Received Event for DICOM N-ACTION-RQ messages.
            </summary>
            <param name="dicomProtocolMessage">Received DICOM Protocol Message.</param>
        </member>
        <member name="T:Dvtk.IheActors.Dicom.DicomStorageServer">
            <summary>
            Summary description for DicomStorageServer.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomStorageServer.#ctor(Dvtk.IheActors.Bases.BaseActor,Dvtk.IheActors.Bases.ActorName)">
            <summary>
            Class constructor.
            </summary>
            <param name="parentActor">Parent Actor Name - containing actor.</param>
            <param name="actorName">Destination Actor Name.</param>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomStorageServer.ApplyConfig(Dvtk.IheActors.Bases.CommonConfig,Dvtk.IheActors.Dicom.DicomPeerToPeerConfig)">
            <summary>
            Apply the Dicom Configuration to the Client,
            </summary>
            <param name="commonConfig">Common Configuration.</param>
            <param name="config">Dicom Configuration.</param>
        </member>
        <member name="T:Dvtk.IheActors.Dicom.DicomTransaction">
            <summary>
            Summary description for DicomTransaction.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomTransaction.#ctor(Dvtk.IheActors.Bases.TransactionNameEnum,Dvtk.IheActors.Bases.TransactionDirectionEnum)">
            <summary>
            Class constructor.
            </summary>
            <param name="transactionName">Transaction Name.</param>
            <param name="direction">Transaction direction - sent/received.</param>
        </member>
        <member name="P:Dvtk.IheActors.Dicom.DicomTransaction.AssocRequest">
            <summary>
            Property - AssocRequest.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Dicom.DicomTransaction.AssocAccept">
            <summary>
            Property - AssocAccept
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Dicom.DicomTransaction.DicomMessages">
            <summary>
            Property - DicomMessages.
            </summary>
        </member>
        <member name="T:Dvtk.IheActors.Dicom.DicomTrigger">
            <summary>
            Summary description for DicomTrigger.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomTrigger.#ctor(Dvtk.IheActors.Bases.TransactionNameEnum)">
            <summary>
            Class constructor.
            </summary>
            <param name="triggerName">Trigger Name</param>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomTrigger.AddItem(DvtkHighLevelInterface.Dicom.Messages.DicomMessage,System.String,System.String)">
            <summary>
            Add the trigger item details to the trigger.
            </summary>
            <param name="message">DICOM Message to be triggered.</param>
            <param name="sopClassUid">SOP Class UID of DICOM Message.</param>
            <param name="transferSyntax">Transfer Syntax of DICOM Message</param>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomTrigger.AddItem(DvtkHighLevelInterface.Dicom.Messages.DicomMessage,System.String,System.String[])">
            <summary>
            Add the trigger item details to the trigger.
            </summary>
            <param name="message">DICOM Message to be triggered.</param>
            <param name="sopClassUid">SOP Class UID of DICOM Message.</param>
            <param name="transferSyntaxes">Transfer Syntaxes of DICOM Message</param>
        </member>
        <member name="P:Dvtk.IheActors.Dicom.DicomTrigger.TriggerItems">
            <summary>
            Property - TriggerItems.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Dicom.DicomTrigger.HandleInSingleAssociation">
            <summary>
            Property - HandleInSingleAssociation
            </summary>
        </member>
        <member name="T:Dvtk.IheActors.Dicom.DicomTriggerItem">
            <summary>
            Summary description for DicomTriggerItem.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomTriggerItem.#ctor(DvtkHighLevelInterface.Dicom.Messages.DicomMessage,System.String,System.String[])">
            <summary>
            Class constructor.
            </summary>
            <param name="message">DICOM Message to be triggered.</param>
            <param name="sopClassUid">SOP Class UID of DICOM Message.</param>
            <param name="transferSyntaxes">Transfer Syntaxes of DICOM Message</param>
        </member>
        <member name="P:Dvtk.IheActors.Dicom.DicomTriggerItem.Message">
            <summary>
            Property - Message.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Dicom.DicomTriggerItem.SopClassUid">
            <summary>
            Property - SOP Class UID / Abstract Syntax Name.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Dicom.DicomTriggerItem.TransferSyntaxes">
            <summary>
            Property - Transfer Syntaxes UID.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomTriggerItem.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object
            </summary>
            <param name="obj">An <see cref="T:System.Object"/> to compare with this instance, or a <see langword="null"/> reference.</param>
            <returns><see langword="true"/> if other is an instance of <see cref="T:Dvtk.IheActors.Dicom.DicomTriggerItem"/> and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Dvtk.IheActors.Dicom.DicomTriggerItemCollection">
            <summary>
            Summary description for DicomTriggerItemCollection.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomTriggerItemCollection.#ctor">
            <summary>
            Class Constructor.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Dicom.DicomTriggerItemCollection.Item(System.Int32)">
            <summary>
            Gets or sets an <see cref="T:Dvtk.IheActors.Dicom.DicomTriggerItem"/> from the collection.
            </summary>
            <param name="index">The zero-based index of the collection member to get or set.</param>
            <value>The <see cref="T:Dvtk.IheActors.Dicom.DicomTriggerItem"/> at the specified index.</value>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomTriggerItemCollection.Add(Dvtk.IheActors.Dicom.DicomTriggerItem)">
            <summary>
            Adds an object to the end of the <see cref="T:Dvtk.IheActors.Dicom.DicomTriggerItemCollection"/>.
            </summary>
            <param name="value">The <see cref="T:Dvtk.IheActors.Dicom.DicomTriggerItem"/> to be added to the end of the <see cref="T:Dvtk.IheActors.Dicom.DicomTriggerItemCollection"/>.</param>
            <returns>The <see cref="T:Dvtk.IheActors.Dicom.DicomTriggerItemCollection"/> index at which the value has been added.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomTriggerItemCollection.IndexOf(Dvtk.IheActors.Dicom.DicomTriggerItem)">
            <summary>
            Searches for the specified <see cref="T:Dvtk.IheActors.Dicom.DicomTriggerItem"/> and 
            returns the zero-based index of the first occurrence within the entire <see cref="T:Dvtk.IheActors.Dicom.DicomTriggerItemCollection"/>.
            </summary>
            <param name="value">The <see cref="T:Dvtk.IheActors.Dicom.DicomTriggerItem"/> to locate in the <see cref="T:Dvtk.IheActors.Dicom.DicomTriggerItemCollection"/>.</param>
            <returns>
            The zero-based index of the first occurrence of value within the entire <see cref="T:Dvtk.IheActors.Dicom.DicomTriggerItemCollection"/>, 
            if found; otherwise, -1.
            </returns>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomTriggerItemCollection.Insert(System.Int32,Dvtk.IheActors.Dicom.DicomTriggerItem)">
            <summary>
            Inserts an <see cref="T:Dvtk.IheActors.Dicom.DicomTriggerItem"/> element into the <see cref="T:Dvtk.IheActors.Dicom.DicomTriggerItemCollection"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="value">The <see cref="T:Dvtk.IheActors.Dicom.DicomTriggerItem"/> to insert.</param>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomTriggerItemCollection.Remove(Dvtk.IheActors.Dicom.DicomTriggerItem)">
            <summary>
            Removes the first occurrence of a specific <see cref="T:Dvtk.IheActors.Dicom.DicomTriggerItem"/> from the <see cref="T:Dvtk.IheActors.Dicom.DicomTriggerItemCollection"/>.
            </summary>
            <param name="value">The <see cref="T:Dvtk.IheActors.Dicom.DicomTriggerItem"/> to remove from the <see cref="T:Dvtk.IheActors.Dicom.DicomTriggerItemCollection"/>.</param>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomTriggerItemCollection.Contains(Dvtk.IheActors.Dicom.DicomTriggerItem)">
            <summary>
            Determines whether the <see cref="T:Dvtk.IheActors.Dicom.DicomTriggerItemCollection"/> contains a specific element.
            </summary>
            <param name="value">The <see cref="T:Dvtk.IheActors.Dicom.DicomTriggerItem"/> to locate in the <see cref="T:Dvtk.IheActors.Dicom.DicomTriggerItemCollection"/>.</param>
            <returns>
            <c>true</c> if the <see cref="T:Dvtk.IheActors.Dicom.DicomTriggerItemCollection"/> contains the specified value; 
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomTriggerItemCollection.OnInsert(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes before inserting a new element into the collection instance.
            </summary>
            <param name="index">The zero-based index at which to insert value.</param>
            <param name="value">The new value of the element at index.</param>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomTriggerItemCollection.OnRemove(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes when removing an element from the collection instance.
            </summary>
            <param name="index">The zero-based index at which value can be found.</param>
            <param name="value">The value of the element to remove from index.</param>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomTriggerItemCollection.OnSet(System.Int32,System.Object,System.Object)">
            <summary>
            Performs additional custom processes before setting a value in the collection instance.
            </summary>
            <param name="index">The zero-based index at which oldValue can be found.</param>
            <param name="oldValue">The value to replace with newValue.</param>
            <param name="newValue">The new value of the element at index.</param>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomTriggerItemCollection.OnValidate(System.Object)">
            <summary>
            Performs additional custom processes when validating a value.
            </summary>
            <param name="value">The object to validate.</param>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomTriggerItemCollection.CopyTo(Dvtk.IheActors.Dicom.DicomTriggerItem[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to a strong-typed <c>DicomTriggerItem[]</c>, 
            starting at a particular <c>DicomTriggerItem[]</c> index.
            </summary>
            <param name="array">
            The one-dimensional <c>DicomTriggerItem[]</c> that is the destination of the elements 
            copied from <see cref="T:System.Collections.ICollection"/>.
            The <c>DicomTriggerItem[]</c> must have zero-based indexing. 
            </param>
            <param name="index">
            The zero-based index in array at which copying begins.
            </param>
            <remarks>
            Provides the strongly typed member for <see cref="T:System.Collections.ICollection"/>.
            </remarks>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomTriggerItemCollection.FindMatchingPresentationContext(Dvtk.IheActors.Dicom.DicomTriggerItem)">
            <summary>
            Try to find the given trigger in the collection with the same presentation context
            </summary>
            <param name="value">Dicom Trigger - contains presentation context to match.</param>
            <returns>True if a matching presentation context is found - otherwise false.</returns>
        </member>
        <member name="T:Dvtk.IheActors.Dicom.DicomWorklistClient">
            <summary>
            Summary description for DicomWorklistClient.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomWorklistClient.#ctor(Dvtk.IheActors.Bases.BaseActor,Dvtk.IheActors.Bases.ActorName)">
            <summary>
            Class constructor.
            </summary>
            <param name="parentActor">Parent Actor Name - containing actor.</param>
            <param name="actorName">Destination Actor Name.</param>
        </member>
        <member name="T:Dvtk.IheActors.Dicom.DicomWorklistServer">
            <summary>
            Summary description for DicomWorklistServer.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomWorklistServer.#ctor(Dvtk.IheActors.Bases.BaseActor,Dvtk.IheActors.Bases.ActorName)">
            <summary>
            Class constructor.
            </summary>
            <param name="parentActor">Parent Actor Name - containing actor.</param>
            <param name="actorName">Destination Actor Name.</param>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomWorklistServer.ApplyConfig(Dvtk.IheActors.Bases.CommonConfig,Dvtk.IheActors.Dicom.DicomPeerToPeerConfig)">
            <summary>
            Apply the Dicom Configuration to the Client,
            </summary>
            <param name="commonConfig">Common Configuration.</param>
            <param name="config">Dicom Configuration.</param>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomWorklistServer.PatientRegistration(DvtkData.Dimse.DataSet)">
            <summary>
            Patient Registration request - update modality worklist information model.
            </summary>
            <param name="dataset">Dataset containing patient registration attributes.</param>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomWorklistServer.PatientUpdate(DvtkData.Dimse.DataSet)">
            <summary>
            Patient Update request - update modality worklist information model.
            </summary>
            <param name="dataset">Dataset containing patient update attributes.</param>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomWorklistServer.PatientMerge(DvtkData.Dimse.DataSet)">
            <summary>
            Patient merge request - update modality worklist information model.
            </summary>
            <param name="dataset">Dataset containing patient merge attributes.</param>
        </member>
        <member name="M:Dvtk.IheActors.Dicom.DicomWorklistServer.PlacerOrderManagement(DvtkData.Dimse.DataSet)">
            <summary>
            Placer order management request - update modality worklist information model.
            </summary>
            <param name="dataset">Dataset containing placer order management attributes.</param>
        </member>
        <member name="T:Dvtk.IheActors.Hl7.Hl7Client">
            <summary>
            Summary description for Hl7Client.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Hl7.Hl7Client.Hl7Thread">
            <summary>
            Get the HLI Hl7Thread used within this Hl7Client.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.Hl7Client.#ctor(Dvtk.IheActors.Bases.BaseActor,Dvtk.IheActors.Bases.ActorName,Dvtk.IheActors.Bases.CommonConfig,Dvtk.IheActors.Hl7.Hl7PeerToPeerConfig)">
            <summary>
            Class constructor.
            </summary>
            <param name="parentActor">Parent Actor Name - (containing actor).</param>
            <param name="actorName">Destination Actor Name.</param>
            <param name="commonConfig">Common Configuration.</param>
            <param name="config">HL7 Configuration.</param>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.Hl7Client.StartClient">
            <summary>
            Start the Client.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.Hl7Client.TriggerClient(Dvtk.IheActors.Bases.ActorName,Dvtk.IheActors.Bases.BaseTrigger,System.Boolean)">
            <summary>
            Trigger the Client.
            </summary>
            <param name="actorName">Destination Actor Name.</param>
            <param name="trigger">Trigger message.</param>
            <param name="awaitCompletion">Boolean indicating whether this a synchronous call or not.</param>
            <returns>Boolean indicating success or failure.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.Hl7Client.StopClient">
            <summary>
            Stop the Client.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.Hl7Client.ProcessMessages">
            <summary>
            Process Hl7 requests and responses.
            </summary>
        </member>
        <member name="T:Dvtk.IheActors.Hl7.Hl7PeerToPeerConfig">
            <summary>
            Summary description for Hl7PeerToPeerConfig.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.Hl7PeerToPeerConfig.#ctor">
            <summary>
            Class constructor.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Hl7.Hl7PeerToPeerConfig.SessionId">
            <summary>
            Proprty - SessionId.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Hl7.Hl7PeerToPeerConfig.MessageDelimiters">
            <summary>
            Proprty - MessageDelimiters.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.Hl7PeerToPeerConfig.WriteXmlConfig(System.Xml.XmlTextWriter)">
            <summary>
            Write Configuration data in XML format to the XML Text Writer.
            </summary>
            <param name="writer">XML Text Writer</param>
        </member>
        <member name="T:Dvtk.IheActors.Hl7.Hl7Mllp">
            <summary>
            Summary description for Hl7Mllp.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.Hl7Mllp.#ctor">
            <summary>
            Class constructor.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.Hl7Mllp.Connect(System.String,System.Int32)">
            <summary>
            Make a network connection to a server with the given hostname and port.
            </summary>
            <param name="hostname">Server hostname.</param>
            <param name="port">Connection port - Server listen port.</param>
            <returns>bool - true if connection is made.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.Hl7Mllp.Listen(System.Int32)">
            <summary>
            Listen for a connection to the given network port.
            </summary>
            <param name="port">Port number to listen on for connections.</param>
            <returns>bool - true if socket listening.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.Hl7Mllp.Accept">
            <summary>
            Accept a client connection to the given network port.
            </summary>
            <returns>Socket - connected socket.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.Hl7Mllp.Close">
            <summary>
            Close the network connection.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.Hl7Mllp.Stop">
            <summary>
            Stop the network connection.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.Hl7Mllp.SendMessage(Dvtk.Hl7.Messages.Hl7Message,Dvtk.Hl7.Messages.Hl7MessageDelimiters)">
            <summary>
            Send an HL7 message over the connected network stream.
            </summary>
            <param name="hl7Message">HL7 message to encode.</param>
            <param name="messageDelimiters">HL7 message delimiters.</param>
            <returns>bool - successful sent = true else false.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.Hl7Mllp.ReceiveMessage(Dvtk.Hl7.Messages.Hl7MessageDelimiters@)">
            <summary>
            Receive an HL7 message over the connected network stream.
            </summary>
            <param name="messageDelimiters">Initial HL7 message delimiters - updated to actual delimters during method.</param>
            <returns>Correctly instantiated HL7 message.</returns>
        </member>
        <member name="P:Dvtk.IheActors.Hl7.Hl7Mllp.ReadTimeout">
            <summary>
            Property - ReadTimeout.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Hl7.Hl7Mllp.WriteTimeout">
            <summary>
            Property - WriteTimeout.
            </summary>
        </member>
        <member name="T:Dvtk.IheActors.Hl7.Hl7QueryServer">
            <summary>
            Summary description for Hl7QueryServer.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.Hl7QueryServer.#ctor(Dvtk.IheActors.Bases.BaseActor,Dvtk.IheActors.Bases.ActorName,Dvtk.IheActors.Bases.CommonConfig,Dvtk.IheActors.Hl7.Hl7PeerToPeerConfig)">
            <summary>
            Class constructor.
            </summary>
            <param name="parentActor">Parent Actor Name - (containing actor).</param>
            <param name="actorName">Destination Actor Name.</param>
            <param name="commonConfig">Common Configuration.</param>
            <param name="config">HL7 Configuration.</param>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.Hl7QueryServer.AddResponseTrigger(Dvtk.IheActors.Bases.ActorName,Dvtk.IheActors.Bases.BaseTrigger)">
            <summary>
            Add response trigger to server.
            </summary>
            <param name="actorName">Destination Actor Name.</param>
            <param name="trigger">Trigger message.</param>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.Hl7QueryServer.MessageHandler(Dvtk.Hl7.Messages.Hl7Message)">
            <summary>
            Query message handler for the received Hl7 message - send a query response.
            </summary>
            <param name="hl7RequestMessage">Received HL7 message.</param>
            <returns>Hl7Message response.</returns>
        </member>
        <member name="T:Dvtk.IheActors.Hl7.Hl7Server">
            <summary>
            Summary description for Hl7Server.
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Hl7.Hl7Server.Hl7Thread">
            <summary>
            Get the HLI Hl7Thread used within this Hl7Server.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.Hl7Server.#ctor(Dvtk.IheActors.Bases.BaseActor,Dvtk.IheActors.Bases.ActorName,Dvtk.IheActors.Bases.CommonConfig,Dvtk.IheActors.Hl7.Hl7PeerToPeerConfig)">
            <summary>
            Class constructor.
            </summary>
            <param name="parentActor">Parent Actor Name - (containing actor).</param>
            <param name="actorName">Destination Actor Name.</param>
            <param name="commonConfig">Common Configuration.</param>
            <param name="config">HL7 Configuration.</param>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.Hl7Server.StartServer">
            <summary>
            Start Server
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.Hl7Server.StopServer">
            <summary>
            Stop Server
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.Hl7Server.ProcessMessages">
            <summary>
            Process Hl7 requests and responses.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.Hl7Server.MessageHandler(Dvtk.Hl7.Messages.Hl7Message)">
            <summary>
            Default message handler for the received Hl7 message - just send an ACK.
            </summary>
            <param name="hl7RequestMessage">Received HL7 message.</param>
            <returns>Hl7Message response.</returns>
        </member>
        <member name="T:Dvtk.IheActors.Hl7.Hl7ThreadForHl7Client">
            <summary>
            Summary description for Hl7ThreadForHl7Client.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.Hl7ThreadForHl7Client.#ctor(Dvtk.IheActors.Hl7.Hl7Client)">
            <summary>
            Class Constructor.
            </summary>
            <param name="hl7Client">HL7 Client.</param>
        </member>
        <member name="T:Dvtk.IheActors.Hl7.Hl7ThreadForHl7Server">
            <summary>
            Summary description for Hl7ThreadForHl7Server.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.Hl7ThreadForHl7Server.#ctor(Dvtk.IheActors.Hl7.Hl7Server)">
            <summary>
            Class Constructor.
            </summary>
            <param name="hl7Server">HL7 Server.</param>
        </member>
        <member name="T:Dvtk.IheActors.Hl7.Hl7Transaction">
            <summary>
            Summary description for Hl7Transaction.
            </summary>
        </member>
        <member name="T:Dvtk.IheActors.Hl7.Hl7Trigger">
            <summary>
            Summary description for Hl7Trigger.
            </summary>
        </member>
        <member name="T:Dvtk.IheActors.Hl7.WebService.Generation.MessageGeneration">
            <remarks/>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.WebService.Generation.MessageGeneration.#ctor(System.String)">
            <remarks/>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.WebService.Generation.MessageGeneration.getErrorDescription(Dvtk.IheActors.Hl7.WebService.Generation.getErrorDescription)">
            <remarks/>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.WebService.Generation.MessageGeneration.BegingetErrorDescription(Dvtk.IheActors.Hl7.WebService.Generation.getErrorDescription,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.WebService.Generation.MessageGeneration.EndgetErrorDescription(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.WebService.Generation.MessageGeneration.setGenerationContext(Dvtk.IheActors.Hl7.WebService.Generation.setGenerationContext)">
            <remarks/>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.WebService.Generation.MessageGeneration.BeginsetGenerationContext(Dvtk.IheActors.Hl7.WebService.Generation.setGenerationContext,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.WebService.Generation.MessageGeneration.EndsetGenerationContext(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.WebService.Generation.MessageGeneration.generate(Dvtk.IheActors.Hl7.WebService.Generation.generate)">
            <remarks/>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.WebService.Generation.MessageGeneration.Begingenerate(Dvtk.IheActors.Hl7.WebService.Generation.generate,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.WebService.Generation.MessageGeneration.Endgenerate(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.WebService.Generation.MessageGeneration.setProfile(Dvtk.IheActors.Hl7.WebService.Generation.setProfile)">
            <remarks/>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.WebService.Generation.MessageGeneration.BeginsetProfile(Dvtk.IheActors.Hl7.WebService.Generation.setProfile,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.WebService.Generation.MessageGeneration.EndsetProfile(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.WebService.Generation.MessageGeneration.setFixedData(Dvtk.IheActors.Hl7.WebService.Generation.setFixedData)">
            <remarks/>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.WebService.Generation.MessageGeneration.BeginsetFixedData(Dvtk.IheActors.Hl7.WebService.Generation.setFixedData,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.WebService.Generation.MessageGeneration.EndsetFixedData(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.WebService.Generation.MessageGeneration.getMessages(Dvtk.IheActors.Hl7.WebService.Generation.getMessages)">
            <remarks/>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.WebService.Generation.MessageGeneration.BegingetMessages(Dvtk.IheActors.Hl7.WebService.Generation.getMessages,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.WebService.Generation.MessageGeneration.EndgetMessages(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="T:Dvtk.IheActors.Hl7.WebService.Generation.getErrorDescription">
            <remarks/>
        </member>
        <member name="T:Dvtk.IheActors.Hl7.WebService.Generation.getMessages">
            <remarks/>
        </member>
        <member name="T:Dvtk.IheActors.Hl7.WebService.Generation.setFixedDataResponse">
            <remarks/>
        </member>
        <member name="F:Dvtk.IheActors.Hl7.WebService.Generation.setFixedDataResponse.return">
            <remarks/>
        </member>
        <member name="T:Dvtk.IheActors.Hl7.WebService.Generation.setFixedData">
            <remarks/>
        </member>
        <member name="F:Dvtk.IheActors.Hl7.WebService.Generation.setFixedData.param0">
            <remarks/>
        </member>
        <member name="T:Dvtk.IheActors.Hl7.WebService.Generation.setProfileResponse">
            <remarks/>
        </member>
        <member name="F:Dvtk.IheActors.Hl7.WebService.Generation.setProfileResponse.return">
            <remarks/>
        </member>
        <member name="T:Dvtk.IheActors.Hl7.WebService.Generation.setProfile">
            <remarks/>
        </member>
        <member name="F:Dvtk.IheActors.Hl7.WebService.Generation.setProfile.param0">
            <remarks/>
        </member>
        <member name="T:Dvtk.IheActors.Hl7.WebService.Generation.generateResponse">
            <remarks/>
        </member>
        <member name="F:Dvtk.IheActors.Hl7.WebService.Generation.generateResponse.return">
            <remarks/>
        </member>
        <member name="T:Dvtk.IheActors.Hl7.WebService.Generation.generate">
            <remarks/>
        </member>
        <member name="T:Dvtk.IheActors.Hl7.WebService.Generation.setGenerationContextResponse">
            <remarks/>
        </member>
        <member name="F:Dvtk.IheActors.Hl7.WebService.Generation.setGenerationContextResponse.return">
            <remarks/>
        </member>
        <member name="T:Dvtk.IheActors.Hl7.WebService.Generation.setGenerationContext">
            <remarks/>
        </member>
        <member name="F:Dvtk.IheActors.Hl7.WebService.Generation.setGenerationContext.param0">
            <remarks/>
        </member>
        <member name="T:Dvtk.IheActors.Hl7.WebService.Generation.getErrorDescriptionResponse">
            <remarks/>
        </member>
        <member name="F:Dvtk.IheActors.Hl7.WebService.Generation.getErrorDescriptionResponse.return">
            <remarks/>
        </member>
        <member name="T:Dvtk.IheActors.Hl7.WebService.Validation.MessageValidation">
            <remarks/>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.WebService.Validation.MessageValidation.#ctor(System.String)">
            <remarks/>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.WebService.Validation.MessageValidation.setValidationContext(Dvtk.IheActors.Hl7.WebService.Validation.setValidationContext)">
            <remarks/>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.WebService.Validation.MessageValidation.BeginsetValidationContext(Dvtk.IheActors.Hl7.WebService.Validation.setValidationContext,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.WebService.Validation.MessageValidation.EndsetValidationContext(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.WebService.Validation.MessageValidation.getErrorDescription(Dvtk.IheActors.Hl7.WebService.Validation.getErrorDescription)">
            <remarks/>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.WebService.Validation.MessageValidation.BegingetErrorDescription(Dvtk.IheActors.Hl7.WebService.Validation.getErrorDescription,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.WebService.Validation.MessageValidation.EndgetErrorDescription(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.WebService.Validation.MessageValidation.setMessage(Dvtk.IheActors.Hl7.WebService.Validation.setMessage)">
            <remarks/>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.WebService.Validation.MessageValidation.BeginsetMessage(Dvtk.IheActors.Hl7.WebService.Validation.setMessage,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.WebService.Validation.MessageValidation.EndsetMessage(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.WebService.Validation.MessageValidation.validate(Dvtk.IheActors.Hl7.WebService.Validation.validate)">
            <remarks/>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.WebService.Validation.MessageValidation.Beginvalidate(Dvtk.IheActors.Hl7.WebService.Validation.validate,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.WebService.Validation.MessageValidation.Endvalidate(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.WebService.Validation.MessageValidation.getValidationReport(Dvtk.IheActors.Hl7.WebService.Validation.getValidationReport)">
            <remarks/>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.WebService.Validation.MessageValidation.BegingetValidationReport(Dvtk.IheActors.Hl7.WebService.Validation.getValidationReport,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.WebService.Validation.MessageValidation.EndgetValidationReport(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.WebService.Validation.MessageValidation.setProfile(Dvtk.IheActors.Hl7.WebService.Validation.setProfile)">
            <remarks/>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.WebService.Validation.MessageValidation.BeginsetProfile(Dvtk.IheActors.Hl7.WebService.Validation.setProfile,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.WebService.Validation.MessageValidation.EndsetProfile(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="T:Dvtk.IheActors.Hl7.WebService.Validation.setValidationContext">
            <remarks/>
        </member>
        <member name="F:Dvtk.IheActors.Hl7.WebService.Validation.setValidationContext.param0">
            <remarks/>
        </member>
        <member name="T:Dvtk.IheActors.Hl7.WebService.Validation.setProfileResponse">
            <remarks/>
        </member>
        <member name="F:Dvtk.IheActors.Hl7.WebService.Validation.setProfileResponse.return">
            <remarks/>
        </member>
        <member name="T:Dvtk.IheActors.Hl7.WebService.Validation.setProfile">
            <remarks/>
        </member>
        <member name="F:Dvtk.IheActors.Hl7.WebService.Validation.setProfile.param0">
            <remarks/>
        </member>
        <member name="T:Dvtk.IheActors.Hl7.WebService.Validation.getValidationReportResponse">
            <remarks/>
        </member>
        <member name="F:Dvtk.IheActors.Hl7.WebService.Validation.getValidationReportResponse.return">
            <remarks/>
        </member>
        <member name="T:Dvtk.IheActors.Hl7.WebService.Validation.getValidationReport">
            <remarks/>
        </member>
        <member name="T:Dvtk.IheActors.Hl7.WebService.Validation.validateResponse">
            <remarks/>
        </member>
        <member name="F:Dvtk.IheActors.Hl7.WebService.Validation.validateResponse.return">
            <remarks/>
        </member>
        <member name="T:Dvtk.IheActors.Hl7.WebService.Validation.validate">
            <remarks/>
        </member>
        <member name="T:Dvtk.IheActors.Hl7.WebService.Validation.setMessageResponse">
            <remarks/>
        </member>
        <member name="F:Dvtk.IheActors.Hl7.WebService.Validation.setMessageResponse.return">
            <remarks/>
        </member>
        <member name="T:Dvtk.IheActors.Hl7.WebService.Validation.setMessage">
            <remarks/>
        </member>
        <member name="F:Dvtk.IheActors.Hl7.WebService.Validation.setMessage.param0">
            <remarks/>
        </member>
        <member name="F:Dvtk.IheActors.Hl7.WebService.Validation.setMessage.param1">
            <remarks/>
        </member>
        <member name="T:Dvtk.IheActors.Hl7.WebService.Validation.getErrorDescriptionResponse">
            <remarks/>
        </member>
        <member name="F:Dvtk.IheActors.Hl7.WebService.Validation.getErrorDescriptionResponse.return">
            <remarks/>
        </member>
        <member name="T:Dvtk.IheActors.Hl7.WebService.Validation.getErrorDescription">
            <remarks/>
        </member>
        <member name="T:Dvtk.IheActors.Hl7.WebService.Validation.setValidationContextResponse">
            <remarks/>
        </member>
        <member name="F:Dvtk.IheActors.Hl7.WebService.Validation.setValidationContextResponse.return">
            <remarks/>
        </member>
        <member name="T:Dvtk.IheActors.Hl7.WebService.NistWebServiceClient">
            <summary>
            Summary description for NistWebServiceClient.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.WebService.NistWebServiceClient.#ctor(System.String)">
            <summary>
            Class constructor.
            </summary>
            <param name="validationWebServiceUrl">NIST URL</param>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.WebService.NistWebServiceClient.Validate(System.String,System.String,System.String,System.Boolean,System.String@)">
            <summary>
            Hl7 Message Validation. Validate the hl7Message using the given xmlProfile.
            </summary>
            <param name="xmlProfile">HL7 Conformance Profile - encoded as XML.</param>
            <param name="xmlValidContext">HL7 Validation Context - encoded as XML.</param>
            <param name="hl7Message">DVTK HL7 Message.</param>
            <param name="isXml">Generated messages are ER7 or XML message (true if XML, false either).</param>
            <param name="errorDescription">Out - error description string.</param>
            <returns>String - validation results XML stream.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.WebService.NistWebServiceClient.Generate(System.String,System.String,System.String)">
            <summary>
            HL7 Message Generation. Generate some HL7 Messages using the given xmlProfile, xmlContext and
            xmlFixedData.
            </summary>
            <param name="xmlProfile">HL7 Conformance Profile - encoded as XML.</param>
            <param name="xmlContext">Generation Context - encoded as XML.</param>
            <param name="xmlFixedData">Fixed Data - encoded as XML.</param>
            <returns>ER7 encoded String based HL7 Messages.</returns>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.WebService.NistWebServiceClient.DisplayErrorDescriptionGeneration(System.String)">
            <summary>
            Display the Error Description along with the given message.
            </summary>
            <param name="message">Message to display.</param>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.WebService.NistWebServiceClient.GetErrorDescriptionValidation(System.String)">
            <summary>
            Get the Error Description along with the given message.
            </summary>
            <param name="message">Message to display.</param>
        </member>
        <member name="T:Dvtk.IheActors.Hl7.WebService.NistXmlResultsParser">
            <summary>
            Summary description for ErrorWarningCounters.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.WebService.NistXmlResultsParser.#ctor(System.String)">
            <summary>
            Class constructor.
            </summary>
            <param name="xmlResults">Xml Results Stream</param>
        </member>
        <member name="M:Dvtk.IheActors.Hl7.WebService.NistXmlResultsParser.RemoveHeader(System.String)">
            <summary>
            Remove the first line from the xml string.
            - so that we can embed this string in the DVT results xml string.
            </summary>
            <param name="xmlString">Input string.</param>
            <returns>Modified String - without the first line.</returns>
        </member>
        <member name="P:Dvtk.IheActors.Hl7.WebService.NistXmlResultsParser.ErrorCount">
            <summary>
            Property - ErrorCount
            </summary>
        </member>
        <member name="P:Dvtk.IheActors.Hl7.WebService.NistXmlResultsParser.WarningCount">
            <summary>
            Property - WarningCount
            </summary>
        </member>
        <member name="T:Dvtk.IheActors.IntegrationProfile.IntegrationProfile">
            <summary>
            DEPRICATED - Summary description for IntegrationProfile.
            
            This class remains for backwards compatibility reasons.
            It was originally used as the container for the IHE Actors. This container
            class has now been named IheFramework and is implemented as the base class
            for this IntegrationProfile class.
            Please use the IheFramework class instead of this class.
            </summary>
        </member>
        <member name="M:Dvtk.IheActors.IntegrationProfile.IntegrationProfile.#ctor(System.String)">
            <summary>
            Class Constructor.
            </summary>
            <param name="profileName">Integration Profile Name.</param>
        </member>
        <member name="T:Dvtk.IheActors.UserInterfaces.Console">
            <summary>
            Summary description for Console.
            </summary>
        </member>
        <member name="T:Dvtk.IheActors.UserInterfaces.Form">
            <summary>
            Summary description for Form.
            </summary>
        </member>
        <member name="T:Dvtk.IheActors.UserInterfaces.IActorUserInterface">
            <summary>
            Summary description for IActorUserInterface.
            </summary>
        </member>
        <member name="T:Dvtk.IheActors.UserInterfaces.IIheFrameworkUserInterface">
            <summary>
            Summary description for IIheFrameworkUserInterface.
            </summary>
        </member>
        <member name="T:Dvtk.IheActors.UserInterfaces.UserControlActivityLogging">
            <summary>
            Summary description for UserControlActivityLogging.
            </summary>
        </member>
    </members>
</doc>
