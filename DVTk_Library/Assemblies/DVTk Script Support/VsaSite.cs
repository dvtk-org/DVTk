// ------------------------------------------------------
// DVTk - The Healthcare Validation Toolkit (www.dvtk.org)
// Copyright © 2009 DVTk
// ------------------------------------------------------
// This file is part of DVTk.
//
// DVTk is free software; you can redistribute it and/or modify it under the terms of the GNU
// Lesser General Public License as published by the Free Software Foundation; either version 3.0
// of the License, or (at your option) any later version. 
// 
// DVTk is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
// the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser
// General Public License for more details. 
// 
// You should have received a copy of the GNU Lesser General Public License along with this
// library; if not, see <http://www.gnu.org/licenses/>

using System;

namespace DvtkScriptSupport
{
    /// <summary>
    /// Provides access to compilation errors encountered during execution 
    /// of the script compilation.
    /// </summary>
    public class CompilerErrorEventArgs : EventArgs
    {
        private readonly string _Description;
        private readonly int _Line;
        private readonly string _LineText;
        //
        //Constructor.
        //
        internal CompilerErrorEventArgs(Microsoft.Vsa.IVsaError error)
        {
            this._Description = error.Description;
            this._Line = error.Line;
            this._LineText = error.LineText;
        }

        /// <summary>
        /// Gets a brief description of the error, 
        /// in some instances returning a reference to the 
        /// token in the source code that is causing the error.   
        /// </summary>
        public string Description
        {
            get { return this._Description; }
        }
        /// <summary>
        /// Gets the line number on which an error occurs.
        /// </summary>
        public int Line
        {
            get { return this._Line; }
        }
        /// <summary>
        /// Gets the text of the source code from the line that caused the error.
        /// </summary>
        public string LineText
        {
            get { return this._LineText; }
        }
    }

    internal class VsaSite
        : Microsoft.Vsa.IVsaSite
    {
        // Hashtable to store the instances of the objects being added to the engine
        private System.Collections.Hashtable _EventInstancesHashtable = 
            new System.Collections.Hashtable();

        public void AddEvent(
            string eventSourceName, 
            object instance)
        {
            if (eventSourceName == null) throw new System.ArgumentNullException();
            if (instance == null) throw new System.ArgumentNullException();

            try
            {
                this._EventInstancesHashtable.Add(eventSourceName, instance);
            }
            catch (Exception)
            {
                throw new Exception("Couldn't add event instance to the hashtable");
            }
        }

        #region IVsaSite Members

        public object GetEventSourceInstance(string itemName, string eventSourceName)
        {
            if (itemName == null) throw new System.ArgumentNullException();
            if (eventSourceName == null) throw new System.ArgumentNullException();

            try
            {
                return this._EventInstancesHashtable[eventSourceName];
            }
            catch (Exception)
            {
                throw new Exception("couldn't find the instance");
            }
        }

        public object GetGlobalInstance(string name)
        {
            if (name == null) throw new System.ArgumentNullException();

            return this._GlobalInstanceHashtable[name];
        }

        internal void AddGlobalInstance(string name, object instance)
        {
            if (name == null) throw new System.ArgumentNullException();
            if (instance == null) throw new System.ArgumentNullException();

            this._GlobalInstanceHashtable.Add(name, instance);
        }

        internal void RemoveGlobalInstance(string name)
        {
            if (name == null) throw new System.ArgumentNullException();

            this._GlobalInstanceHashtable.Remove(name);
        }
        private System.Collections.Hashtable _GlobalInstanceHashtable =
            new System.Collections.Hashtable();

        public void Notify(string notify, object info)
        {
            // Notifications generated by the script engine are not handled.
        }

        public bool OnCompilerError(Microsoft.Vsa.IVsaError error)
        {
            CompilerErrorEventArgs e = new CompilerErrorEventArgs(error);
            //
            // Invoke the delegates
            //
            if (CompilerErrorEvent != null) CompilerErrorEvent(this, e);
            // Returns TRUE if the compiler is directed to continue reporting further errors 
            // to the IVsaSite object. 
            // Returns FALSE if the compiler is directed to stop reporting further errors 
            // to the IVsaSite object.
            bool continueErrorReports = false;
            return continueErrorReports;
        }

        public void GetCompiledState(out byte[] pe, out byte[] debugInfo)
        {
            // Do nothing
            pe = null;
            debugInfo = null;
        }

        #endregion
        #region Events Sources (Publishers)
        /// <summary>
        /// Occurs when a compile error report is generated by the vsa engine.
        /// </summary>
        public event CompilerErrorEventHandler CompilerErrorEvent;
        #endregion

    }
    //
    // Delegate declaration.
    //
    public delegate void CompilerErrorEventHandler(object sender, CompilerErrorEventArgs e);
}
