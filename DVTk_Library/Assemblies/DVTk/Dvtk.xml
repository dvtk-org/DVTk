<?xml version="1.0"?>
<doc>
	<assembly>
		<name>DVTK</name>
	</assembly>
	<members>
		<member name="T:Dvtk.Sessions.SendReturnCode">
			<summary>
				Return codes for a DIMSE message send action.
			</summary>
		</member>
		<member name="F:Dvtk.Sessions.SendReturnCode.Success">
			<summary>
				Success
			</summary>
		</member>
		<member name="F:Dvtk.Sessions.SendReturnCode.Failure">
			<summary>
				Failure without further specification.
			</summary>
		</member>
		<member name="F:Dvtk.Sessions.SendReturnCode.AssociationRejected">
			<summary>
				Association rejected.
			</summary>
		</member>
		<member name="F:Dvtk.Sessions.SendReturnCode.AssociationReleased">
			<summary>
				Association released.
			</summary>
		</member>
		<member name="F:Dvtk.Sessions.SendReturnCode.AssociationAborted">
			<summary>
				Association aborted.
			</summary>
		</member>
		<member name="F:Dvtk.Sessions.SendReturnCode.SocketClosed">
			<summary>
				TCP/IP socket connection closed.
			</summary>
		</member>
		<member name="F:Dvtk.Sessions.SendReturnCode.NoSocketConnection">
			<summary>
				TCP/IP socket connection not established.
			</summary>
		</member>
		<member name="T:Dvtk.Sessions.ReceiveReturnCode">
			<summary>
				Return codes for a DIMSE message receive action.
			</summary>
		</member>
		<member name="F:Dvtk.Sessions.ReceiveReturnCode.Success">
			<summary>
				Success
			</summary>
		</member>
		<member name="F:Dvtk.Sessions.ReceiveReturnCode.Failure">
			<summary>
				Failure without further specification.
			</summary>
		</member>
		<member name="F:Dvtk.Sessions.ReceiveReturnCode.AssociationRejected">
			<summary>
				Association rejected.
			</summary>
		</member>
		<member name="F:Dvtk.Sessions.ReceiveReturnCode.AssociationReleased">
			<summary>
				Association released.
			</summary>
		</member>
		<member name="F:Dvtk.Sessions.ReceiveReturnCode.AssociationAborted">
			<summary>
				Association aborted.
			</summary>
		</member>
		<member name="F:Dvtk.Sessions.ReceiveReturnCode.SocketClosed">
			<summary>
				TCP/IP socket connection closed.
			</summary>
		</member>
		<member name="F:Dvtk.Sessions.ReceiveReturnCode.NoSocketConnection">
			<summary>
				TCP/IP socket connection not established.
			</summary>
		</member>
		<member name="T:Dvtk.Sessions.IDimseMessaging">
			<summary>
				Send and receive DICOM DIMSE level messages.
			</summary>
			<remarks>
				<p>
					The Dicom Validation Tool (DVT) supports send and receive of all DIcoM Service Element (DIMSE) messages.
					These messages are either send or received as request or response.
				</p>
				<p>
					<list type="bullet">
						<item>
							<term>Request Primitive</term>
							<description>Send DICOM request message</description>
						</item>
						<item>
							<term>Indication Primitive</term>
							<description>Received DICOM request message</description>
						</item>
						<item>
							<term>Response Primitive</term>
							<description>Send DICOM response message</description>
						</item>
						<item>
							<term>Confirmation Primitive</term>
							<description>Received DICOM response message</description>
						</item>
					</list>
				</p>
				<p>
					Information Object Definition (IOD) Support is provided by loading the appropriate definition files.
					The DIMSE Command / IOD combination must match one of the DEFINEs in the definition files.
				</p>
				<p>
					For supported Dimse commands <see cref="T:DvtkData.Dimse.DimseCommand"/>.
				</p>
			</remarks>
		</member>
		<member name="M:Dvtk.Sessions.IDimseMessaging.Send(DvtkData.Dimse.DicomMessage)">
			<summary>
				Send a dicom message from the Dicom Validation Tool (DVT) towards the System Under Test (SUT).
			</summary>
			<remarks>
				This corresponds with a DIMSE Request Primitive.
			</remarks>
			<param name="dicomMessage">
				Message of type <see cref="T:DvtkData.Dimse.DicomMessage"/>
			</param>
			<returns>
				The return code of the action.
			</returns>
			<exception cref="T:System.ArgumentNullException">
				Argument <c>dicomMessage</c> is a <see langword="null"/> reference.
			</exception>
		</member>
		<member name="M:Dvtk.Sessions.IDimseMessaging.Receive(DvtkData.Dimse.DicomMessage@)">
			<summary>
				Receive a DIMSE message from the System Under Test (SUT) to the Dicom Validation Tool (DVT).
			</summary>
			<remarks>
				<p>
					This corresponds with a DIMSE Confirmation Primitive.
				</p>
			</remarks>
			<param name="dicomMessage">
				Message of type <see cref="T:DvtkData.Dimse.DicomMessage"/>
			</param>
			<returns>
				The return code of the action.
			</returns>
		</member>
		<member name="M:Dvtk.Sessions.IDimseMessaging.Receive(DvtkData.Message@)">
			<summary>
				Receive a DIMSE or ACSE message from the System Under Test (SUT) to the Dicom Validation Tool (DVT).
			</summary>
			<p>
				This corresponds with a DIMSE Confirmation Primitive or ACSE response.
			</p>
			<p>
				This call allows handling of A_ABORT and A_RELEASE_RQ messages without
				causing an application exception.
			</p>
			<param name="message">
				Abstract message of type <see cref="T:DvtkData.Message"/> the user can
				use reflection <see cref="M:System.Object.GetType"/> to determine whether the message
				is of type <see cref="T:DvtkData.Dimse.DicomMessage"/> or <see cref="T:DvtkData.Dul.DulMessage"/>.
			</param>
			<returns>
				The return code of the action.
			</returns>
		</member>
		<member name="P:Dvtk.Sessions.IDimseMessaging.HasPendingDataInNetworkInputBuffer">
			<summary>
				The boolean indicates for any incoming data on the network while reading from TCP/IP socket.
			</summary>
		</member>
		<member name="T:Dvtk.Sessions.ValidationControlFlags">
			<summary>
				Flags to steer the validation process.
			</summary>
		</member>
		<member name="F:Dvtk.Sessions.ValidationControlFlags.None">
			<summary>
				No validation is done.
			</summary>
		</member>
		<member name="F:Dvtk.Sessions.ValidationControlFlags.UseValueRepresentations">
			<summary>
				Validation of attribute value representation. Syntax and format checking.
			</summary>
		</member>
		<member name="F:Dvtk.Sessions.ValidationControlFlags.UseDefinitions">
			<summary>
				Validation of dicom message objects (Information Object IO)
				against corresponding definitions (Information Object Definition IOD).
			</summary>
		</member>
		<member name="F:Dvtk.Sessions.ValidationControlFlags.UseReferences">
			<summary>
				Validation of dicom message objects against reference objects.
				These references are supplied by the user.
			</summary>
		</member>
		<member name="F:Dvtk.Sessions.ValidationControlFlags.All">
			<summary>
				Combination of UseValueRepresentations|UseDefinitions|UseReferences
			</summary>
		</member>
		<member name="T:Dvtk.Sessions.IDimseValidation">
			<summary>
				Access to commands that validate DIMSE messages.
			</summary>
			<remarks>
				DIMSE stands for DICOM Message Service Element.
				The DICOM application layer communication protocol.
			</remarks>
		</member>
		<member name="M:Dvtk.Sessions.IDimseValidation.Validate(DvtkData.Dimse.DicomMessage,DvtkData.Dimse.DicomMessage,Dvtk.Sessions.ValidationControlFlags)">
			<summary>
				Validate a network related DIMSE message.
			</summary>
			<param name="message">Message to be validated</param>
			<param name="referenceMessage">Message used as reference to compare with</param>
			<param name="validationControlFlags">Flags to steer the validation process</param>
			<returns>
				<see langword="true"/> if the validation process succeeded,
				<see langword="false"/> if the validation process did not succeed.
			</returns>
			<remarks>
				The return value does not indicate whether any validation reports are found.
				Only indicates whether the process succeeded.
			</remarks>
			<exception cref="T:System.ArgumentNullException">
				Argument <c>message</c> is a <see langword="null"/> reference.
			</exception>
		</member>
		<member name="M:Dvtk.Sessions.IDimseValidation.Validate(DvtkData.Dimse.DicomMessage,DvtkData.Dimse.DicomMessage,DvtkData.Dimse.DicomMessage,Dvtk.Sessions.ValidationControlFlags)">
			<summary>
				Validate a network related DIMSE message.
			</summary>
			<param name="message">Message to be validated</param>
			<param name="referenceMessage">Message used as reference to compare with</param>
			<param name="lastMessage">The last Message sent</param>
			It may be needed when a Message is received for validation purposes
			example C-FIND-RSP validation is better if we know what the C-FIND-RQ identifier contained
			<param name="validationControlFlags">Flags to steer the validation process</param>
			<returns>
				<see langword="true"/> if the validation process succeeded,
				<see langword="false"/> if the validation process did not succeed.
			</returns>
			<remarks>
				The return value does not indicate whether any validation reports are found.
				Only indicates whether the process succeeded.
			</remarks>
			<exception cref="T:System.ArgumentNullException">
				Argument <c>message</c> is a <see langword="null"/> reference.
			</exception>
		</member>
		<member name="T:Dvtk.Sessions.IDulMessaging">
			<summary>
				Dicom Validation Tool (DVT) supports both sending and receiving of all 6
				Association Control Service Element (ACSE) requests / responses:
			</summary>
			<remarks>
				SEND / RECEIVE ACSE Request and Responses:
				<list type="bullet">
					<item>Associate Request</item>
					<item>Associate Accept</item>
					<item>Associate Reject</item>
					<item>Release Request</item>
					<item>Release Response</item>
					<item>Abort Request</item>
				</list>
				Data Transfer is handled at the
				DIcom Message Service Element (DIMSE) / Information Object Definition (IOD) level - See DIMSE Messages.
			</remarks>
		</member>
		<member name="M:Dvtk.Sessions.IDulMessaging.Send(DvtkData.Dul.DulMessage)">
			<summary>
				Send a Dicom Upper Layer (DUL) message from the Dicom Validation Tool (DVT) towards the System Under Test (SUT).
			</summary>
			<remarks>
				This corresponds with a DUL Request Primitive.
			</remarks>
			<param name="dulMessage">
				Message of type <see cref="T:DvtkData.Dul.DulMessage"/>
			</param>
			<returns>
				The return code of the action.
			</returns>
			<exception cref="T:System.ArgumentNullException">
				Argument <c>dulMessage</c> is a <see langword="null"/> reference.
			</exception>
		</member>
		<member name="M:Dvtk.Sessions.IDulMessaging.Receive(DvtkData.Dul.DulMessage@)">
			<summary>
				Receive a Dicom Upper Layer (DUL) message from the System Under Test (SUT) to the Dicom Validation Tool (DVT).
			</summary>
			<remarks>
				<p>
					This corresponds with a DUL Confirmation Primitive.
				</p>
			</remarks>
			<param name="dulMessage">
				Message of type <see cref="T:DvtkData.Dul.DulMessage"/>
			</param>
			<returns>
				The return code of the action.
			</returns>
		</member>
		<member name="M:Dvtk.Sessions.IDulMessaging.Receive(DvtkData.Dul.A_ABORT@)">
			<summary>
				Receive a A_ABORT Dicom Upper Layer (DUL) message from the System Under Test (SUT) to the Dicom Validation Tool (DVT).
			</summary>
			<param name="A_ABORT_Message">
				Message of type <see cref="T:DvtkData.Dul.A_ABORT"/>
				<see langword="null"/> if a different message was received.
			</param>
			<returns>
			</returns>
		</member>
		<member name="M:Dvtk.Sessions.IDulMessaging.Receive(DvtkData.Dul.A_ASSOCIATE_AC@)">
			<summary>
				Receive a A_ASSOCIATE_AC Dicom Upper Layer (DUL) message from the System Under Test (SUT) to the Dicom Validation Tool (DVT).
			</summary>
			<param name="A_ASSOCIATE_AC_Message">
				Message of type <see cref="T:DvtkData.Dul.A_ASSOCIATE_AC"/>
				<see langword="null"/> if a different message was received.
			</param>
			<returns>
			</returns>
		</member>
		<member name="M:Dvtk.Sessions.IDulMessaging.Receive(DvtkData.Dul.A_ASSOCIATE_RJ@)">
			<summary>
				Receive a A_ASSOCIATE_RJ Dicom Upper Layer (DUL) message from the System Under Test (SUT) to the Dicom Validation Tool (DVT).
			</summary>
			<param name="A_ASSOCIATE_RJ_Message">
				Message of type <see cref="T:DvtkData.Dul.A_ASSOCIATE_RJ"/>
				<see langword="null"/> if a different message was received.
			</param>
			<returns>
			</returns>
		</member>
		<member name="M:Dvtk.Sessions.IDulMessaging.Receive(DvtkData.Dul.A_ASSOCIATE_RQ@)">
			<summary>
				Receive a A_ASSOCIATE_RQ Dicom Upper Layer (DUL) message from the System Under Test (SUT) to the Dicom Validation Tool (DVT).
			</summary>
			<param name="A_ASSOCIATE_RQ_Message">
				Message of type <see cref="T:DvtkData.Dul.A_ASSOCIATE_RQ"/>
				<see langword="null"/> if a different message was received.
			</param>
			<returns>
			</returns>
		</member>
		<member name="M:Dvtk.Sessions.IDulMessaging.Receive(DvtkData.Dul.A_RELEASE_RP@)">
			<summary>
				Receive a A_RELEASE_RP Dicom Upper Layer (DUL) message from the System Under Test (SUT) to the Dicom Validation Tool (DVT).
			</summary>
			<param name="A_RELEASE_RP_Message">
				Message of type <see cref="T:DvtkData.Dul.A_RELEASE_RP"/>
				<see langword="null"/> if a different message was received.
			</param>
			<returns>
			</returns>
		</member>
		<member name="M:Dvtk.Sessions.IDulMessaging.Receive(DvtkData.Dul.A_RELEASE_RQ@)">
			<summary>
				Receive a A_RELEASE_RQ Dicom Upper Layer (DUL) message from the System Under Test (SUT) to the Dicom Validation Tool (DVT).
			</summary>
			<param name="A_RELEASE_RQ_Message">
				Message of type <see cref="T:DvtkData.Dul.A_RELEASE_RQ"/>
				<see langword="null"/> if a different message was received.
			</param>
			<returns>
			</returns>
		</member>
		<member name="T:Dvtk.Sessions.IDulValidation">
			<summary>
				Access to commands that validate DULP messages.
			</summary>
			<remarks>
				DULP stands for DICOM Upper Layer Protocl.
				The DICOM sub-application layer communication protocol.
			</remarks>
		</member>
		<member name="M:Dvtk.Sessions.IDulValidation.Validate(DvtkData.Dul.DulMessage,DvtkData.Dul.DulMessage,Dvtk.Sessions.ValidationControlFlags)">
			<summary>
				Validate a network related DULP message.
			</summary>
			<param name="message">Message to be validated</param>
			<param name="referenceMessage">Message used as reference to compare with</param>
			<param name="validationControlFlags">Flags to steer the validation process</param>
			<returns>
				<see langword="true"/> if the validation process succeeded,
				<see langword="false"/> if the validation process did not succeed.
			</returns>
			<remarks>
				<p>
					The return value does not indicate whether any validation reports are found.
					Only indicates whether the process succeeded.
				</p>
				<p>
					Option; ValidationControlFlags.UseValueRepresentations is ignored.
				</p>
			</remarks>
			<exception cref="T:System.ArgumentNullException">
				Argument <c>message</c> is a <see langword="null"/> reference.
			</exception>
			<exception cref="T:System.ArgumentException">
				Runtime instance type of <c>message</c> and <c>referenceMessage</c> differ.
			</exception>
		</member>
		<member name="T:Dvtk.Sessions.IScriptExecution">
			<summary>
				Access to settings and commands execution of DICOM scripts
				with extensions <c>.DS</c> and <c>.DSS</c>.
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.IScriptExecution.ExecuteScript(System.String,System.Boolean)">
			<summary>
				Execute a Script File of type DICOMScript (.DS) / DICOMSuperScript (.DSS).
			</summary>
			<remarks>
				<p>
					The continue on error allows control over the DICOMSuperScript. The DICOMSuperScript will
					continue if one of the containing DICOMScripts fails on an error.
				</p>
				<p>
					A DICOMScript (.DS) describes a single Test Scenario.
					ACSE Requests and Responses and DIMSE Command / IOD combinations are
					used to perform a given Test Scenario.
				</p>
				<p>
					DVT interprets a DICOMScript in order to perform a Test Scenario.
				</p>
				<p>
					DICOMScripts should be written according to the role played by DVT:
				</p>
				<p>
					<list type="bullet">
						<item>
							<term>SCU</term>
							<description>write a DICOMScript that plays the SCU role in a given Test Scenario.</description>
						</item>
						<item>
							<term>SCP</term>
							<description>write a DICOMScript that plays the SCP role in a given Test Scenario.</description>
						</item>
						<item>
							<term>FSC</term>
							<description>write a DICOMScript that plays the FSC role in a given Test Scenario (creates Files-sets).</description>
						</item>
					</list>
				</p>
				<p>
					A DICOMSuperScript (.DSS) contains a list of DICOMScript (filenames) that together are used
					to describe a Test Scenario. DVT executes the DICOMScripts in the order given in
					the DICOMSuperScript.
				</p>
				<p>
					The DICOMSuperScript enables the reuse of certain DICOMScripts in various Test Scenarios
					- e.g., DICOMScript that makes an Association for CT Image Storage.
					It is possible to repeat the DICOMScript execution a number of times using the<br></br>
					<c>DO n dicomscript</c><br></br>
					instruction where ‘n’ is the number of times that dicomscript is to be executed.
				</p>
			</remarks>
			<param name="dicomScriptFileName">Script File of type DICOMScript (.DS) / DICOMSuperScript (.DSS)</param>
			<param name="continueOnError">Continue a DICOMSuperScript when one of the conatining DICOMScripts fails on an error.</param>
			<returns></returns>
		</member>
		<member name="M:Dvtk.Sessions.IScriptExecution.BeginExecuteScript(System.String,System.Boolean,System.AsyncCallback)">
			<summary>
				Asynchronously begin ExecuteScript.
			</summary>
			<param name="scriptFileName"></param>
			<param name="continueOnError"></param>
			<param name="cb"></param>
			<returns></returns>
		</member>
		<member name="M:Dvtk.Sessions.IScriptExecution.EndExecuteScript(System.IAsyncResult)">
			<summary>
				End asynchronous ExecuteScript
			</summary>
			<param name="ar"></param>
			<returns></returns>
		</member>
		<member name="M:Dvtk.Sessions.IScriptExecution.ParseScript(System.String)">
			<summary>
				Parse a Script File of type DICOMScript (.DS) / DICOMSuperScript (.DSS).
			</summary>
			<param name="dicomScriptFileName">Script File of type DICOMScript (.DS) / DICOMSuperScript (.DSS)</param>
			<returns>
				<see langword="false"/> if parsing fails.
			</returns>
		</member>
		<member name="M:Dvtk.Sessions.IScriptExecution.TerminateConnection">
			<summary>
				Can be used to stop a script execution.
			</summary>
			<returns></returns>
		</member>
		<member name="M:Dvtk.Sessions.IScriptExecution.ResetAssociation">
			<summary>
				Reset the state of the DULP Finite State Machine
				(to allow new Associations – Presentation Context ID is reset to 1).
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.IScriptExecution.DicomScriptRootDirectory">
			<summary>
				The directory serving as root directory from the DICOM Scripts.
			</summary>
			<exception cref="T:System.ArgumentNullException">
				Argument is a <see langword="null"/> reference.
			</exception>
			<exception cref="T:System.ArgumentException">Directory may not be an empty string. Use ".\" for current directory."</exception>
		</member>
		<member name="P:Dvtk.Sessions.IScriptExecution.DescriptionDirectory">
			<summary>
				The directory containing instructive and explanatory description files for the scripts.
			</summary>
		</member>
		<member name="T:Dvtk.Sessions.ScriptSession">
			<summary>
				Summary description for Session.
			</summary>
		</member>
		<member name="T:Dvtk.Sessions.Session">
			<summary>
				Base-class for test sessions within DVT.
			</summary>
			<remarks>
				Forms the base-class for sub-classes
				<list type="bullet">
					<item>
						<see cref="T:Dvtk.Sessions.ScriptSession"/>
					</item>
					<item>
						<see cref="T:Dvtk.Sessions.MediaSession"/>
					</item>
					<item>
						<see cref="T:Dvtk.Sessions.EmulatorSession"/>
					</item>
				</list>
			</remarks>
		</member>
		<member name="T:Dvtk.Sessions.IUserOutput">
			<summary>
				Access to commands that generate user output in the session results output.
			</summary>
			<remarks>
				May be used by the user to report user-specific results in the session results output.
				The user may perform additional validation checks which he/she wants to write to the
				results output.
			</remarks>
		</member>
		<member name="M:Dvtk.Sessions.IUserOutput.WriteError(System.String)">
			<summary>
				Write a user specific error to the output results.
			</summary>
			<param name="text">text for the output</param>
		</member>
		<member name="M:Dvtk.Sessions.IUserOutput.WriteWarning(System.String)">
			<summary>
				Write a user specific warning to the output results.
			</summary>
			<param name="text">text for the output</param>
		</member>
		<member name="M:Dvtk.Sessions.IUserOutput.WriteInformation(System.String)">
			<summary>
				Write a user specific information to the output results.
			</summary>
			<param name="text">text for the output</param>
		</member>
		<member name="M:Dvtk.Sessions.IUserOutput.WriteHtmlInformation(System.String)">
			<summary>
				Write a user specific HTML text to the output results.
			</summary>
			<param name="htmlText">HTML text for the output</param>
		</member>
		<member name="T:Dvtk.Sessions.IGeneralSessionSettings">
			<summary>
				Access to general session settings.
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.IGeneralSessionSettings.SessionFileName">
			<summary>
				File name with extension <c>.ses</c> used during load and save.
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.IGeneralSessionSettings.ResultsRootDirectory">
			<summary>
				Directory used to store results output.
			</summary>
			<exception cref="T:System.ArgumentNullException">
				Argument is a <see langword="null"/> reference.
			</exception>
			<exception cref="T:System.ArgumentException">Directory may not be an empty string. Use ".\" for current directory."</exception>
		</member>
		<member name="P:Dvtk.Sessions.IGeneralSessionSettings.DataDirectory">
			<summary>
				Directory used to store data generated by DVT - DCM files, etc.
			</summary>
			<exception cref="T:System.ArgumentNullException">
				Argument is a <see langword="null"/> reference.
			</exception>
			<exception cref="T:System.ArgumentException">Directory may not be an empty string. Use ".\" for current directory."</exception>
		</member>
		<member name="P:Dvtk.Sessions.IGeneralSessionSettings.Date">
			<summary>
				Date of test.
			</summary>
			<remarks>
				Reported in the results output.
			</remarks>
		</member>
		<member name="P:Dvtk.Sessions.IGeneralSessionSettings.SessionTitle">
			<summary>
				Title for the session.
			</summary>
			<remarks>
				Reported in the results output.
			</remarks>
		</member>
		<member name="P:Dvtk.Sessions.IGeneralSessionSettings.SessionId">
			<summary>
				Identification for the session.
			</summary>
			<remarks>
				Reported in the results output.
			</remarks>
		</member>
		<member name="P:Dvtk.Sessions.IGeneralSessionSettings.SoftwareVersions">
			<summary>
				Software versions for the System Under Test (SUT).
			</summary>
			<remarks>
				Reported in the results output.
			</remarks>
		</member>
		<member name="P:Dvtk.Sessions.IGeneralSessionSettings.TestedBy">
			<summary>
				Name of the tester.
			</summary>
			<remarks>
				Reported in the results output.
			</remarks>
		</member>
		<member name="P:Dvtk.Sessions.IGeneralSessionSettings.StorageMode">
			<summary>
				If the storage mode is set to as-media,
				DVT will store a received Image Dataset (Group 0008 up to and including Group 7FE0)
				in a file with the extension .DCM.
			</summary>
			<remarks>
				<p>
					The Image Dataset is stored in the .DCM file in the format
					described in DICOM - part 10.
				</p>
				<p>
					The File Preamble, DICOM Prefix and File Meta Information are added by DVT.
				</p>
				<p>
					The filename is generated from the Session ID and a media storage file index.
					The filename used for the media storage is recorded in the corresponding Results File.
					The following filenames are generated:
					<c>nnnIiiii.DCM</c> where <c>nnn</c> is the Session ID,
					<c>I</c> signifies image information and <c>iiii</c> is the file index.
				</p>
				Examples:
				<list type="bullet">
					<item>
						<term>1I0123.DCM</term>
						<description>Media Storage File 123 created in Test Session 1.</description>
					</item>
					<item>
						<term>4I0012.DCM</term>
						<description>Media Storage File 12 created in Test Session 4.</description>
					</item>
				</list>
			</remarks>
		</member>
		<member name="P:Dvtk.Sessions.IGeneralSessionSettings.Manufacturer">
			<summary>
				Manufacturer for the System Under Test (SUT).
			</summary>
			<remarks>
				Reported in the results output.
			</remarks>
		</member>
		<member name="P:Dvtk.Sessions.IGeneralSessionSettings.ModelName">
			<summary>
				Model name for the System Under Test (SUT).
			</summary>
			<remarks>
				Reported in the results output.
			</remarks>
		</member>
		<member name="P:Dvtk.Sessions.IGeneralSessionSettings.LogLevelFlags">
			<summary>
				Set LogLevel Enabled flags.
			</summary>
			<summary>
				Enabled loglevels
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.IGeneralSessionSettings.AutoCreateDirectory">
			<summary>
				Determines if a directory is created when this does not yet existing, when writing a Dicom file.
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.IGeneralSessionSettings.ContinueOnError">
			<summary>
				Determines of execution should continue when an error has occured.
			</summary>
		</member>
		<member name="T:Dvtk.Sessions.ISessionFileManagement">
			<summary>
				Access to session file management.
			</summary>
			<remarks>
				Session settings may be written to a file with extension <c>.ses</c>.
				These settings can later be used to load a new session by means of;
				<list type="bullet">
					<item>
						<see cref="M:Dvtk.Sessions.ScriptSession.LoadFromFile(System.String)"/>
					</item>
					<item>
						<see cref="M:Dvtk.Sessions.EmulatorSession.LoadFromFile(System.String)"/>
					</item>
					<item>
						<see cref="M:Dvtk.Sessions.MediaSession.LoadFromFile(System.String)"/>
					</item>
				</list>
			</remarks>
		</member>
		<member name="M:Dvtk.Sessions.ISessionFileManagement.SaveToFile">
			<summary>
				Save session settings to file with extension <c>.ses</c>.
			</summary>
		</member>
		<member name="T:Dvtk.Sessions.IValidationSettings">
			<summary>
				Access to validation settings.
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.IValidationSettings.StrictValidation">
			<summary>
				The StrictValidation option,
				when enabled (set true),
				causes DVT to perform a strict check between the
				received ACSE and DICOM messages and those programmed (expected) in the DICOMScripts.
				If any parameter of the received message does not match that programmed, then DVT reports a FAILED validation and aborts further DICOMScript interpretation.
				If the STRICT-VALIDATION flag is disabled (set false),
				then DVT will WARN the User when a mismatch occurs between received
				and programmed values.
				DVT will continue interpreting the DICOMScript.
			</summary>
			<remarks>
				This feature is particularly useful when the User wishes to test
				a specific (range of) SOP Class(es).
				Any additional SOP Classes proposed by the Product
				will be automatically rejected by DVT, allowing the User
				to concentrate on the SOP Class(es) of interest to the Test Scenario.
			</remarks>
		</member>
		<member name="P:Dvtk.Sessions.IValidationSettings.DetailedValidationResults">
			<summary>
				Indicate whether DVT should produce Detailed Validation Results or not.
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.IValidationSettings.SummaryValidationResults">
			<summary>
				Indicate whether DVT should produce Summary Validation Results or not.
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.IValidationSettings.IncludeType3NotPresentInResults">
			<summary>
				Indicate whether DVT should include Type 3 attributes in the validation
				results that are not present in the dataset being validated or not.
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.IValidationSettings.DumpAttributesOfRefFiles">
			<summary>
				Indicate whether DVT should include Type 3 attributes in the validation
				results that are not present in the dataset being validated or not.
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.IValidationSettings.UnVrDefinitionLookUp">
			<summary>
				Indicate whether DVT should try to look up any attribute decoded with an
				explicit VR of UN for the real VR - and use this real VR for further attribute
				value decoding and validation.
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.IValidationSettings.ValidateReferencedFile">
			<summary>
				Determines if the referenced files should be validated when validating a DICOMDIR.
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.IValidationSettings.DisplayConditionText">
			<summary>
				Determines if conditional text will be displayed in summary result.
			</summary>
		</member>
		<member name="T:Dvtk.Sessions.IDicomFile">
			<summary>
				Access to commands that read and write Dicom(DCM) files.
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.IDicomFile.ReadFile(System.String)">
			<summary>
				Read a (persistent) Media Storage file into dicom file object.
			</summary>
			<remarks>
				The file typically has the extension <c>.DCM</c>.
			</remarks>
			<param name="mediaFileName">file name to read from</param>
			<returns>dicom file object read</returns>
			<exception cref="T:System.ArgumentNullException">
				Argument <c>mediaFileName</c> is a <see langword="null"/> reference.
			</exception>
		</member>
		<member name="M:Dvtk.Sessions.IDicomFile.WriteFile(DvtkData.Media.DicomFile,System.String)">
			<summary>
				Write a dicom file object to a (persistent) Media Storage file.
			</summary>
			<param name="file">dicom file object to write</param>
			<param name="mediaFileName">file name to write to</param>
			<returns></returns>
			<exception cref="T:System.ArgumentNullException">
				Argument <c>file</c> is a <see langword="null"/> reference.
			</exception>
			<exception cref="T:System.ArgumentNullException">
				Argument <c>mediaFileName</c> is a <see langword="null"/> reference.
			</exception>
		</member>
		<member name="T:Dvtk.Sessions.IDicomDir">
			<summary>
				Access to commands that read and write Dicomdir files.
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.IDicomDir.ReadDicomdir(System.String)">
			<summary>
				Read a (persistent) Dicomdir into dicomdir object.
			</summary>
			<remarks>
				The file typically has no extension.
			</remarks>
			<param name="mediaFileName">file name to read from</param>
			<returns>dicomdir object read</returns>
			<exception cref="T:System.ArgumentNullException">
				Argument <c>mediaFileName</c> is a <see langword="null"/> reference.
			</exception>
		</member>
		<member name="M:Dvtk.Sessions.IDicomDir.WriteDicomdir(DvtkData.Media.DicomDir,System.String)">
			<summary>
				Write a dicomdir object to a (persistent) Media Dicomdir file.
			</summary>
			<param name="file">dicomdir object to write</param>
			<param name="mediaFileName">file name to write to</param>
			<returns></returns>
			<exception cref="T:System.ArgumentNullException">
				Argument <c>file</c> is a <see langword="null"/> reference.
			</exception>
			<exception cref="T:System.ArgumentNullException">
				Argument <c>mediaFileName</c> is a <see langword="null"/> reference.
			</exception>
		</member>
		<member name="M:Dvtk.Sessions.Session._Initialize">
			<summary>
				Should be called by specialisation sub-class from the end of constructor.
			</summary>
			<remarks>
				Precondition: m_MBaseSession should have been set by sub-class.
			</remarks>
		</member>
		<member name="M:Dvtk.Sessions.Session.GetExpandedResultsFileNameHelper(System.String)">
			<summary>
				Expand Results File Name : Helper
			</summary>
			<param name="fileName"></param>
			<returns></returns>
		</member>
		<member name="M:Dvtk.Sessions.Session.StartResultsGatheringWithExpandedFileNaming(System.String)">
			<summary>
				Start the gathering of validation results output.
			</summary>
			<param name="fileName">The location of the file where you want to save.</param>
			<remarks>
				<p>
					Generates filename expansions that conform to the filenaming used within
					the XSLT of DVT.
				</p>
				<p>
					This ensures that results are browsable within the
					GUI application.
				</p>
			</remarks>
		</member>
		<member name="M:Dvtk.Sessions.Session.StartResultsGathering(System.String)">
			<summary>
				Start the gathering of validation results output.
			</summary>
			<param name="fileName">The location of the file where you want to save.</param>
		</member>
		<member name="M:Dvtk.Sessions.Session.CopySettingsFrom(Dvtk.Sessions.Session)">
			<summary>
				Copy all settings from the supplied session to this session.
			</summary>
			<param name="session">The session to copy the settings from.</param>
		</member>
		<member name="M:Dvtk.Sessions.Session.EndResultsGathering">
			<summary>
				Save the gathered validation results output to the specified stream.
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.Session.WriteError(System.String)">
			<summary>
				<see cref="M:Dvtk.Sessions.IUserOutput.WriteError(System.String)"/>
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.Session.WriteWarning(System.String)">
			<summary>
				<see cref="M:Dvtk.Sessions.IUserOutput.WriteWarning(System.String)"/>
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.Session.WriteInformation(System.String)">
			<summary>
				<see cref="M:Dvtk.Sessions.IUserOutput.WriteInformation(System.String)"/>
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.Session.WriteHtmlInformation(System.String)">
			<summary>
				<see cref="M:Dvtk.Sessions.IUserOutput.WriteHtmlInformation(System.String)"/>
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.Session.WriteHtml(System.String,System.Boolean,System.Boolean)">
			<summary>
				Write HTML in the result file
			</summary>
			<param name="htmlText"></param>
			<param name="writeToSummary"></param>
			<param name="writeToDetail"></param>
		</member>
		<member name="M:Dvtk.Sessions.Session.WriteMessageComparisonResults(DvtkData.ComparisonResults.MessageComparisonResults)">
			<summary>
				<see cref="M:Dvtk.Sessions.IValidationOutput.WriteMessageComparisonResults(DvtkData.ComparisonResults.MessageComparisonResults)"/>
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.Session.WriteValidationError(System.String)">
			<summary>
				<see cref="M:Dvtk.Sessions.IValidationOutput.WriteValidationError(System.String)"/>
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.Session.WriteValidationWarning(System.String)">
			<summary>
				<see cref="M:Dvtk.Sessions.IValidationOutput.WriteValidationWarning(System.String)"/>
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.Session.WriteValidationInformation(System.String)">
			<summary>
				<see cref="M:Dvtk.Sessions.IValidationOutput.WriteValidationInformation(System.String)"/>
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.Session._Convert(Dvtk.Sessions.StorageMode)">
			<summary>
				Conversion Dvtk type => Wrappers type
			</summary>
			<param name="value">in</param>
			<returns>out</returns>
		</member>
		<member name="M:Dvtk.Sessions.Session._Convert(Wrappers.StorageMode)">
			<summary>
				Conversion Wrappers type => Dvtk type
			</summary>
			<param name="value">in</param>
			<returns>out</returns>
		</member>
		<member name="M:Dvtk.Sessions.Session.SaveToFile">
			<summary>
				<see cref="M:Dvtk.Sessions.ISessionFileManagement.SaveToFile"/>
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.Session.WriteFile(DvtkData.Media.DicomFile,System.String)">
			<summary>
				<see cref="M:Dvtk.Sessions.IDicomFile.WriteFile(DvtkData.Media.DicomFile,System.String)"/>
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.Session.ReadFile(System.String)">
			<summary>
				<see cref="M:Dvtk.Sessions.IDicomFile.ReadFile(System.String)"/>
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.Session.WriteDicomdir(DvtkData.Media.DicomDir,System.String)">
			<summary>
				<see cref="M:Dvtk.Sessions.IDicomDir.WriteDicomdir(DvtkData.Media.DicomDir,System.String)"/>
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.Session.ReadDicomdir(System.String)">
			<summary>
				<see cref="M:Dvtk.Sessions.IDicomDir.ReadDicomdir(System.String)"/>
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.Session.ResultsGatheringPaused">
			<summary>
				Pause the gathering of validation results output.
			</summary>
			<remarks>
				<see langword="true"/> to pause and <see langword="false"/> to continue.
			</remarks>
		</member>
		<member name="P:Dvtk.Sessions.Session.ValidationResultsForDVT">
			<summary>
				Boolean to make sure validation is invoked by DVT
			</summary>
		</member>
		<member name="E:Dvtk.Sessions.Session.ActivityReportEvent">
			<summary>
				Occurs when a activity report is generated by the application.
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.Session.CountingTarget">
			<summary>
				Access to counting target.
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.Session.NrOfErrors">
			<summary>
				Number of Errors
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.Session.NrOfWarnings">
			<summary>
				Number of Warnings
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.Session.NrOfValidationErrors">
			<summary>
				Number of NrOfValidationErrors
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.Session.NrOfUserErrors">
			<summary>
				Number of NrOfUserErrors
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.Session.NrOfGeneralErrors">
			<summary>
				Number of NrOfGeneralErrors
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.Session.NrOfValidationWarnings">
			<summary>
				Number of NrOfValidationWarnings
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.Session.NrOfUserWarnings">
			<summary>
				Number of NrOfUserWarnings
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.Session.NrOfGeneralWarnings">
			<summary>
				Number of NrOfGeneralWarnings
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.Session.DefinitionManagement">
			<summary>
				Access to definition file management.
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.Session.SessionFileName">
			<summary>
				<see cref="P:Dvtk.Sessions.IGeneralSessionSettings.SessionFileName"/>
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.Session.ResultsRootDirectory">
			<summary>
				<see cref="P:Dvtk.Sessions.IGeneralSessionSettings.ResultsRootDirectory"/>
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.Session.DataDirectory">
			<summary>
				<see cref="P:Dvtk.Sessions.IGeneralSessionSettings.DataDirectory"/>
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.Session.Date">
			<summary>
				<see cref="P:Dvtk.Sessions.IGeneralSessionSettings.Date"/>
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.Session.SessionTitle">
			<summary>
				<see cref="P:Dvtk.Sessions.IGeneralSessionSettings.SessionTitle"/>
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.Session.SessionId">
			<summary>
				<see cref="P:Dvtk.Sessions.IGeneralSessionSettings.SessionId"/>
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.Session.SoftwareVersions">
			<summary>
				<see cref="P:Dvtk.Sessions.IGeneralSessionSettings.SoftwareVersions"/>
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.Session.TestedBy">
			<summary>
				<see cref="P:Dvtk.Sessions.IGeneralSessionSettings.TestedBy"/>
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.Session.StorageMode">
			<summary>
				<see cref="P:Dvtk.Sessions.IGeneralSessionSettings.StorageMode"/>
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.Session.Manufacturer">
			<summary>
				<see cref="P:Dvtk.Sessions.IGeneralSessionSettings.Manufacturer"/>
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.Session.ModelName">
			<summary>
				<see cref="P:Dvtk.Sessions.IGeneralSessionSettings.ModelName"/>
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.Session.LogLevelFlags">
			<summary>
				<see cref="P:Dvtk.Sessions.IGeneralSessionSettings.LogLevelFlags"/>
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.Session.AutoCreateDirectory">
			<summary>
				<see cref="P:Dvtk.Sessions.IGeneralSessionSettings.AutoCreateDirectory"/>
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.Session.ContinueOnError">
			<summary>
				<see cref="P:Dvtk.Sessions.IGeneralSessionSettings.ContinueOnError"/>
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.Session.StrictValidation">
			<summary>
				<see cref="P:Dvtk.Sessions.IValidationSettings.StrictValidation"/>
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.Session.DetailedValidationResults">
			<summary>
				<see cref="P:Dvtk.Sessions.IValidationSettings.DetailedValidationResults"/>
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.Session.SummaryValidationResults">
			<summary>
				<see cref="P:Dvtk.Sessions.IValidationSettings.SummaryValidationResults"/>
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.Session.IncludeType3NotPresentInResults">
			<summary>
				<see cref="P:Dvtk.Sessions.IValidationSettings.IncludeType3NotPresentInResults"/>
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.Session.ValidateReferencedFile">
			<summary>
				<see cref="P:Dvtk.Sessions.IValidationSettings.ValidateReferencedFile"/>
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.Session.DumpAttributesOfRefFiles">
			<summary>
				<see cref="P:Dvtk.Sessions.IValidationSettings.DumpAttributesOfRefFiles"/>
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.Session.UnVrDefinitionLookUp">
			<summary>
				<see cref="P:Dvtk.Sessions.IValidationSettings.DumpAttributesOfRefFiles"/>
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.Session.DisplayConditionText">
			<summary>
				<see cref="P:Dvtk.Sessions.IValidationSettings.DisplayConditionText"/>
			</summary>
		</member>
		<member name="T:Dvtk.Sessions.IDataSetEncodingSettings">
			<summary>
				Properties affecting the DataSet encoding for the DIMSE Dicom communication.
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.IDataSetEncodingSettings.AutoType2Attributes">
			<summary>
				The AutoType2Attributes option,
				causes DVT to add any Type 2 Attributes (with a zero-length)
				to the defined Dataset before sending it to the Product.
			</summary>
			<remarks>
				<p>
					DVT consults to Definition File corresponding to the Dataset in
					order to check the Dataset “completeness” before sending it to the Product.
					This feature ensures that the output produced by DVT conforms to
					the Dataset definition without the User having to explicitly set any
					zero-length Attributes.
				</p>
			</remarks>
		</member>
		<member name="P:Dvtk.Sessions.IDataSetEncodingSettings.DefineSqLength">
			<summary>
				The DefineSqLength option,
				is used to make DVT encode explicit length Sequences when sending messages.
			</summary>
			<remarks>
				<p>
					Explicit lengths are computed for both the Sequence and each Item
					present within the Sequence.
				</p>
				<p>
					By default DVT uses the undefined length encoding.
				</p>
			</remarks>
		</member>
		<member name="P:Dvtk.Sessions.IDataSetEncodingSettings.AddGroupLength">
			<summary>
				The AddGroupLength option,
				is used to have DVT add Group Length attributes to all
				Groups found in each message sent.
			</summary>
			<remarks>
				By default DVT does not encode Group Length attributes
				(except for the Command Group Length).
			</remarks>
		</member>
		<member name="T:Dvtk.Sessions.ISecure">
			<summary>
				Access to TCP/IP security settings, certificate handling and credential handling.
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.ISecure.CreateSecurityCertificateHandler">
			<summary>
				Creates a class (interface) to handle certificate files for the current session.
			</summary>
			<returns>Interface to manipulate certificate files</returns>
		</member>
		<member name="M:Dvtk.Sessions.ISecure.CreateSecurityCredentialHandler">
			<summary>
				Creates a class (interface) to handle credential files for the current session.
			</summary>
			<returns>Interface to manipulate credential files</returns>
		</member>
		<member name="M:Dvtk.Sessions.ISecure.DisposeSecurityCertificateHandler">
			<summary>
				Dispose a class (interface) to handle certificate files for the current session.
			</summary>
			<remarks>
				Signal the DVTK component that the security certificate handler is no
				longer used by the application.
			</remarks>
		</member>
		<member name="M:Dvtk.Sessions.ISecure.DisposeSecurityCredentialHandler">
			<summary>
				Dispose a class (interface) to handle credential files for the current session.
			</summary>
			<remarks>
				Signal the DVTK component that the security credential handler is no
				longer used by the application.
			</remarks>
		</member>
		<member name="P:Dvtk.Sessions.ISecure.SecuritySettings">
			<summary>
				TCP/IP security settings
			</summary>
		</member>
		<member name="T:Dvtk.Sessions.IConfigurableDvt">
			<summary>
				Access to Dicom Validation Tool (DVT) system settings.
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.IConfigurableDvt.DvtSystemSettings">
			<summary>
				Settings specific to the DVT machine node.
			</summary>
		</member>
		<member name="T:Dvtk.Sessions.IConfigurableSut">
			<summary>
				Access to System Under Test (SUT) system settings.
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.IConfigurableSut.SutSystemSettings">
			<summary>
				Settings specific to the SUT machine node.
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.ScriptSession.CopySettingsFrom(Dvtk.Sessions.ScriptSession)">
			<summary>
				Copy all settings from the supplied ScriptSession to this ScriptSession.
			</summary>
			<param name="scriptSession">The ScriptSession to copy the settings from.</param>
		</member>
		<member name="M:Dvtk.Sessions.ScriptSession.CreateSecurityCertificateHandler">
			<summary>
				<see cref="M:Dvtk.Sessions.ISecure.CreateSecurityCertificateHandler"/>
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.ScriptSession.DisposeSecurityCertificateHandler">
			<summary>
				<see cref="M:Dvtk.Sessions.ISecure.DisposeSecurityCertificateHandler"/>
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.ScriptSession.CreateSecurityCredentialHandler">
			<summary>
				<see cref="M:Dvtk.Sessions.ISecure.CreateSecurityCredentialHandler"/>
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.ScriptSession.DisposeSecurityCredentialHandler">
			<summary>
				<see cref="M:Dvtk.Sessions.ISecure.DisposeSecurityCredentialHandler"/>
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.ScriptSession.Send(DvtkData.Dimse.DicomMessage)">
			<summary>
				<see cref="M:Dvtk.Sessions.IDimseMessaging.Send(DvtkData.Dimse.DicomMessage)"/>
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.ScriptSession.Send(DvtkData.Dimse.DicomMessage,System.Int32)">
			<summary>
				<see cref="M:Dvtk.Sessions.IDimseMessaging.Send(DvtkData.Dimse.DicomMessage)"/>
				With the new UPS SOP classes (Unified Procedure Step – Push SOP Class, Unified Procedure Step –
				Watch SOP Class, Unified Procedure Step – Pull SOP Class, Unified Procedure Step – Event SOP Class),
				fully specified in frozen supplement 96, it is now possible to send a DICOM message with an affected
				or requested SOP Class UID attribute that is different from the abstract syntax UID in an accepted
				presentation context.
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.ScriptSession._Convert(Wrappers.ReceiveReturnCode)">
			<summary>
				Conversion Wrappers type => Dvtk type
			</summary>
			<param name="receiveReturnCode">in</param>
			<returns>out</returns>
		</member>
		<member name="M:Dvtk.Sessions.ScriptSession._Convert(Wrappers.SendReturnCode)">
			<summary>
				Conversion Wrappers type => Dvtk type
			</summary>
			<param name="sendReturnCode">in</param>
			<returns>out</returns>
		</member>
		<member name="M:Dvtk.Sessions.ScriptSession.Receive(DvtkData.Dimse.DicomMessage@)">
			<summary>
				<see cref="M:Dvtk.Sessions.IDimseMessaging.Receive(DvtkData.Dimse.DicomMessage@)"/>
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.ScriptSession.Receive(DvtkData.Message@)">
			<summary>
				<see cref="M:Dvtk.Sessions.IDimseMessaging.Receive(DvtkData.Message@)"/>
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.ScriptSession.Validate(DvtkData.Dimse.DicomMessage,DvtkData.Dimse.DicomMessage,Dvtk.Sessions.ValidationControlFlags)">
			<summary>
				<see cref="M:Dvtk.Sessions.IDimseValidation.Validate(DvtkData.Dimse.DicomMessage,DvtkData.Dimse.DicomMessage,Dvtk.Sessions.ValidationControlFlags)"/>
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.ScriptSession.Validate(DvtkData.Dimse.DicomMessage,DvtkData.Dimse.DicomMessage,DvtkData.Dimse.DicomMessage,Dvtk.Sessions.ValidationControlFlags)">
			<summary>
				<see cref="M:Dvtk.Sessions.IDimseValidation.Validate(DvtkData.Dimse.DicomMessage,DvtkData.Dimse.DicomMessage,DvtkData.Dimse.DicomMessage,Dvtk.Sessions.ValidationControlFlags)"/>
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.ScriptSession.Validate(DvtkData.Dul.DulMessage,DvtkData.Dul.DulMessage,Dvtk.Sessions.ValidationControlFlags)">
			<summary>
				<see cref="M:Dvtk.Sessions.IDulValidation.Validate(DvtkData.Dul.DulMessage,DvtkData.Dul.DulMessage,Dvtk.Sessions.ValidationControlFlags)"/>
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.ScriptSession.Send(DvtkData.Dul.DulMessage)">
			<summary>
				<see cref="M:Dvtk.Sessions.IDulMessaging.Send(DvtkData.Dul.DulMessage)"/>
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.ScriptSession.Receive(DvtkData.Dul.DulMessage@)">
			<summary>
				<see cref="M:Dvtk.Sessions.IDulMessaging.Receive(DvtkData.Dul.DulMessage@)"/>
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.ScriptSession.Receive(DvtkData.Dul.A_ABORT@)">
			<summary>
				<see cref="M:Dvtk.Sessions.IDulMessaging.Receive(DvtkData.Dul.A_ABORT@)"/>
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.ScriptSession.Receive(DvtkData.Dul.A_ASSOCIATE_AC@)">
			<summary>
				<see cref="M:Dvtk.Sessions.IDulMessaging.Receive(DvtkData.Dul.A_ASSOCIATE_AC@)"/>
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.ScriptSession.Receive(DvtkData.Dul.A_ASSOCIATE_RJ@)">
			<summary>
				<see cref="M:Dvtk.Sessions.IDulMessaging.Receive(DvtkData.Dul.A_ASSOCIATE_RJ@)"/>
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.ScriptSession.Receive(DvtkData.Dul.A_ASSOCIATE_RQ@)">
			<summary>
				<see cref="M:Dvtk.Sessions.IDulMessaging.Receive(DvtkData.Dul.A_ASSOCIATE_RQ@)"/>
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.ScriptSession.Receive(DvtkData.Dul.A_RELEASE_RP@)">
			<summary>
				<see cref="M:Dvtk.Sessions.IDulMessaging.Receive(DvtkData.Dul.A_RELEASE_RP@)"/>
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.ScriptSession.Receive(DvtkData.Dul.A_RELEASE_RQ@)">
			<summary>
				<see cref="M:Dvtk.Sessions.IDulMessaging.Receive(DvtkData.Dul.A_RELEASE_RQ@)"/>
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.ScriptSession.ExecuteScript(System.String,System.Boolean)">
			<summary>
				<see cref="M:Dvtk.Sessions.IScriptExecution.ExecuteScript(System.String,System.Boolean)"/>
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.ScriptSession.BeginExecuteScript(System.String,System.Boolean,System.AsyncCallback)">
			<summary>
				<see cref="M:Dvtk.Sessions.IScriptExecution.BeginExecuteScript(System.String,System.Boolean,System.AsyncCallback)"/>
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.ScriptSession.EndExecuteScript(System.IAsyncResult)">
			<summary>
				<see cref="M:Dvtk.Sessions.IScriptExecution.EndExecuteScript(System.IAsyncResult)"/>
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.ScriptSession.ParseScript(System.String)">
			<summary>
				<see cref="M:Dvtk.Sessions.IScriptExecution.ParseScript(System.String)"/>
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.ScriptSession.TerminateConnection">
			<summary>
				<see cref="M:Dvtk.Sessions.IScriptExecution.TerminateConnection"/>
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.ScriptSession.ResetAssociation">
			<summary>
				<see cref="M:Dvtk.Sessions.IScriptExecution.ResetAssociation"/>
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.ScriptSession.#ctor">
			<summary>
				Finalizer
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.ScriptSession.LoadFromFile(System.String)">
			<summary>
				Load a new session from file.
			</summary>
			<param name="sessionFileName">
				file with extension <c>.ses</c>.
			</param>
			<returns>new session</returns>
			<remarks>
				Session settings may be written to a file with extension <c>.ses</c> by
				means of <see cref="T:Dvtk.Sessions.ISessionFileManagement"/>.
			</remarks>
			<exception cref="T:System.ArgumentNullException">
				Argument <c>sessionFileName</c> is a <see langword="null"/> reference.
			</exception>
		</member>
		<member name="M:Dvtk.Sessions.ScriptSession.Finalize">
			<summary>
				Finalizer
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.ScriptSession.ComparePixelData(DvtkData.Dimse.DicomMessage,DvtkData.Dimse.DicomMessage)">
			<summary>
				Method for comparing pixel data in two DICOM messages
			</summary>
			<param name="message"></param>
			<param name="referenceMessage"></param>
			<returns></returns>
		</member>
		<member name="F:Dvtk.Sessions.ScriptSession.ConfirmInteraction">
			<summary>
				Callback: Called when the application wants a confirm action by the user.
			</summary>
			<remarks>
				<p>
					This is the callback proxy to which a new callback stub may be assigned.
					<see cref="T:Dvtk.Sessions.ScriptSession.ConfirmInteractionCallBack"/>
				</p>
			</remarks>
			<example>
				This sample shows how to assign a new callback implementation.
				<code>
					// implementation confirm interaction
					static public void MyConfirmInteractionAuto
					{
					// My action to confirm. For instance MessageBox interaction.
					System.Windows.Forms.MessageBox.Show("Click to continue.");
					return;
					}

					// Code against session.
					ScriptSession ses;
					...
					// Assign your own confirm interaction callback.
					ses.ConfirmInteraction = new ConfirmInteractionCallBack(MyConfirmInteractionAuto);
				</code>
			</example>
		</member>
		<member name="M:Dvtk.Sessions.ScriptSession.ConfirmInteractionAuto">
			<summary>
				Stub callback implementation for <see cref="T:Dvtk.Sessions.ScriptSession.ConfirmInteractionCallBack"/>.
				Results in no interaction with the user.
				Auto confirms all requestes by the application.
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.ScriptSession.ConfirmInteractionForms">
			<summary>
				Stub callback implementation for <see cref="T:Dvtk.Sessions.ScriptSession.ConfirmInteractionCallBack"/>.
				Results in a windows messagebox towards the user.
			</summary>
			<remarks>
				The user needs to click the messagebox to continue the application.
			</remarks>
		</member>
		<member name="M:Dvtk.Sessions.ScriptSession.ConfirmInteractionConsole">
			<summary>
				Stub callback implementation for <see cref="T:Dvtk.Sessions.ScriptSession.ConfirmInteractionCallBack"/>.
				Results in a console input request from the user.
			</summary>
			<remarks>
				The user needs press the keyboard to continue the application.
			</remarks>
		</member>
		<member name="P:Dvtk.Sessions.ScriptSession.DvtSystemSettings">
			<summary>
				<see cref="P:Dvtk.Sessions.IConfigurableDvt.DvtSystemSettings"/>
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.ScriptSession.SutSystemSettings">
			<summary>
				<see cref="P:Dvtk.Sessions.IConfigurableSut.SutSystemSettings"/>
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.ScriptSession.SecuritySettings">
			<summary>
				<see cref="P:Dvtk.Sessions.ISecure.SecuritySettings"/>
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.ScriptSession.HasPendingDataInNetworkInputBuffer">
			<summary>
				<see cref="P:Dvtk.Sessions.IDimseMessaging.HasPendingDataInNetworkInputBuffer"/>
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.ScriptSession.AutoType2Attributes">
			<summary>
				<see cref="P:Dvtk.Sessions.IDataSetEncodingSettings.AutoType2Attributes"/>
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.ScriptSession.DefineSqLength">
			<summary>
				<see cref="P:Dvtk.Sessions.IDataSetEncodingSettings.DefineSqLength"/>
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.ScriptSession.AddGroupLength">
			<summary>
				<see cref="P:Dvtk.Sessions.IDataSetEncodingSettings.AddGroupLength"/>
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.ScriptSession.DicomScriptRootDirectory">
			<summary>
				<see cref="P:Dvtk.Sessions.IScriptExecution.DicomScriptRootDirectory"/>
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.ScriptSession.DescriptionDirectory">
			<summary>
				<see cref="P:Dvtk.Sessions.IScriptExecution.DescriptionDirectory"/>
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.ScriptSession.IsDataTransferExplicit">
			<summary>
				Used for display VR in result
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.ScriptSession.ConfirmInteractionOption">
			<summary>
				Simplifies the selection of the <see cref="F:Dvtk.Sessions.ScriptSession.ConfirmInteraction"/>.
			</summary>
			<remarks>
				Select the required confirmation interaction from the
				options <see cref="T:Dvtk.Sessions.ScriptSession.ConfirmInteractionOptions"/>.
			</remarks>
		</member>
		<member name="T:Dvtk.Sessions.ScriptSession.AsyncExecuteScriptDelegate">
			<summary>
				Asynchronous ExecuteScript delegate.
			</summary>
			<remarks>
				The delegate must have the same signature as the method you want to call asynchronously.
			</remarks>
		</member>
		<member name="T:Dvtk.Sessions.ScriptSession.ConfirmInteractionCallBack">
			<summary>
				Callback: Called when the application wants a confirm action by the user.
			</summary>
			<remarks>
				<p>
					This is the callback stub declaration.
				</p>
				<p>
					The callback can be used to override the confirmation interaction.
					<see cref="F:Dvtk.Sessions.ScriptSession.ConfirmInteraction"/>
				</p>
				<p>
					Currently predefined confirmation interactions:
					<list type="bullet">
						<item>
							<see cref="M:Dvtk.Sessions.ScriptSession.ConfirmInteractionForms"/> - Default
						</item>
						<item>
							<see cref="M:Dvtk.Sessions.ScriptSession.ConfirmInteractionAuto"/>
						</item>
						<item>
							<see cref="M:Dvtk.Sessions.ScriptSession.ConfirmInteractionConsole"/>
						</item>
					</list>
					These predefined interaction may be used as stubs (see <see cref="F:Dvtk.Sessions.ScriptSession.ConfirmInteraction"/>).
				</p>
			</remarks>
		</member>
		<member name="T:Dvtk.Sessions.ScriptSession.ConfirmInteractionOptions">
			<summary>
				Selection option for the callback <see cref="F:Dvtk.Sessions.ScriptSession.ConfirmInteraction"/>.
			</summary>
		</member>
		<member name="F:Dvtk.Sessions.ScriptSession.ConfirmInteractionOptions.AutoConfirm">
			<summary>
				Installs callback <see cref="M:Dvtk.Sessions.ScriptSession.ConfirmInteractionAuto"/>
			</summary>
		</member>
		<member name="F:Dvtk.Sessions.ScriptSession.ConfirmInteractionOptions.Forms">
			<summary>
				Installs callback <see cref="M:Dvtk.Sessions.ScriptSession.ConfirmInteractionForms"/>
			</summary>
		</member>
		<member name="F:Dvtk.Sessions.ScriptSession.ConfirmInteractionOptions.Console">
			<summary>
				Installs callback <see cref="M:Dvtk.Sessions.ScriptSession.ConfirmInteractionConsole"/>
			</summary>
		</member>
		<member name="T:Dvtk.AppUnloadListener">
			<summary>
				This internal abstract class (Singleton) is introduced as workaround for
				<p>
					BUG: AppDomainUnloadedException is thrown when you call a virtual
					destructor on a __nogc class during an AppDomain unload
					See http://support.microsoft.com/default.aspx?scid=kb;EN-US;837317
				</p>
				<p>
					BUG: AppDomainUnloaded Exception When You Use Managed Extensions for C++ Components
					See http://support.microsoft.com/default.aspx?kbid=309694
				</p>
				This is not a workaround suggested by MS.
				All their suggested workarounds failed to remove the bug.
			</summary>
			<remarks>
				<p>
					This class forms a listener for the DomainUnload event.
					It will dispose all managed classes with unmanaged resources which are listed in the
					MDisposableResources container.
				</p>
				<p>
					The actual registration of resources needs to be done carefully to avoid holding
					references.
				</p>
				<p>
					<see cref="M:Wrappers.MDisposableResources.AddDisposable(System.IDisposable)"/> in
					<see cref="T:Dvtk.Sessions.ScriptSession"/> constructors
					<see cref="T:Dvtk.Sessions.MediaSession"/> constructors
					<see cref="T:Dvtk.Sessions.EmulatorSession"/> constructors
				</p>
				<p>
					<see cref="M:Wrappers.MDisposableResources.RemoveDisposable(System.IDisposable)"/> in
					<see cref="T:Dvtk.Sessions.ScriptSession"/> destructor
					<see cref="T:Dvtk.Sessions.MediaSession"/> destructor
					<see cref="T:Dvtk.Sessions.EmulatorSession"/> destructor
				</p>
			</remarks>
		</member>
		<member name="M:Dvtk.AppUnloadListener.Touch">
			<summary>
				Allows other static classes to Touch this static class to
				cause the static constructor to be invoked as side-effect.
			</summary>
		</member>
		<member name="M:Dvtk.AppUnloadListener.#cctor">
			<summary>
				Installs the listener for the DomainUnLoad event.
				Using a static constructor ensures that only one event subscription
				is layed down.
			</summary>
		</member>
		<member name="M:Dvtk.AppUnloadListener.CurrentDomain_DomainUnload(System.Object,System.EventArgs)">
			<summary>
				Call-back delegate to be invoked on DomainUnLoad.
				This provides us with a means to dispose the unmanaged Native C++
				resources hold by the managed C++ wrapper classes before the
				unloading of the AppDomain corrupts the <c>thunks</c> between the
				unmanaged Native C++ and the managed C++ wrappers classes.
			</summary>
			<param name="sender"></param>
			<param name="e"></param>
		</member>
		<member name="T:Dvtk.Setup">
			<summary>
				Summary description for Setup.
			</summary>
			<remarks>
				This public abstract class (Singleton) is introduced as workaround for
				<p>
					Managed Extensions for C++ Reference<br></br>
					Converting Managed Extensions for C++ Projects from Pure Intermediate Language to Mixed Mode<br></br>
					See http://msdn.microsoft.com/library/default.asp?url=/library/en-us/vcmex/html/vcconconvertingmanagedextensionsforcprojectsfrompureintermediatelanguagetomixedmode.asp
					<br></br>
					This is done because linking with an entry point causes managed code to run during DllMain, which is not safe (see DllMain for the limited set of things you can do during its scope).
				</p>
				<p>
					WARNING: Be sure to only call <c>Initialize</c> once.
					When you make use of scripting within the DVT GUI application, the initialization will be performed the the DVT GUI application.
					The scripts do NOT need to initialize the DVTK in that case.
					Therefore, avoid the calls Initialize and Terminate in your scripts!
				</p>
				<p>
					GUIDELINE: Only introduce the these calls in a Main routine.
				</p>
			</remarks>
		</member>
		<member name="M:Dvtk.Setup.Initialize">
			<summary>
				Initialize the component before use.
			</summary>
			<remarks>
				Needed to ensure that the C-runtime is correctly started.
			</remarks>
			<returns>not used</returns>
		</member>
		<member name="M:Dvtk.Setup.Terminate">
			<summary>
				Terminate the component after use.
			</summary>
			<remarks>
				Needed to ensure that the C-runtime is correctly ended.
			</remarks>
			<returns>not used</returns>
		</member>
		<member name="T:Dvtk.Sessions.IEmulatorCommands">
			<summary>
				Access to emulator commands.
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.IEmulatorCommands.EmulateSCP">
			<summary>
				SCP Emulator.
			</summary>
			<remarks>
				<p>
					Runs the SCP emulator currently set by <see cref="T:DvtkData.Results.ScpEmulatorType"/>.
				</p>
				<p>
					<see cref="M:Dvtk.Sessions.IEmulatorCommands.TerminateConnection"/> can be used to stop the emulator.
				</p>
			</remarks>
			<returns></returns>
		</member>
		<member name="M:Dvtk.Sessions.IEmulatorCommands.BeginEmulateSCP(System.AsyncCallback)">
			<summary>
				Asynchronously begin EmulateSCP.
			</summary>
			<param name="cb"></param>
			<returns></returns>
		</member>
		<member name="M:Dvtk.Sessions.IEmulatorCommands.EndEmulateSCP(System.IAsyncResult)">
			<summary>
				End asynchronous EmulateSCP.
			</summary>
			<param name="ar"></param>
			<returns></returns>
		</member>
		<member name="M:Dvtk.Sessions.IEmulatorCommands.EmulateStorageSCU(System.String[],System.Boolean,System.Boolean,System.Boolean,System.UInt16)">
			<summary>
				Storage SCU Emulator - emulate command.
			</summary>
			<remarks>
				<p>
					Set up DVT to perform the role of Storage SCU for the Storage Definition File(s) loaded.
				</p>
				<p>
					Before running this emulator, load the proper definition files corresponding to the
					storage SCU.
				</p>
				<p>
					The Storage Emulator SCU supports the Verification SOP Class.
				</p>
			</remarks>
			<param name="mediaFileNames">Media files to be send to dicom storage SCP.</param>
			<param name="multipleAssocations"></param>
			<param name="validateOnImport"></param>
			<param name="dataUnderNewStudy"></param>
			<param name="nrOfRepetitions"></param>
			<returns>
				<see langword="true"/> if emulation succeeded.
			</returns>
			<exception cref="T:System.ArgumentNullException">
				Argument <c>mediaFileNames</c> is a <see langword="null"/> reference.
			</exception>
		</member>
		<member name="M:Dvtk.Sessions.IEmulatorCommands.BeginEmulateStorageSCU(System.String[],System.Boolean,System.Boolean,System.Boolean,System.UInt16,System.AsyncCallback)">
			<summary>
				Asynchronously begin EmulateStorageSCU.
			</summary>
			<param name="mediaFileNames"></param>
			<param name="multipleAssociations"></param>
			<param name="validateOnImport"></param>
			<param name="dataUnderNewStudy"></param>
			<param name="nrOfRepetitions"></param>
			<param name="cb"></param>
			<returns></returns>
		</member>
		<member name="M:Dvtk.Sessions.IEmulatorCommands.EndEmulateStorageSCU(System.IAsyncResult)">
			<summary>
				End asynchronous EmulateStorageSCU.
			</summary>
			<param name="ar"></param>
			<returns></returns>
		</member>
		<member name="M:Dvtk.Sessions.IEmulatorCommands.EmulateStorageCommitSCU(System.Int16)">
			<summary>
				Storage Commitment SCU Emulator - emulate command.
			</summary>
			<summary>
				Send the Storage Commitment message - use the storage commitment details
				built up during any previous SendModalityImagesStored() operations.
				The N-ACTION-RQ will be sent to the Image Manager. The value
				of the awaitNEventReport boolean will determine whether this call waits for
				the N-EVENT-REPORT-RQ from the Image Manager or not.

				N-EVENT-REPORT-RQ is expected over the same association or not. True - wait for
				N-EVENT-REPORT-RQ on this association. False - N-EVENT-REPORT-RQ will be sent to
				the Acquisition Modality actor over a separate association.
			</summary>
			<param name="delay">
				Time (in Seconds) to wait for the NEventReport to be sent
				over the same association - applicable only if awaitNEventReport = true.
			</param>
			<remarks>
				<p>
					Set up DVT to perform the role of Storage Commitment SCU.
				</p>
				<p>
					Before running this emulator, load the proper definition files corresponding to the
					Storage Commitment SCU.
				</p>
				<p>
					The Storage Commitment SCU supports the Storage Commitment Push SOP Class.
				</p>
			</remarks>
			<returns></returns>
		</member>
		<member name="M:Dvtk.Sessions.IEmulatorCommands.BeginEmulateStorageCommitSCU(System.Int16,System.AsyncCallback)">
			<summary>
				Asynchronously begin EmulateStorageCommitSCU.
			</summary>
			<param name="delay"></param>
			<param name="cb"></param>
			<returns></returns>
		</member>
		<member name="M:Dvtk.Sessions.IEmulatorCommands.EndEmulateStorageCommitSCU(System.IAsyncResult)">
			<summary>
				End asynchronous EmulateSCP.
			</summary>
			<param name="ar"></param>
			<returns></returns>
		</member>
		<member name="M:Dvtk.Sessions.IEmulatorCommands.EmulateVerificationSCU">
			<summary>
				Verification SCU Emulator - emulate command.
			</summary>
			<remarks>
				<p>
					Set up DVT to perform the role of Verification SCU.
				</p>
				<p>
					Before running this emulator, load the proper definition files corresponding to the
					verification SCU.
				</p>
				<p>
					The verification SCU supports the Verification SOP Class.
				</p>
			</remarks>
			<returns></returns>
		</member>
		<member name="M:Dvtk.Sessions.IEmulatorCommands.BeginEmulateVerificationSCU(System.AsyncCallback)">
			<summary>
				Asynchronously begin EmulateVerificationSCU.
			</summary>
			<param name="cb"></param>
			<returns></returns>
		</member>
		<member name="M:Dvtk.Sessions.IEmulatorCommands.EndEmulateVerificationSCU(System.IAsyncResult)">
			<summary>
				End asynchronous EmulateSCP.
			</summary>
			<param name="ar"></param>
			<returns></returns>
		</member>
		<member name="M:Dvtk.Sessions.IEmulatorCommands.TerminateConnection">
			<summary>
				Can be used to stop an (SCP) emulator.
			</summary>
			<returns></returns>
		</member>
		<member name="M:Dvtk.Sessions.IEmulatorCommands.AbortEmulation">
			<summary>
				Can be used to send Abort command from (SCP) emulator.
			</summary>
			<returns></returns>
		</member>
		<member name="M:Dvtk.Sessions.IEmulatorCommands.AbortEmulationFromSCU">
			<summary>
				Can be used to send Abort command from (SCU) emulator.
			</summary>
			<returns></returns>
		</member>
		<member name="T:Dvtk.Sessions.IPrinter">
			<summary>
				The Printer SOP Class settings.
			</summary>
			<remarks>
				<p>
					Allows retrieval of the printer status.
				</p>
				<p>
					Allows manipulation of the Printer Status.
				</p>
			</remarks>
		</member>
		<member name="M:Dvtk.Sessions.IPrinter.ApplyStatus(Dvtk.Sessions.PrinterStatus,System.String,System.Boolean)">
			<summary>
				Apply a new printer status and corresponding status info.
			</summary>
			<param name="printerStatus">Printer device status.</param>
			<param name="statusInfo">Additional information about Printer Status.</param>
			<param name="sendStatusEvent">Indicates the status event should be sent to SUT</param>
			<exception cref="T:System.ArgumentNullException">
				Argument <c>statusInfo</c> is a <see langword="null"/> reference.
			</exception>
		</member>
		<member name="P:Dvtk.Sessions.IPrinter.Status">
			<summary>
				Printer device status.
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.IPrinter.StatusInfo">
			<summary>
				Additional information about Printer Status.
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.IPrinter.PrinterName">
			<summary>
				User defined name identifying the printer.
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.IPrinter.Manufacturer">
			<summary>
				Manufacturer of the printer.
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.IPrinter.ManufacturerModelName">
			<summary>
				Manufacturer's model number of the printer.
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.IPrinter.DeviceSerialNumber">
			<summary>
				Manufacturer's serial number of the printer.
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.IPrinter.SoftwareVersions">
			<summary>
				Manufacturer's designation of software version of the printer.
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.IPrinter.DateOfLastCalibration">
			<summary>
				Date when the printer was last calibrated.
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.IPrinter.TimeOfLastCalibration">
			<summary>
				Time when the printer was last calibrated.
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.IPrinter.StatusInfoDefinedTerms">
			<summary>
				Defined Terms for Printer Status Info.
			</summary>
			<remarks>
				These defined terms are loaded via the definition files.
			</remarks>
		</member>
		<member name="T:Dvtk.Sessions.PrinterStatus">
			<summary>
				Printer device status.
			</summary>
		</member>
		<member name="F:Dvtk.Sessions.PrinterStatus.NORMAL">
			<summary>
				NORMAL
			</summary>
		</member>
		<member name="F:Dvtk.Sessions.PrinterStatus.WARNING">
			<summary>
				WARNING
			</summary>
		</member>
		<member name="F:Dvtk.Sessions.PrinterStatus.FAILURE">
			<summary>
				FAILURE
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.Printer.ApplyStatus(Dvtk.Sessions.PrinterStatus,System.String,System.Boolean)">
			<summary>
				<see cref="M:Dvtk.Sessions.IPrinter.ApplyStatus(Dvtk.Sessions.PrinterStatus,System.String,System.Boolean)"/>
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.Printer.Manufacturer">
			<summary>
				<see cref="P:Dvtk.Sessions.IPrinter.Manufacturer"/>
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.Printer.ManufacturerModelName">
			<summary>
				<see cref="P:Dvtk.Sessions.IPrinter.ManufacturerModelName"/>
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.Printer.PrinterName">
			<summary>
				<see cref="P:Dvtk.Sessions.IPrinter.PrinterName"/>
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.Printer.DeviceSerialNumber">
			<summary>
				<see cref="P:Dvtk.Sessions.IPrinter.DeviceSerialNumber"/>
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.Printer.TimeOfLastCalibration">
			<summary>
				<see cref="P:Dvtk.Sessions.IPrinter.TimeOfLastCalibration"/>
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.Printer.SoftwareVersions">
			<summary>
				<see cref="P:Dvtk.Sessions.IPrinter.SoftwareVersions"/>
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.Printer.DateOfLastCalibration">
			<summary>
				<see cref="P:Dvtk.Sessions.IPrinter.DateOfLastCalibration"/>
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.Printer.Status">
			<summary>
				<see cref="P:Dvtk.Sessions.IPrinter.Status"/>
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.Printer.StatusInfo">
			<summary>
				<see cref="P:Dvtk.Sessions.IPrinter.StatusInfo"/>
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.Printer.StatusInfoDefinedTerms">
			<summary>
				<see cref="P:Dvtk.Sessions.IPrinter.StatusInfoDefinedTerms"/>
			</summary>
		</member>
		<member name="T:Dvtk.Sessions.IPrinterSettings">
			<summary>
				Access to printer settings.
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.IPrinterSettings.Printer">
			<summary>
				Provide a access handle to the printer.
			</summary>
		</member>
		<member name="T:Dvtk.Sessions.IConfigurableSupportedTransferSyntaxes">
			<summary>
				Access to configuration of supported transfer syntaxes.
			</summary>
			<remarks>
				Specifies the transfer syntaxes as supported by the emulator for incomming messages.
			</remarks>
		</member>
		<member name="P:Dvtk.Sessions.IConfigurableSupportedTransferSyntaxes.SupportedTransferSyntaxSettings">
			<summary>
				Supported transfer syntax settings.
			</summary>
		</member>
		<member name="T:Dvtk.Sessions.ISupportedTransferSyntaxSettings">
			<summary>
				Acces to supported transfer syntax settings.
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.ISupportedTransferSyntaxSettings.SupportedTransferSyntaxes">
			<summary>
				List of supported transfer syntaxes.
			</summary>
		</member>
		<member name="T:Dvtk.Sessions.EmulatorSession">
			<summary>
				Summary description for Session.
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.EmulatorSession.CopySettingsFrom(Dvtk.Sessions.EmulatorSession)">
			<summary>
				Copy all settings from the supplied EmulatorSession to this EmulatorSession.
			</summary>
			<param name="emulatorSession">The EmulatorSession to copy the settings from.</param>
		</member>
		<member name="M:Dvtk.Sessions.EmulatorSession.CreateSecurityCertificateHandler">
			<summary>
				<see cref="M:Dvtk.Sessions.ISecure.CreateSecurityCertificateHandler"/>
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.EmulatorSession.DisposeSecurityCertificateHandler">
			<summary>
				<see cref="M:Dvtk.Sessions.ISecure.DisposeSecurityCertificateHandler"/>
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.EmulatorSession.CreateSecurityCredentialHandler">
			<summary>
				<see cref="M:Dvtk.Sessions.ISecure.CreateSecurityCredentialHandler"/>
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.EmulatorSession.DisposeSecurityCredentialHandler">
			<summary>
				<see cref="M:Dvtk.Sessions.ISecure.DisposeSecurityCredentialHandler"/>
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.EmulatorSession.#ctor">
			<summary>
				Emulation for Verification, Storage and Print SOP Classes.
			</summary>
			<remarks>
				The Dicom Validation Tool (DVT) can be used as either
				Service Class User (SCU) or Service Class Provider (SCP) with a direct
				connection to the System Under Test (SUT)Product (via TCP/IP).
				DVT acts as an emulator for the DICOM Service classes being tested.
				DVT can also create and validate DICOM media files.
			</remarks>
		</member>
		<member name="M:Dvtk.Sessions.EmulatorSession.Finalize">
			<summary>
				Finalizer
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.EmulatorSession.LoadFromFile(System.String)">
			<summary>
				Load a new session from file.
			</summary>
			<param name="sessionFileName">
				file with extension <c>.ses</c>.
			</param>
			<returns>new session</returns>
			<remarks>
				Session settings may be written to a file with extension <c>.ses</c> by
				means of <see cref="T:Dvtk.Sessions.ISessionFileManagement"/>.
			</remarks>
			<exception cref="T:System.ArgumentNullException">
				Argument <c>sessionFileName</c> is a <see langword="null"/> reference.
			</exception>
		</member>
		<member name="M:Dvtk.Sessions.EmulatorSession.EmulateVerificationSCU">
			<summary>
				<see cref="M:Dvtk.Sessions.IEmulatorCommands.EmulateVerificationSCU"/>
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.EmulatorSession.BeginEmulateVerificationSCU(System.AsyncCallback)">
			<summary>
				<see cref="M:Dvtk.Sessions.IEmulatorCommands.BeginEmulateVerificationSCU(System.AsyncCallback)"/>
			</summary>
			<returns></returns>
		</member>
		<member name="M:Dvtk.Sessions.EmulatorSession.EndEmulateVerificationSCU(System.IAsyncResult)">
			<summary>
				<see cref="M:Dvtk.Sessions.IEmulatorCommands.EndEmulateVerificationSCU(System.IAsyncResult)"/>
			</summary>
			<returns></returns>
		</member>
		<member name="M:Dvtk.Sessions.EmulatorSession.TerminateConnection">
			<summary>
				<see cref="M:Dvtk.Sessions.IEmulatorCommands.TerminateConnection"/>
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.EmulatorSession.AbortEmulation">
			<summary>
				<see cref="M:Dvtk.Sessions.IEmulatorCommands.AbortEmulation"/>
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.EmulatorSession.AbortEmulationFromSCU">
			<summary>
				<see cref="M:Dvtk.Sessions.IEmulatorCommands.AbortEmulationFromSCU"/>
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.EmulatorSession.EmulateStorageSCU(System.String[],System.Boolean,System.Boolean,System.Boolean,System.UInt16)">
			<summary>
				<see cref="M:Dvtk.Sessions.IEmulatorCommands.EmulateStorageSCU(System.String[],System.Boolean,System.Boolean,System.Boolean,System.UInt16)"/>
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.EmulatorSession.BeginEmulateStorageSCU(System.String[],System.Boolean,System.Boolean,System.Boolean,System.UInt16,System.AsyncCallback)">
			<summary>
				<see cref="M:Dvtk.Sessions.IEmulatorCommands.BeginEmulateStorageSCU(System.String[],System.Boolean,System.Boolean,System.Boolean,System.UInt16,System.AsyncCallback)"/>
			</summary>
			<returns></returns>
		</member>
		<member name="M:Dvtk.Sessions.EmulatorSession.EndEmulateStorageSCU(System.IAsyncResult)">
			<summary>
				<see cref="M:Dvtk.Sessions.IEmulatorCommands.EndEmulateStorageSCU(System.IAsyncResult)"/>
			</summary>
			<returns></returns>
		</member>
		<member name="M:Dvtk.Sessions.EmulatorSession.EmulateStorageCommitSCU(System.Int16)">
			<summary>
				<see cref="M:Dvtk.Sessions.IEmulatorCommands.EmulateStorageCommitSCU(System.Int16)"/>
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.EmulatorSession.BeginEmulateStorageCommitSCU(System.Int16,System.AsyncCallback)">
			<summary>
				<see cref="M:Dvtk.Sessions.IEmulatorCommands.BeginEmulateStorageCommitSCU(System.Int16,System.AsyncCallback)"/>
			</summary>
			<returns></returns>
		</member>
		<member name="M:Dvtk.Sessions.EmulatorSession.EndEmulateStorageCommitSCU(System.IAsyncResult)">
			<summary>
				<see cref="M:Dvtk.Sessions.IEmulatorCommands.EndEmulateStorageCommitSCU(System.IAsyncResult)"/>
			</summary>
			<returns></returns>
		</member>
		<member name="M:Dvtk.Sessions.EmulatorSession.EmulateSCP">
			<summary>
				<see cref="M:Dvtk.Sessions.IEmulatorCommands.EmulateSCP"/>
			</summary>
			<returns></returns>
		</member>
		<member name="M:Dvtk.Sessions.EmulatorSession.BeginEmulateSCP(System.AsyncCallback)">
			<summary>
				<see cref="M:Dvtk.Sessions.IEmulatorCommands.BeginEmulateSCP(System.AsyncCallback)"/>
			</summary>
			<returns></returns>
		</member>
		<member name="M:Dvtk.Sessions.EmulatorSession.EndEmulateSCP(System.IAsyncResult)">
			<summary>
				<see cref="M:Dvtk.Sessions.IEmulatorCommands.EndEmulateSCP(System.IAsyncResult)"/>
			</summary>
			<returns></returns>
		</member>
		<member name="M:Dvtk.Sessions.EmulatorSession.GetExpandedResultsFileNameHelper(System.String)">
			<summary>
				Expand Results File Name : Helper
			</summary>
			<param name="fileName"></param>
			<returns></returns>
		</member>
		<member name="P:Dvtk.Sessions.EmulatorSession.SupportedTransferSyntaxSettings">
			<summary>
				<see cref="P:Dvtk.Sessions.IConfigurableSupportedTransferSyntaxes.SupportedTransferSyntaxSettings"/>
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.EmulatorSession.DvtSystemSettings">
			<summary>
				Settings specific to the DVT machine node.
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.EmulatorSession.SutSystemSettings">
			<summary>
				Settings specific to the SUT machine node.
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.EmulatorSession.SecuritySettings">
			<summary>
				<see cref="P:Dvtk.Sessions.ISecure.SecuritySettings"/>
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.EmulatorSession.AutoType2Attributes">
			<summary>
				<see cref="P:Dvtk.Sessions.IDataSetEncodingSettings.AutoType2Attributes"/>
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.EmulatorSession.DefineSqLength">
			<summary>
				<see cref="P:Dvtk.Sessions.IDataSetEncodingSettings.DefineSqLength"/>
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.EmulatorSession.AddGroupLength">
			<summary>
				<see cref="P:Dvtk.Sessions.IDataSetEncodingSettings.AddGroupLength"/>
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.EmulatorSession.DelayBeforeNEventReport">
			<summary>
				Delay Before NEventReport command
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.EmulatorSession.AcceptDuplicateImage">
			<summary>
				Send commit report for all images or per image
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.EmulatorSession.StoreCStoreReqOnly">
			<summary>
				Store only C-Store-Req objects
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.EmulatorSession.IsAssociated">
			<summary>
				Send commit report for all images or per image
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.EmulatorSession.ScpEmulatorType">
			<summary>
				The emulator type that runs in a emulator session.
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.EmulatorSession.ScuEmulatorType">
			<summary>
				The emulator type that runs in a emulator session.
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.EmulatorSession.Printer">
			<summary>
				<see cref="P:Dvtk.Sessions.IPrinterSettings.Printer"/>
			</summary>
		</member>
		<member name="T:Dvtk.Sessions.EmulatorSession.AsyncEmulateVerificationSCUDelegate">
			<summary>
				Asynchronous EmulateVerificationSCU delegate.
			</summary>
			<remarks>
				The delegate must have the same signature as the method you want to call asynchronously.
			</remarks>
		</member>
		<member name="T:Dvtk.Sessions.EmulatorSession.AsyncEmulateStorageSCUDelegate">
			<summary>
				Asynchronous EmulateStorageSCU delegate.
			</summary>
			<remarks>
				The delegate must have the same signature as the method you want to call asynchronously.
			</remarks>
		</member>
		<member name="T:Dvtk.Sessions.EmulatorSession.AsyncEmulateStorageCommitSCUDelegate">
			<summary>
				Asynchronous EmulateStorageCommitSCU delegate.
			</summary>
			<remarks>
				The delegate must have the same signature as the method you want to call asynchronously.
			</remarks>
		</member>
		<member name="T:Dvtk.Sessions.EmulatorSession.AsyncEmulateSCPDelegate">
			<summary>
				Asynchronous ExecuteScript delegate.
			</summary>
			<remarks>
				The delegate must have the same signature as the method you want to call asynchronously.
			</remarks>
		</member>
		<member name="T:Dvtk.Events.ReportLevel">
			<summary>
				Report level of activities reported by the Dicom Validation Tool (DVT).
			</summary>
		</member>
		<member name="F:Dvtk.Events.ReportLevel.None">
			<summary>
				None
			</summary>
		</member>
		<member name="F:Dvtk.Events.ReportLevel.Error">
			<summary>
				Error
			</summary>
		</member>
		<member name="F:Dvtk.Events.ReportLevel.Debug">
			<summary>
				Debug
			</summary>
		</member>
		<member name="F:Dvtk.Events.ReportLevel.Warning">
			<summary>
				Wanring
			</summary>
		</member>
		<member name="F:Dvtk.Events.ReportLevel.Information">
			<summary>
				Information
			</summary>
		</member>
		<member name="F:Dvtk.Events.ReportLevel.Scripting">
			<summary>
				Scripting
			</summary>
		</member>
		<member name="F:Dvtk.Events.ReportLevel.ScriptName">
			<summary>
				ScriptName
			</summary>
		</member>
		<member name="F:Dvtk.Events.ReportLevel.MediaFilename">
			<summary>
				MediaFilename
			</summary>
		</member>
		<member name="F:Dvtk.Events.ReportLevel.DicomObjectRelationship">
			<summary>
				Dicom object (Information Object IO) relationship
			</summary>
		</member>
		<member name="F:Dvtk.Events.ReportLevel.DulpStateMachine">
			<summary>
				DULP (Dicom Upper Layer) state machine
			</summary>
		</member>
		<member name="F:Dvtk.Events.ReportLevel.WareHouseLabel">
			<summary>
				Internal warehouse label of in memory validation objects
			</summary>
		</member>
		<member name="F:Dvtk.Events.ReportLevel.ConditionText">
			<summary>
				ConditionText
			</summary>
		</member>
		<member name="T:Dvtk.Events.ActivityReportEventArgs">
			<summary>
				Provides data for the <see cref="E:Dvtk.Sessions.Session.ActivityReportEvent"/> event.
			</summary>
		</member>
		<member name="P:Dvtk.Events.ActivityReportEventArgs.Message">
			<summary>
				Message
			</summary>
		</member>
		<member name="P:Dvtk.Events.ActivityReportEventArgs.ReportLevel">
			<summary>
				Report level
			</summary>
		</member>
		<member name="T:Dvtk.Events.ActivityReportEventHandler">
			<summary>
				Represents the method that handles the <see cref="E:Dvtk.Sessions.Session.ActivityReportEvent"/>.
			</summary>
			<remarks>
				Users may register a callback to listen for this event.
			</remarks>
			<example>
				<code>
					class MyClass
					{
					Dvtk.Sessions.Session ses;

					// Implement a callback handler with same argument syntax as this delegate declaration.
					private void OnActivityReportEvent(object sender, Dvtk.Events.ActivityReportEventArgs e)
					{
					...
					}

					// Create handler instance.
					private Dvtk.Events.ActivityReportEventHandler myHandler
					= new Dvtk.Events.ActivityReportEventHandler(this.OnActivityReportEvent);
					// Couple handler instance to event source.
					ses.ActivityReportEvent += myHandler;
					}
				</code>
			</example>
		</member>
		<member name="T:Dvtk.Sessions.DefinitionFileDetails">
			<summary>
				Essential information for a definition file.
			</summary>
			<remarks>
				This information can be used to determine whether to load the file for the System Under Test (SUT).
			</remarks>
		</member>
		<member name="F:Dvtk.Sessions.DefinitionFileDetails.ApplicationEntityName">
			<summary>
				The application entity name for the System Under Test (SUT).
			</summary>
			<remarks>
				This name is used to select the appropriate definitions from the
				definition files for the corresponding SUT.
			</remarks>
		</member>
		<member name="F:Dvtk.Sessions.DefinitionFileDetails.ApplicationEntityVersion">
			<summary>
				The application entity version for the System Under Test (SUT).
			</summary>
			<remarks>
				This version is used to select the appropriate definitions from the
				definition files for the corresponding SUT.
			</remarks>
		</member>
		<member name="F:Dvtk.Sessions.DefinitionFileDetails.SOPClassName">
			<summary>
				Service Object Pair Class Name
			</summary>
			<remarks>
				Literal string corresponding to the SOPClassUID
				as defined in part 6 of the DICOM standard.
			</remarks>
		</member>
		<member name="F:Dvtk.Sessions.DefinitionFileDetails.SOPClassUID">
			<summary>
				Service Object Pair Class Unique Identifier
			</summary>
			<remarks>
				Uniquely identifies the type of DIMSE message (Service Object Pair Class).
				Each SOP Class is defined by its own definition.
			</remarks>
		</member>
		<member name="F:Dvtk.Sessions.DefinitionFileDetails.IsMetaSOPClass">
			<summary>
				This flag indicates whether the SOP Class is a Meta SOP Class.
			</summary>
			<remarks>
				For instance;
				<list type="bullet">
					<item>Basic Grayscale Print Management Meta SOP Class</item>
					<item>General Purpose Worklist Management Meta SOP Class</item>
				</list>
			</remarks>
		</member>
		<member name="T:Dvtk.Sessions.IDefinitionManagement">
			<summary>
				Manage definitions used by the validation process.
			</summary>
			<remarks>
				<p>
					A Definition File (.DEF) describes a single DICOM (Meta) SOP Class in terms of the
					combination of DIMSE Commands and IODs that make up the (Meta) SOP Class.
					The combination of DIMSE Commands and IODs is taken from DICOM - parts 3 and 4.
				</p>
				<p>
					The Definition Files provide DVT with the DICOM specific knowledge to enable a validation.
				</p>
				<p>
					The Definition Files in this version of DVT support the MACRO syntax used in
					DICOM and describe the conditions under which type 1C and 2C attributes should be present.
				</p>
				<p>
					Standard Definition Files for the most frequently used DICOM (Meta) SOP Classes
					are provided as part of the DVT release package. Private Definition Files can be made by the User.
					DVT also provides and uses several Special Definition Files.
				</p>
			</remarks>
		</member>
		<member name="M:Dvtk.Sessions.IDefinitionManagement.LoadDefinitionFile(System.String)">
			<summary>
				Load definition file.
			</summary>
			<param name="definitionFileName">Absolute or relative file name for the definition file.</param>
			<returns>
				<see langword="false"/> if failed
			</returns>
			<exception cref="T:System.ArgumentNullException">
				Argument <c>definitionFileName</c> is a <see langword="null"/> reference.
			</exception>
		</member>
		<member name="M:Dvtk.Sessions.IDefinitionManagement.UnLoadDefinitionFile(System.String)">
			<summary>
				Unload definition file.
			</summary>
			<param name="definitionFileName">Absolute or relative file name for the definition file.</param>
			<returns>
				<see langword="false"/> if failed
			</returns>
			<exception cref="T:System.ArgumentNullException">
				Argument <c>definitionFileName</c> is a <see langword="null"/> reference.
			</exception>
		</member>
		<member name="M:Dvtk.Sessions.IDefinitionManagement.ReLoadDefinitionFiles">
			<summary>
				Reload definition files.
			</summary>
			<remarks>
				May be used after changes to the definition root. In order to ensure the proper definition files
				are in memory.
			</remarks>
			<returns>
				<see langword="false"/> if failed
			</returns>
		</member>
		<member name="M:Dvtk.Sessions.IDefinitionManagement.UnLoadDefinitionFiles">
			<summary>
				Unload definition files.
			</summary>
			<remarks>
				Unloads all currently loaded definition files.
			</remarks>
		</member>
		<member name="M:Dvtk.Sessions.IDefinitionManagement.GetDefinitionFileDetails(System.String)">
			<summary>
				Retrieves essential information from a definition file.
			</summary>
			<remarks>
				This information can be used to determine whether to load the file for the System Under Test (SUT).
			</remarks>
			<param name="definitionFileName">Absolute or relative file name for the definition file.</param>
			<returns>The details about the definition file.</returns>
			<exception cref="T:System.ArgumentNullException">
				Argument <c>definitionFileName</c> is a <see langword="null"/> reference.
			</exception>
		</member>
		<member name="M:Dvtk.Sessions.IDefinitionManagement.GetIodNameFromDefinition(DvtkData.Dimse.DimseCommand,System.String)">
			<summary>
				Get the definition Iod Name from the loaded definition files.
			</summary>
			<param name="command">Dimse Command.</param>
			<param name="uid">SOP Class UID.</param>
			<returns>Iod Name of definition matching the Dimse Command and SOP Class UID combination.</returns>
		</member>
		<member name="M:Dvtk.Sessions.IDefinitionManagement.GetFileNameFromSOPUID(DvtkData.Dimse.DimseCommand,System.String)">
			<summary>
				Get the definition File Name from the loaded definition files.
			</summary>
			<param name="command">Dimse Command.</param>
			<param name="uid">SOP Class UID.</param>
			<returns>File Name of definition matching the Dimse Command and SOP Class UID combination.</returns>
		</member>
		<member name="M:Dvtk.Sessions.IDefinitionManagement.GetAttributeNameFromDefinition(DvtkData.Dimse.Tag)">
			<summary>
				Get the definition Attribute Name from the loaded definition files.
			</summary>
			<param name="tag">Attribute Tag.</param>
			<returns>Attribute Name.</returns>
		</member>
		<member name="M:Dvtk.Sessions.IDefinitionManagement.GetAttributeVrFromDefinition(DvtkData.Dimse.Tag)">
			<summary>
				Get the definition Attribute VR from the loaded definition files.
			</summary>
			<param name="tag">Attribute Tag.</param>
			<returns>Attribute VR.</returns>
		</member>
		<member name="P:Dvtk.Sessions.IDefinitionManagement.DefinitionFileRootDirectory">
			<summary>
				Definition File Root Directory
			</summary>
			<remarks>
				<p>
					The Definition File Root Driectory is used to prefix the definition file names
					in order to define the full definition pathname.
				</p>
			</remarks>
			<exception cref="T:System.ArgumentNullException">
				Argument is a <see langword="null"/> reference.
			</exception>
			<exception cref="T:System.ArgumentException">Directory may not be an empty string. Use ".\" for current directory."</exception>
		</member>
		<member name="P:Dvtk.Sessions.IDefinitionManagement.LoadedDefinitionFileNames">
			<summary>
				The list of currently loaded definition file names.
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.IDefinitionManagement.ApplicationEntityName">
			<summary>
				The application entity name for the System Under Test (SUT).
			</summary>
			<remarks>
				This name is used to select the appropriate definitions from the
				definition files for the corresponding SUT.
			</remarks>
			<exception cref="T:System.ArgumentNullException">
				Argument is a <see langword="null"/> reference.
			</exception>
		</member>
		<member name="P:Dvtk.Sessions.IDefinitionManagement.ApplicationEntityVersion">
			<summary>
				The application entity version for the System Under Test (SUT).
			</summary>
			<remarks>
				This version is used to select the appropriate definitions from the
				definition files for the corresponding SUT.
			</remarks>
			<exception cref="T:System.ArgumentNullException">
				Argument is a <see langword="null"/> reference.
			</exception>
		</member>
		<member name="P:Dvtk.Sessions.IDefinitionManagement.DefinitionFileDirectoryList">
			<summary>
				Definition-file directory list.
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.DefinitionManagement.LoadDefinitionFile(System.String)">
			<summary>
				<see cref="M:Dvtk.Sessions.IDefinitionManagement.LoadDefinitionFile(System.String)"/>
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.DefinitionManagement.UnLoadDefinitionFile(System.String)">
			<summary>
				<see cref="M:Dvtk.Sessions.IDefinitionManagement.UnLoadDefinitionFile(System.String)"/>
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.DefinitionManagement.ReLoadDefinitionFiles">
			<summary>
				<see cref="M:Dvtk.Sessions.IDefinitionManagement.ReLoadDefinitionFiles"/>
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.DefinitionManagement.UnLoadDefinitionFiles">
			<summary>
				<see cref="M:Dvtk.Sessions.IDefinitionManagement.UnLoadDefinitionFiles"/>
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.DefinitionManagement.GetDefinitionFileDetails(System.String)">
			<summary>
				<see cref="M:Dvtk.Sessions.IDefinitionManagement.GetDefinitionFileDetails(System.String)"/>
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.DefinitionManagement.GetIodNameFromDefinition(DvtkData.Dimse.DimseCommand,System.String)">
			<summary>
				<see cref="M:Dvtk.Sessions.IDefinitionManagement.GetIodNameFromDefinition(DvtkData.Dimse.DimseCommand,System.String)"/>
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.DefinitionManagement.GetFileNameFromSOPUID(DvtkData.Dimse.DimseCommand,System.String)">
			<summary>
				<see cref="M:Dvtk.Sessions.IDefinitionManagement.GetFileNameFromSOPUID(DvtkData.Dimse.DimseCommand,System.String)"/>
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.DefinitionManagement.GetAttributeNameFromDefinition(DvtkData.Dimse.Tag)">
			<summary>
				<see cref="M:Dvtk.Sessions.IDefinitionManagement.GetAttributeNameFromDefinition(DvtkData.Dimse.Tag)"/>
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.DefinitionManagement.GetAttributeVrFromDefinition(DvtkData.Dimse.Tag)">
			<summary>
				<see cref="M:Dvtk.Sessions.IDefinitionManagement.GetAttributeVrFromDefinition(DvtkData.Dimse.Tag)"/>
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.DefinitionManagement.DefinitionFileRootDirectory">
			<summary>
				<see cref="P:Dvtk.Sessions.IDefinitionManagement.DefinitionFileRootDirectory"/>
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.DefinitionManagement.LoadedDefinitionFileNames">
			<summary>
				<see cref="P:Dvtk.Sessions.IDefinitionManagement.LoadedDefinitionFileNames"/>
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.DefinitionManagement.ApplicationEntityName">
			<summary>
				<see cref="P:Dvtk.Sessions.IDefinitionManagement.ApplicationEntityName"/>
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.DefinitionManagement.ApplicationEntityVersion">
			<summary>
				<see cref="P:Dvtk.Sessions.IDefinitionManagement.ApplicationEntityVersion"/>
			</summary>
		</member>
		<member name="T:Dvtk.Sessions.DefinitionFileDirectoryList">
			<summary>
				Type safe DefinitionFileDirectoryList
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.DefinitionFileDirectoryList.OnClearComplete">
			<summary>
				Performs additional custom processes after clearing the contents of the <see cref="T:System.Collections.CollectionBase"/> instance.
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.DefinitionFileDirectoryList.OnInsertComplete(System.Int32,System.Object)">
			<summary>
				Performs additional custom processes after inserting a new element into the <see cref="T:System.Collections.CollectionBase"/> instance.
			</summary>
			<param name="index">
				The zero-based index at which to insert <c>value</c>.
			</param>
			<param name="value">
				The new value of the element at <c>index</c>.
			</param>
		</member>
		<member name="M:Dvtk.Sessions.DefinitionFileDirectoryList.OnRemoveComplete(System.Int32,System.Object)">
			<summary>
				Performs additional custom processes after removing an element from the <see cref="T:System.Collections.CollectionBase"/> instance.
			</summary>
			<param name="index">
				The zero-based index at which <c>value</c> can be found.
			</param>
			<param name="value">
				The value of the element to remove from <c>index</c>.
			</param>
		</member>
		<member name="M:Dvtk.Sessions.DefinitionFileDirectoryList.OnSetComplete(System.Int32,System.Object,System.Object)">
			<summary>
				Performs additional custom processes after setting a value in the <see cref="T:System.Collections.CollectionBase"/> instance.
			</summary>
			<param name="index">
				The zero-based index at which <c>oldValue</c> can be found.
			</param>
			<param name="oldValue">
				The value to replace with <c>newValue</c>.
			</param>
			<param name="newValue">
				The new value of the element at <c>index</c>.
			</param>
		</member>
		<member name="M:Dvtk.Sessions.DefinitionFileDirectoryList.#ctor">
			<summary>
				Default constructor.
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.DefinitionFileDirectoryList.Insert(System.Int32,System.String)">
			<summary>
				Inserts an item to the IList at the specified position.
			</summary>
			<param name="index">
				The zero-based index at which <c>value</c> should be inserted.
			</param>
			<param name="value">
				The item to insert into the <see cref="T:System.Collections.IList"/>.
			</param>
			<exception cref="T:System.ArgumentException">Directory does not exist.</exception>
		</member>
		<member name="M:Dvtk.Sessions.DefinitionFileDirectoryList.Remove(System.String)">
			<summary>
				Removes the first occurrence of a specific item from the IList.
			</summary>
			<param name="value">
				The item to remove from the <see cref="T:System.Collections.IList"/>.
			</param>
		</member>
		<member name="M:Dvtk.Sessions.DefinitionFileDirectoryList.Contains(System.String)">
			<summary>
				Determines whether the <see cref="T:System.Collections.IList"/> contains a specific item.
			</summary>
			<param name="value">
				The item to locate in the <see cref="T:System.Collections.IList"/>.
			</param>
			<returns>
				<see langword="true"/> if the item is found in the <see cref="T:System.Collections.IList"/>; otherwise, <see langword="false"/>.
			</returns>
		</member>
		<member name="M:Dvtk.Sessions.DefinitionFileDirectoryList.IndexOf(System.String)">
			<summary>
				Determines the index of a specific item in the <see cref="T:System.Collections.IList"/>.
			</summary>
			<param name="value">
				The item to locate in the <see cref="T:System.Collections.IList"/>.
			</param>
			<returns>
				The index of <c>value</c> if found in the list; otherwise, -1.
			</returns>
		</member>
		<member name="M:Dvtk.Sessions.DefinitionFileDirectoryList.Add(System.String)">
			<summary>
				Adds an item to the <see cref="T:System.Collections.IList"/>.
			</summary>
			<param name="value">
				The item to add to the <see cref="T:System.Collections.IList"/>.
			</param>
			<returns>The position into which the new element was inserted.</returns>
			<exception cref="T:System.ArgumentException">Directory does not exist.</exception>
		</member>
		<member name="E:Dvtk.Sessions.DefinitionFileDirectoryList.ListChanged">
			<summary>
				Occurs when the list managed by the <see cref="T:Dvtk.Sessions.DefinitionFileDirectoryList"/> changes.
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.DefinitionFileDirectoryList.Item(System.Int32)">
			<summary>
				Gets or sets the item at the specified index.
			</summary>
			<value>
				The item at the specified <c>index</c>.
			</value>
			<exception cref="T:System.ArgumentException">Directory does not exist.</exception>
		</member>
		<member name="T:Dvtk.Sessions.ReceivedMsgReturnCode">
			<summary>
				Return codes for a DIMSE message receive action in sniffer.
			</summary>
		</member>
		<member name="F:Dvtk.Sessions.ReceivedMsgReturnCode.Success">
			<summary>
				Success
			</summary>
		</member>
		<member name="F:Dvtk.Sessions.ReceivedMsgReturnCode.Failure">
			<summary>
				Failure
			</summary>
		</member>
		<member name="F:Dvtk.Sessions.ReceivedMsgReturnCode.IncompleteByteStream">
			<summary>
				Incomplete byte stream
			</summary>
		</member>
		<member name="F:Dvtk.Sessions.ReceivedMsgReturnCode.DecodingError">
			<summary>
				Decoding error
			</summary>
		</member>
		<member name="T:Dvtk.Sessions.ISniffer">
			<summary>
				Sniffer interface
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.ISniffer.ReadPDUsInFileStream(System.String[])">
			<summary>
				Read a the PDU files sniffed from the network into file stream.
			</summary>
			<remarks>
				The file typically has the extension <c>.pdu</c>.
			</remarks>
			<param name="PDUFileNames">file names to read from</param>
			<returns>pdu file object read</returns>
			<exception cref="T:System.ArgumentNullException">
				Argument <c>PDUFileNames</c> is a <see langword="null"/> reference.
			</exception>
		</member>
		<member name="M:Dvtk.Sessions.ISniffer.ReceiveMessage(DvtkData.Message@)">
			<summary>
				Receive a DIMSE or ACSE message from the PDU files stream sniffed from network.
			</summary>
			<p>
				This corresponds with a DIMSE Confirmation Primitive or ACSE response.
			</p>
			<p>
				This call allows handling of A_ABORT and A_RELEASE_RQ messages without
				causing an application exception.
			</p>
			<param name="message">
				Abstract message of type <see cref="T:DvtkData.Message"/> the user can
				use reflection <see cref="M:System.Object.GetType"/> to determine whether the message
				is of type <see cref="T:DvtkData.Dimse.DicomMessage"/> or <see cref="T:DvtkData.Dul.DulMessage"/>.
			</param>
			<returns>
				The return code
			</returns>
		</member>
		<member name="M:Dvtk.Sessions.ISniffer.Validate(DvtkData.Dul.DulMessage,Dvtk.Sessions.ValidationControlFlags)">
			<summary>
				Validate a Dul Message
			</summary>
			<param name="message">Dul Message to be validated</param>
			<param name="validationControlFlags">Control flags to steer the validation process</param>
			<returns></returns>
			<exception cref="T:System.ArgumentNullException">
				Argument <c>file</c> is a <see langword="null"/> reference.
			</exception>
			<exception cref="T:System.ArgumentException">
				Argument <c>validationControlFlags</c> is not set to
				<see cref="F:Dvtk.Sessions.ValidationControlFlags.UseReferences"/>.
			</exception>
		</member>
		<member name="M:Dvtk.Sessions.ISniffer.Validate(DvtkData.Dimse.DicomMessage,Dvtk.Sessions.ValidationControlFlags)">
			<summary>
				Validate a Dicom Message
			</summary>
			<param name="message">Dicom Message to be validated</param>
			<param name="validationControlFlags">Control flags to steer the validation process</param>
			<returns></returns>
			<exception cref="T:System.ArgumentNullException">
				Argument <c>file</c> is a <see langword="null"/> reference.
			</exception>
			<exception cref="T:System.ArgumentException">
				Argument <c>validationControlFlags</c> is not set to
				<see cref="F:Dvtk.Sessions.ValidationControlFlags.UseReferences"/>.
			</exception>
		</member>
		<member name="T:Dvtk.Sessions.SnifferSession">
			<summary>
				Summary description for Session.
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.SnifferSession.#ctor">
			<summary>
				Constructor
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.SnifferSession.Finalize">
			<summary>
				Finalizer
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.SnifferSession.LoadFromFile(System.String)">
			<summary>
				Load a new session from file.
			</summary>
			<param name="sessionFileName">
				file with extension <c>.ses</c>.
			</param>
			<returns>new session</returns>
			<remarks>
				Session settings may be written to a file with extension <c>.ses</c> by
				means of <see cref="T:Dvtk.Sessions.ISessionFileManagement"/>.
			</remarks>
			<exception cref="T:System.ArgumentNullException">
				Argument <c>sessionFileName</c> is a <see langword="null"/> reference.
			</exception>
		</member>
		<member name="M:Dvtk.Sessions.SnifferSession.ReadPDUsInFileStream(System.String[])">
			<summary>
				<see cref="M:Dvtk.Sessions.ISniffer.ReadPDUsInFileStream(System.String[])"/>
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.SnifferSession.ReceiveMessage(DvtkData.Message@)">
			<summary>
				<see cref="M:Dvtk.Sessions.ISniffer.ReceiveMessage(DvtkData.Message@)"/>
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.SnifferSession.Validate(DvtkData.Dimse.DicomMessage,Dvtk.Sessions.ValidationControlFlags)">
			<summary>
				<see cref="M:Dvtk.Sessions.ISniffer.Validate(DvtkData.Dimse.DicomMessage,Dvtk.Sessions.ValidationControlFlags)"/>
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.SnifferSession.Validate(DvtkData.Dul.DulMessage,Dvtk.Sessions.ValidationControlFlags)">
			<summary>
				<see cref="M:Dvtk.Sessions.ISniffer.Validate(DvtkData.Dul.DulMessage,Dvtk.Sessions.ValidationControlFlags)"/>
			</summary>
		</member>
		<member name="T:Dvtk.Sessions.SessionFactory">
			<summary>
				Factory class used to load Sessions from file with extension <c>.SES</c>.
			</summary>
			<remarks>
				Loaded session types are;
				<list type="bullet">
					<item>Dvtk.Sessions.ScriptSession</item>
					<item>Dvtk.Sessions.EmulatorSession</item>
					<item>Dvtk.Sessions.MediaSession</item>
				</list>
			</remarks>
		</member>
		<member name="F:Dvtk.Sessions.SessionFactory.TheInstance">
			<summary>
				Singleton instance handle
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.SessionFactory.Load(System.String)">
			<summary>
				Load a session from file.
			</summary>
			<param name="fileName">
				file with extension <c>.SES</c>
			</param>
			<returns>
				Returns a session of type;
				<list type="bullet">
					<item>Dvtk.Sessions.ScriptSession</item>
					<item>Dvtk.Sessions.EmulatorSession</item>
					<item>Dvtk.Sessions.MediaSession</item>
				</list>
			</returns>
			<remarks>
				The type of session is dynamically determined.
			</remarks>
		</member>
		<member name="T:Dvtk.Security.ISecurityItem">
			<summary>
				Access to information of the security item.
			</summary>
			<remarks>
				The security item may be either a <see cref="T:Dvtk.Security.Certificate"/> or <see cref="T:Dvtk.Security.Credential"/>.
			</remarks>
		</member>
		<member name="P:Dvtk.Security.ISecurityItem.EffectiveDate">
			<summary>
				Effective date
			</summary>
			<remarks>
				returns <see langword="null"/> if no date is found.
			</remarks>
		</member>
		<member name="P:Dvtk.Security.ISecurityItem.ExpirationDate">
			<summary>
				Expiration date
			</summary>
			<remarks>
				returns <see langword="null"/> if no date is found.
			</remarks>
		</member>
		<member name="P:Dvtk.Security.ISecurityItem.Issuer">
			<summary>
				Issuer
			</summary>
		</member>
		<member name="P:Dvtk.Security.ISecurityItem.SerialNumber">
			<summary>
				Serial number
			</summary>
		</member>
		<member name="P:Dvtk.Security.ISecurityItem.SignatureAlgorithm">
			<summary>
				Signature algorithm
			</summary>
		</member>
		<member name="P:Dvtk.Security.ISecurityItem.SignatureKeyLength">
			<summary>
				Signature key length
			</summary>
		</member>
		<member name="P:Dvtk.Security.ISecurityItem.Subject">
			<summary>
				Subject
			</summary>
		</member>
		<member name="P:Dvtk.Security.ISecurityItem.Version">
			<summary>
				Version
			</summary>
		</member>
		<member name="T:Dvtk.Security.Certificate">
			<summary>
				Certificate security item.
			</summary>
		</member>
		<member name="P:Dvtk.Security.Certificate.EffectiveDate">
			<summary>
				<see cref="P:Dvtk.Security.ISecurityItem.EffectiveDate"/>
			</summary>
		</member>
		<member name="P:Dvtk.Security.Certificate.ExpirationDate">
			<summary>
				<see cref="P:Dvtk.Security.ISecurityItem.ExpirationDate"/>
			</summary>
		</member>
		<member name="P:Dvtk.Security.Certificate.Issuer">
			<summary>
				<see cref="P:Dvtk.Security.ISecurityItem.Issuer"/>
			</summary>
		</member>
		<member name="P:Dvtk.Security.Certificate.SerialNumber">
			<summary>
				<see cref="P:Dvtk.Security.ISecurityItem.SerialNumber"/>
			</summary>
		</member>
		<member name="P:Dvtk.Security.Certificate.SignatureAlgorithm">
			<summary>
				<see cref="P:Dvtk.Security.ISecurityItem.SignatureAlgorithm"/>
			</summary>
		</member>
		<member name="P:Dvtk.Security.Certificate.SignatureKeyLength">
			<summary>
				<see cref="P:Dvtk.Security.ISecurityItem.SignatureKeyLength"/>
			</summary>
		</member>
		<member name="P:Dvtk.Security.Certificate.Subject">
			<summary>
				<see cref="P:Dvtk.Security.ISecurityItem.Subject"/>
			</summary>
		</member>
		<member name="P:Dvtk.Security.Certificate.Version">
			<summary>
				<see cref="P:Dvtk.Security.ISecurityItem.Version"/>
			</summary>
		</member>
		<member name="T:Dvtk.Security.Credential">
			<summary>
				Credential security item.
			</summary>
		</member>
		<member name="P:Dvtk.Security.Credential.EffectiveDate">
			<summary>
				<see cref="P:Dvtk.Security.ISecurityItem.EffectiveDate"/>
			</summary>
		</member>
		<member name="P:Dvtk.Security.Credential.ExpirationDate">
			<summary>
				<see cref="P:Dvtk.Security.ISecurityItem.ExpirationDate"/>
			</summary>
		</member>
		<member name="P:Dvtk.Security.Credential.Issuer">
			<summary>
				<see cref="P:Dvtk.Security.ISecurityItem.Issuer"/>
			</summary>
		</member>
		<member name="P:Dvtk.Security.Credential.SerialNumber">
			<summary>
				<see cref="P:Dvtk.Security.ISecurityItem.SerialNumber"/>
			</summary>
		</member>
		<member name="P:Dvtk.Security.Credential.SignatureAlgorithm">
			<summary>
				<see cref="P:Dvtk.Security.ISecurityItem.SignatureAlgorithm"/>
			</summary>
		</member>
		<member name="P:Dvtk.Security.Credential.SignatureKeyLength">
			<summary>
				<see cref="P:Dvtk.Security.ISecurityItem.SignatureKeyLength"/>
			</summary>
		</member>
		<member name="P:Dvtk.Security.Credential.Subject">
			<summary>
				<see cref="P:Dvtk.Security.ISecurityItem.Subject"/>
			</summary>
		</member>
		<member name="P:Dvtk.Security.Credential.Version">
			<summary>
				<see cref="P:Dvtk.Security.ISecurityItem.Version"/>
			</summary>
		</member>
		<member name="T:Dvtk.Security.ICertificateHandling">
			<summary>
				Access to certificate file handling.
			</summary>
		</member>
		<member name="M:Dvtk.Security.ICertificateHandling.ImportCertificateFromOtherFile(System.String,System.String)">
			<summary>
				Import certificate from an other file.
			</summary>
			<param name="fileName">file name</param>
			<param name="password">password</param>
		</member>
		<member name="M:Dvtk.Security.ICertificateHandling.RemoveCertificatesFromFile(System.UInt32[])">
			<summary>
				Remove certificates from file.
			</summary>
			<param name="indexes">certificates to be removed</param>
			<returns>
				returns <see langword="true"/> on success
			</returns>
		</member>
		<member name="M:Dvtk.Security.ICertificateHandling.LoadCertificateFile(System.String,System.String)">
			<summary>
				Load certificate file
			</summary>
			<param name="fileName">file name</param>
			<param name="password">password</param>
			<exception cref="T:System.ApplicationException">Loaded certificate file can not be verified.</exception>
		</member>
		<member name="M:Dvtk.Security.ICertificateHandling.VerifyChanges(System.String@)">
			<summary>
				Verify whether the changes result in a valid certificate file.
			</summary>
			<param name="verificationMessage">
				When not valid, the verification message states additional
				information about the verification
			</param>
			<returns>
				Returns <see langword="true"/> if valid else <see langword="false"/>
			</returns>
		</member>
		<member name="M:Dvtk.Security.ICertificateHandling.SaveCertificateFile(System.String@)">
			<summary>
				Save certificate to file.
			</summary>
			<remarks>
				The file will not be saved if the changes are not valid.
			</remarks>
			<param name="verificationMessage">
				When not valid, the verification message states additional
				information about the verification
			</param>
			<returns>
				Returns <see langword="true"/> if valid else <see langword="false"/>
			</returns>
		</member>
		<member name="M:Dvtk.Security.ICertificateHandling.ForcedSaveCertificateFile">
			<summary>
				Save certificate to file. Even if the changes are not valid.
			</summary>
			<returns></returns>
		</member>
		<member name="P:Dvtk.Security.ICertificateHandling.Certificates">
			<summary>
				List of certificates
			</summary>
		</member>
		<member name="P:Dvtk.Security.ICertificateHandling.FileName">
			<summary>
				File name
			</summary>
		</member>
		<member name="P:Dvtk.Security.ICertificateHandling.Password">
			<summary>
				Password
			</summary>
		</member>
		<member name="M:Dvtk.Security.CertificateHandling.ImportCertificateFromOtherFile(System.String,System.String)">
			<summary>
				<see cref="M:Dvtk.Security.ICertificateHandling.ImportCertificateFromOtherFile(System.String,System.String)"/>
			</summary>
		</member>
		<member name="M:Dvtk.Security.CertificateHandling.RemoveCertificatesFromFile(System.UInt32[])">
			<summary>
				<see cref="M:Dvtk.Security.ICertificateHandling.RemoveCertificatesFromFile(System.UInt32[])"/>
			</summary>
		</member>
		<member name="M:Dvtk.Security.CertificateHandling.LoadCertificateFile(System.String,System.String)">
			<summary>
				<see cref="M:Dvtk.Security.ICertificateHandling.LoadCertificateFile(System.String,System.String)"/>
			</summary>
		</member>
		<member name="M:Dvtk.Security.CertificateHandling.VerifyChanges(System.String@)">
			<summary>
				<see cref="M:Dvtk.Security.ICertificateHandling.VerifyChanges(System.String@)"/>
			</summary>
		</member>
		<member name="M:Dvtk.Security.CertificateHandling.SaveCertificateFile(System.String@)">
			<summary>
				<see cref="M:Dvtk.Security.ICertificateHandling.SaveCertificateFile(System.String@)"/>
			</summary>
		</member>
		<member name="M:Dvtk.Security.CertificateHandling.ForcedSaveCertificateFile">
			<summary>
				<see cref="M:Dvtk.Security.ICertificateHandling.ForcedSaveCertificateFile"/>
			</summary>
		</member>
		<member name="P:Dvtk.Security.CertificateHandling.Certificates">
			<summary>
				<see cref="P:Dvtk.Security.ICertificateHandling.Certificates"/>
			</summary>
		</member>
		<member name="P:Dvtk.Security.CertificateHandling.FileName">
			<summary>
				<see cref="P:Dvtk.Security.ICertificateHandling.FileName"/>
			</summary>
		</member>
		<member name="P:Dvtk.Security.CertificateHandling.Password">
			<summary>
				<see cref="P:Dvtk.Security.ICertificateHandling.Password"/>
			</summary>
		</member>
		<member name="T:Dvtk.Security.ICredentialHandling">
			<summary>
				Access to credential file handling.
			</summary>
		</member>
		<member name="M:Dvtk.Security.ICredentialHandling.ImportCredentialFromOtherFile(System.String,System.String)">
			<summary>
				Import credential from an other file.
			</summary>
			<param name="fileName">file name</param>
			<param name="password">password</param>
		</member>
		<member name="M:Dvtk.Security.ICredentialHandling.RemoveCredentialFromFile(System.UInt32[])">
			<summary>
				Remove credentials from file.
			</summary>
			<param name="indexes">credentials to be removed</param>
			<returns>
				returns <see langword="true"/> on success
			</returns>
		</member>
		<member name="M:Dvtk.Security.ICredentialHandling.LoadCredentialFile(System.String,System.String)">
			<summary>
				Load credential file
			</summary>
			<param name="fileName">file name</param>
			<param name="password">password</param>
		</member>
		<member name="M:Dvtk.Security.ICredentialHandling.VerifyChanges(System.String@)">
			<summary>
				Verify whether the changes result in a valid credential file.
			</summary>
			<param name="verificationMessage">
				When not valid, the verification message states additional
				information about the verification
			</param>
			<returns>
				Returns <see langword="true"/> if valid else <see langword="false"/>
			</returns>
		</member>
		<member name="M:Dvtk.Security.ICredentialHandling.SaveCredentialFile(System.String@)">
			<summary>
				Save credential to file.
			</summary>
			<remarks>
				The file will not be saved if the changes are not valid.
			</remarks>
			<param name="verificationMessage">
				When not valid, the verification message states additional
				information about the verification
			</param>
			<returns>
				Returns <see langword="true"/> if valid else <see langword="false"/>
			</returns>
		</member>
		<member name="M:Dvtk.Security.ICredentialHandling.ForcedSaveCredentialFile">
			<summary>
				Save credential to file. Even if the changes are not valid.
			</summary>
			<returns></returns>
		</member>
		<member name="P:Dvtk.Security.ICredentialHandling.Credentials">
			<summary>
				List of credentials
			</summary>
		</member>
		<member name="P:Dvtk.Security.ICredentialHandling.FileName">
			<summary>
				File name
			</summary>
		</member>
		<member name="P:Dvtk.Security.ICredentialHandling.Password">
			<summary>
				Password
			</summary>
		</member>
		<member name="T:Dvtk.Sessions.IMediaStorage">
			<summary>
				Access to commands that read and write media files.
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.IMediaStorage.BeginGenerationDICOMDIR(System.String[],System.AsyncCallback)">
			<summary>
				Asynchronously begin DICOMDIR Generation.
			</summary>
			<param name="mediaFileNames"></param>
			<param name="cb"></param>
			<returns></returns>
		</member>
		<member name="M:Dvtk.Sessions.IMediaStorage.GenerateDICOMDIR(System.String[])">
			<summary>
				Generate a DICOMDIR for the given media file names.
			</summary>
			<param name="mediaFileNames">List of media fully qualified file names to use for DICOMDIR generation.</param>
			<returns>
				<see langword="false"/> if the generation process failed.
			</returns>
			<exception cref="T:System.ArgumentNullException">
				Argument <c>mediaFileNames</c> is a <see langword="null"/> reference.
			</exception>
			<exception cref="T:System.ArgumentException">
				Argument <c>mediaFileNames</c> is an empty array of media file names.
			</exception>
		</member>
		<member name="M:Dvtk.Sessions.IMediaStorage.EndGenerationDICOMDIR(System.IAsyncResult)">
			<summary>
				End asynchronous DICOMDIR Generation.
			</summary>
			<param name="ar"></param>
			<returns></returns>
		</member>
		<member name="T:Dvtk.Sessions.IMediaValidation">
			<summary>
				Access to commands that validate media related dicom-file objects.
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.IMediaValidation.Validate(DvtkData.Media.DicomFile,Dvtk.Sessions.ValidationControlFlags)">
			<summary>
				Validate a media related dicom-file object
			</summary>
			<param name="file">dicom file object to be validated</param>
			<param name="validationControlFlags">Control flags to steer the validation process</param>
			<returns></returns>
			<exception cref="T:System.ArgumentNullException">
				Argument <c>file</c> is a <see langword="null"/> reference.
			</exception>
			<exception cref="T:System.ArgumentException">
				Argument <c>validationControlFlags</c> is not set to
				<see cref="F:Dvtk.Sessions.ValidationControlFlags.UseReferences"/>.
			</exception>
		</member>
		<member name="T:Dvtk.Sessions.IMediaValidator">
			<summary>
				Validation of a Media Storage File (.DCM or other).
			</summary>
			<remarks>
				<p>
					Before running this validation, load the proper definition files corresponding to the
					storage SOP classes.
				</p>
			</remarks>
		</member>
		<member name="M:Dvtk.Sessions.IMediaValidator.ValidateMediaFiles(System.String[])">
			<summary>
				Validate Media Storage Files.
			</summary>
			<remarks>
				Typically these files have the file-extension DCM. DVT does not check the file-extension.
				The file should have an internal byte-prefix with byte-values 'DICM'.
			</remarks>
			<param name="mediaFileNames">List of media fully qualified file names to validate.</param>
			<returns>
				<see langword="false"/> if the validation process failed.
			</returns>
			<exception cref="T:System.ArgumentNullException">
				Argument <c>mediaFileNames</c> is a <see langword="null"/> reference.
			</exception>
			<exception cref="T:System.ArgumentException">
				Argument <c>mediaFileNames</c> is an empty array of media file names.
			</exception>
		</member>
		<member name="M:Dvtk.Sessions.IMediaValidator.ValidateMediaFiles(System.String,Dvtk.Sessions.MediaFileContentType,System.String,System.String,System.String)">
			<summary>
				Validate Media Storage File.
			</summary>
			<remarks>
				Typically this file should have the file-extension DCM. DVT does not check the file-extension.
				The file can contain one of three types of data:
				a) DICOM Media File with File Meta Information - "Part 10 format".
				b) DIMSE CommandSet
				c) DICOM DataSet

				The file content is defined by the fileContentType argument.
				If the file is either a DIMSE CommandSet or DataSet then the additional arguments sopClassUid,
				sopInstanceUid and transferSyntaxUid are expected to be defined.

			</remarks>
			<param name="mediaFileName">List of media fully qualified file name to validate.</param>
			<param name="fileContentType">Description of the file content.</param>
			<param name="sopClassUid">Sop Class Uid of file content.</param>
			<param name="sopInstanceUid">Sop Instance Uid of file content.</param>
			<param name="transferSyntaxUid">Transfer Syntax Uid of file content.</param>
			<returns>
				<see langword="false"/> if the validation process failed.
			</returns>
			<exception cref="T:System.ArgumentNullException">
				Argument <c>mediaFileNames</c> is a <see langword="null"/> reference.
			</exception>
			<exception cref="T:System.ArgumentException">
				Argument <c>mediaFileNames</c> is an empty array of media file names.
			</exception>
		</member>
		<member name="M:Dvtk.Sessions.IMediaValidator.ValidateMediaFiles(System.String[],System.String,System.Int32)">
			<summary>
				Validate Media Storage Files.
			</summary>
			<remarks>
				Typically these files have the file-extension DCM. DVT does not check the file-extension.
				The file should have an internal byte-prefix with byte-values 'DICOM'.

				The directoryRecordsToFilter parameter can be any combination of the following Directory Record Types:

				"ROOT"
				"PATIENT"
				"STUDY"
				"SERIES"
				"IMAGE"
				"OVERLAY"
				"MODALITY LUT"
				"VOI LUT"
				"CURVE"
				"STORED PRINT"
				"RT DOSE"
				"RT STRUCTURE SET"
				"RT PLAN"
				"RT TREAT RECORD"
				"PRESENTATION"
				"WAVEFORM"
				"SR DOCUMENT"
				"KEY OBJECT DOC"
				"TOPIC"
				"VISIT""RESULTS"
				"INTERPRETATION"
				"STUDY COMPONENT"
				"PRIVATE"
				"PRINT QUEUE"
				"FILM SESSION"
				"FILM BOX"
				"IMAGE BOX"

				To include more than one record type - delimit the record types with the pipe "|" character
				example: "IMAGE|PRIVATE|PRESENTATION" will filter on these 3 record types.

			</remarks>
			<param name="mediaFileNames">List of media fully qualified file names to validate.</param>
			<param name="directoryRecordsToFilter">Pipe delimited string indicating the Directory Records that should be filtered.</param>
			<param name="numberDirectoryRecordsToFilter">Number of Directory Records to validate before filtering records of the same type out.</param>
			<returns>
				<see langword="false"/> if the validation process failed.
			</returns>
			<exception cref="T:System.ArgumentNullException">
				Argument <c>mediaFileNames</c> is a <see langword="null"/> reference.
			</exception>
			<exception cref="T:System.ArgumentException">
				Argument <c>mediaFileNames</c> is an empty array of media file names.
			</exception>
		</member>
		<member name="M:Dvtk.Sessions.IMediaValidator.BeginValidateMediaFiles(System.String[],System.AsyncCallback)">
			<summary>
				Asynchronously begin ValidateMediaFiles.
			</summary>
			<param name="mediaFileNames"></param>
			<param name="cb"></param>
			<returns></returns>
		</member>
		<member name="M:Dvtk.Sessions.IMediaValidator.EndValidateMediaFiles(System.IAsyncResult)">
			<summary>
				End asynchronous ValidateMediaFiles
			</summary>
			<param name="ar"></param>
			<returns></returns>
		</member>
		<member name="T:Dvtk.Sessions.MediaFileContentType">
			<summary>
				Enumerated values for the content of the Media File.
			</summary>
		</member>
		<member name="F:Dvtk.Sessions.MediaFileContentType.MediaFile">
			<summary>
				DICOM File
			</summary>
		</member>
		<member name="F:Dvtk.Sessions.MediaFileContentType.CommandSet">
			<summary>
				CommandSet
			</summary>
		</member>
		<member name="F:Dvtk.Sessions.MediaFileContentType.DataSet">
			<summary>
				DataSet
			</summary>
		</member>
		<member name="T:Dvtk.Sessions.MediaSession">
			<summary>
				Summary description for Session.
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.MediaSession.#ctor">
			<summary>
				Validate DICOM media files.
			</summary>
			<remarks>
				The Dicom Validation Tool (DVT) can also create and validate DICOM media files.
			</remarks>
		</member>
		<member name="M:Dvtk.Sessions.MediaSession.Finalize">
			<summary>
				Finalizer
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.MediaSession.LoadFromFile(System.String)">
			<summary>
				Load a new session from file.
			</summary>
			<param name="sessionFileName">
				file with extension <c>.ses</c>.
			</param>
			<returns>new session</returns>
			<remarks>
				Session settings may be written to a file with extension <c>.ses</c> by
				means of <see cref="T:Dvtk.Sessions.ISessionFileManagement"/>.
			</remarks>
			<exception cref="T:System.ArgumentNullException">
				Argument <c>sessionFileName</c> is a <see langword="null"/> reference.
			</exception>
		</member>
		<member name="M:Dvtk.Sessions.MediaSession.BeginGenerationDICOMDIR(System.String[],System.AsyncCallback)">
			<summary>
				<see cref="M:Dvtk.Sessions.IMediaStorage.BeginGenerationDICOMDIR(System.String[],System.AsyncCallback)"/>
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.MediaSession.GenerateDICOMDIR(System.String[])">
			<summary>
				<see cref="M:Dvtk.Sessions.IMediaStorage.GenerateDICOMDIR(System.String[])"/>
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.MediaSession.EndGenerationDICOMDIR(System.IAsyncResult)">
			<summary>
				<see cref="M:Dvtk.Sessions.IMediaStorage.EndGenerationDICOMDIR(System.IAsyncResult)"/>
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.MediaSession.Validate(DvtkData.Media.DicomFile,Dvtk.Sessions.ValidationControlFlags)">
			<summary>
				<see cref="M:Dvtk.Sessions.IMediaValidation.Validate(DvtkData.Media.DicomFile,Dvtk.Sessions.ValidationControlFlags)"/>
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.MediaSession.Validate(DvtkData.Media.DicomFile,Dvtk.Sessions.ValidationControlFlags,System.String)">
			<summary>
				<see cref="M:Dvtk.Sessions.IMediaValidation.Validate(DvtkData.Media.DicomFile,Dvtk.Sessions.ValidationControlFlags)"/>
			</summary>
			<param name="file"></param>
			<param name="validationControlFlags"></param>
			<param name="fileName"></param>
			<returns></returns>
		</member>
		<member name="M:Dvtk.Sessions.MediaSession.ValidateMediaFiles(System.String[])">
			<summary>
				<see cref="M:Dvtk.Sessions.IMediaValidator.ValidateMediaFiles(System.String[])"/>
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.MediaSession.ValidateMediaFiles(System.String,Dvtk.Sessions.MediaFileContentType,System.String,System.String,System.String)">
			<summary>
				<see cref="M:Dvtk.Sessions.IMediaValidator.ValidateMediaFiles(System.String,Dvtk.Sessions.MediaFileContentType,System.String,System.String,System.String)"/>
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.MediaSession.ValidateMediaFiles(System.String[],System.String,System.Int32)">
			<summary>
				<see cref="M:Dvtk.Sessions.IMediaValidator.ValidateMediaFiles(System.String[],System.String,System.Int32)"/>
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.MediaSession.BeginValidateMediaFiles(System.String[],System.AsyncCallback)">
			<summary>
				<see cref="M:Dvtk.Sessions.IMediaValidator.BeginValidateMediaFiles(System.String[],System.AsyncCallback)"/>
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.MediaSession.EndValidateMediaFiles(System.IAsyncResult)">
			<summary>
				<see cref="M:Dvtk.Sessions.IMediaValidator.EndValidateMediaFiles(System.IAsyncResult)"/>
			</summary>
		</member>
		<member name="T:Dvtk.Sessions.MediaSession.AsyncDICOMDIRGenerationDelegate">
			<summary>
				Asynchronous DICOMDIR Generation delegate.
			</summary>
			<remarks>
				The delegate must have the same signature as the method you want to call asynchronously.
			</remarks>
		</member>
		<member name="T:Dvtk.Sessions.MediaSession.AsyncValidateMediaFilesDelegate">
			<summary>
				Asynchronous ValidateMediaFiles delegate.
			</summary>
			<remarks>
				The delegate must have the same signature as the method you want to call asynchronously.
			</remarks>
		</member>
		<member name="T:Dvtk.Sessions.SutRole">
			<summary>
				Indicates the role that the System Under Test (SUT) plays in the validation test.
			</summary>
		</member>
		<member name="F:Dvtk.Sessions.SutRole.Acceptor">
			<summary>
				It the System Under Test (SUT) is accepting TCP/IP connections.
			</summary>
		</member>
		<member name="F:Dvtk.Sessions.SutRole.Requestor">
			<summary>
				If the System Under Test (SUT) is initiating (requesting) TCP/IP connections.
			</summary>
		</member>
		<member name="F:Dvtk.Sessions.SutRole.AcceptorRequestor">
			<summary>
				The Product can both initiate and accept connections during the validation session.
			</summary>
		</member>
		<member name="T:Dvtk.Sessions.ISutSocketParameters">
			<summary>
				TCP/IP socket connection related parameters for the System Under Test (SUT).
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.ISutSocketParameters.CommunicationRole">
			<summary>
				Indicates the role that the System Under Test (SUT) plays in the validation test.
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.ISutSocketParameters.HostName">
			<summary>
				The name that the Dicom Validation Tool (DVT) should use when making a connection to the
				product machine of the System Under Test (SUT).
			</summary>
			<remarks>
				It is best to enter the Internet Address of the Product (in dot notation).
			</remarks>
		</member>
		<member name="P:Dvtk.Sessions.ISutSocketParameters.Port">
			<summary>
				The port number that the Dicom Validation Tool (DVT) should use when making a
				connection to the product machine of the System Under Test (SUT).
			</summary>
			<remarks>
				Also known as the remote connect port.
			</remarks>
		</member>
		<member name="T:Dvtk.Sessions.ISutDulParameters">
			<summary>
				Dicom Upper Layer (DUL) related parameters for the System Under Test (SUT).
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.ISutDulParameters.AeTitle">
			<summary>
				The DVT AE Title is the application entity name of the SUT machine in the test.
			</summary>
			<exception cref="T:System.ArgumentNullException">
				Argument is a <see langword="null"/> reference.
			</exception>
		</member>
		<member name="P:Dvtk.Sessions.ISutDulParameters.MaximumLengthReceived">
			<summary>
				The maximum length of message fragment (P-DATA-TF PDU)
				that the System Under Test (SUT) can receive from the Dicom Validation Tool (DVT).
			</summary>
			<remarks>
				DICOM DIMSE-messages are split into P-DATA-TF PDU fragments - e.g., C-STORE-RQ of a modality image.
			</remarks>
		</member>
		<member name="P:Dvtk.Sessions.ISutDulParameters.ImplementationClassUid">
			<summary>
				This is the unique identifier (UID) for the Product's implementation of the System Under Test (SUT).
			</summary>
			<remarks>
				<p>
					The UID is assigned by the Manufacturer to the Product implementation to identify it.
					The manufacturer publishes this UID in the product DICOM conformance statement.
				</p>
				<p>
					The Dicom Validation Tool (DVT) checks that the value sent by the Product matches the value given here.
				</p>
			</remarks>
			<exception cref="T:System.ArgumentNullException">
				Argument is a <see langword="null"/> reference.
			</exception>
		</member>
		<member name="P:Dvtk.Sessions.ISutDulParameters.ImplementationVersionName">
			<summary>
				The version name given by the Manufacturer to the Product implementation to identify it internally.
				DVT checks that the value sent by the Product matches the values given here.
			</summary>
			<remarks>
				The implementation version name is an optional field -
				when the Product does not send this value leave this entry blank.
			</remarks>
			<exception cref="T:System.ArgumentNullException">
				Argument is a <see langword="null"/> reference.
			</exception>
		</member>
		<member name="T:Dvtk.Sessions.ISutSystemSettings">
			<summary>
				System parameters for the System Under Test (SUT).
			</summary>
			<remarks>
				Implements; <see cref="T:Dvtk.Sessions.ISutSocketParameters"/> and <see cref="T:Dvtk.Sessions.ISutDulParameters"/>.
			</remarks>
		</member>
		<member name="P:Dvtk.Sessions.SutSystemSettings.CommunicationRole">
			<summary>
				<see cref="P:Dvtk.Sessions.ISutSocketParameters.CommunicationRole"/>
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.SutSystemSettings.HostName">
			<summary>
				<see cref="P:Dvtk.Sessions.ISutSocketParameters.HostName"/>
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.SutSystemSettings.Port">
			<summary>
				<see cref="P:Dvtk.Sessions.ISutSocketParameters.Port"/>
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.SutSystemSettings.AeTitle">
			<summary>
				<see cref="P:Dvtk.Sessions.ISutDulParameters.AeTitle"/>
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.SutSystemSettings.MaximumLengthReceived">
			<summary>
				<see cref="P:Dvtk.Sessions.ISutDulParameters.MaximumLengthReceived"/>
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.SutSystemSettings.ImplementationClassUid">
			<summary>
				<see cref="P:Dvtk.Sessions.ISutDulParameters.ImplementationClassUid"/>
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.SutSystemSettings.ImplementationVersionName">
			<summary>
				<see cref="P:Dvtk.Sessions.ISutDulParameters.ImplementationVersionName"/>
			</summary>
		</member>
		<member name="T:Dvtk.Sessions.IValidationOutput">
			<summary>
				Access to commands that generate validation output in the session results output.
			</summary>
			<remarks>
				May be used by the user to report validation-specific results in the session results output.
				The user may perform additional validation checks which he/she wants to write to the
				results output.
			</remarks>
		</member>
		<member name="M:Dvtk.Sessions.IValidationOutput.WriteMessageComparisonResults(DvtkData.ComparisonResults.MessageComparisonResults)">
			<summary>
				Write the message comparison result to the output results.
			</summary>
			<param name="messageComparisonResults">Message comparison results to output.</param>
		</member>
		<member name="M:Dvtk.Sessions.IValidationOutput.WriteValidationError(System.String)">
			<summary>
				Write a validation specific error to the output results.
			</summary>
			<param name="text">text for the output</param>
		</member>
		<member name="M:Dvtk.Sessions.IValidationOutput.WriteValidationWarning(System.String)">
			<summary>
				Write a validation specific warning to the output results.
			</summary>
			<param name="text">text for the output</param>
		</member>
		<member name="M:Dvtk.Sessions.IValidationOutput.WriteValidationInformation(System.String)">
			<summary>
				Write a validation specific information to the output results.
			</summary>
			<param name="text">text for the output</param>
		</member>
		<member name="T:Dvtk.DvtkDataHelper">
			<summary>

			</summary>
		</member>
		<member name="M:Dvtk.DvtkDataHelper.ReadFMIFromFile(System.String)">
			<summary>
				DEPRICATED - see similar method below with extra useUnVrDefinitionLookUp parameter.
				Read the FMI from the given Media file.
			</summary>
			<param name="dataSetFileName">Media filename to read.</param>
			<returns>Imported FileMetaInformation.</returns>
		</member>
		<member name="M:Dvtk.DvtkDataHelper.ReadFMIFromFile(System.String,System.Boolean)">
			<summary>
				Read the FMI from the given Media file. The useUnVrDefinitionLookUp parameter is used to indicate whether
				the definition files loaded should be used to get the real VR of an attributed decoded with a VR of UN.
				When set true a definition lookup for the real VR will be made and the corresponding attribute value
				decoded usign this looked up VR.
				When set false no look up will be done for attributes decoded with a UN VR. The attribute values will be
				decoded with VR of UN.
			</summary>
			<param name="dataSetFileName">Media filename to read.</param>
			<param name="useUnVrDefinitionLookUp">Boolean - UN VR Definition LookUp.</param>
			<returns>Imported FileMetaInformation.</returns>
		</member>
		<member name="M:Dvtk.DvtkDataHelper.ReadDataSetFromFile(System.String)">
			<summary>
				DEPRICATED - see similar method below with extra useUnVrDefinitionLookUp parameter.
				Read a DataSet from the given Media file.
			</summary>
			<param name="dataSetFileName">Media filename to read.</param>
			<returns>Imported Dataset.</returns>
		</member>
		<member name="M:Dvtk.DvtkDataHelper.ReadDataSetFromFile(System.String,System.Boolean)">
			<summary>
				Read a DataSet from the given Media file. The useUnVrDefinitionLookUp parameter is used to indicate whether
				the definition files loaded should be used to get the real VR of an attributed decoded with a VR of UN.
				When set true a definition lookup for the real VR will be made and the corresponding attribute value
				decoded usign this looked up VR.
				When set false no look up will be done for attributes decoded with a UN VR. The attribute values will be
				decoded with VR of UN.
			</summary>
			<param name="dataSetFileName">Media filename to read.</param>
			<param name="useUnVrDefinitionLookUp">Boolean - UN VR Definition LookUp.</param>
			<returns>Imported Dataset.</returns>
		</member>
		<member name="M:Dvtk.DvtkDataHelper.WriteDataSetToFile(DvtkData.Media.DicomFile,System.String)">
			<summary>
				Write a dicom file object to a (persistent) Media Storage file.
			</summary>
			<param name="file">dicom file object to write</param>
			<param name="mediaFileName">file name to write to</param>
			<returns></returns>
		</member>
		<member name="M:Dvtk.DvtkDataHelper.WriteDataSet(DvtkData.Dimse.DataSet,System.String,System.String)">
			<summary>
				Write DICOM object to a (persistent) Media Storage file.
			</summary>
			<param name="dataSet">dicom object to write</param>
			<param name="mediaFileName">file name to write to</param>
			<param name="transferSyntax">with transfer syntax to write</param>
			<returns></returns>
		</member>
		<member name="M:Dvtk.DvtkDataHelper.ComputeItemOffset(DvtkData.Dimse.DataSet,System.String)">
			<summary>
				Compute the Item Offset for DICOMDIR.
			</summary>
			<param name="dataSet">DICOM Seq Item</param>
			<param name="transferSyntax">with transfer syntax</param>
			<returns>Offset</returns>
		</member>
		<member name="M:Dvtk.DvtkDataHelper.ComparePixelAttributes(DvtkData.Dimse.Attribute,DvtkData.Dimse.Attribute)">
			<summary>
				Compare two pixel attributes (i.e. attributes that have VR OB, OF or OW).
			</summary>
			<param name="attribute1">The first attribute.</param>
			<param name="attribute2">The second attribute.</param>
			<returns>Indicates if the two are equal or not.</returns>
		</member>
		<member name="T:Dvtk.Certificates.SignatureAlgorithm">
			<summary>
				Type of security key algorithm.
			</summary>
		</member>
		<member name="F:Dvtk.Certificates.SignatureAlgorithm.RSA">
			<summary>
				RSA – Rivest-Shamir-Adleman.
				A public key algorithm that provides both digital signatures and encryption.
				Also the name of the company that developed this and other algorithms.
			</summary>
		</member>
		<member name="F:Dvtk.Certificates.SignatureAlgorithm.DSA">
			<summary>
				DSA – Digital Signature Algorithm.
				A method for computing digital signatures.
			</summary>
		</member>
		<member name="T:Dvtk.Certificates.CertificateGenerator">
			<summary>
				Certificate Generator - Generates certificates in a specified certificate file.
			</summary>
			<remarks>
				Various properties of the certificate can be set before generation.
			</remarks>
		</member>
		<member name="F:Dvtk.Certificates.CertificateGenerator.DefaultCertificateFile">
			<summary>
				Certificate file name.
			</summary>
		</member>
		<member name="F:Dvtk.Certificates.CertificateGenerator.DefaultCredentialsFile">
			<summary>
				Default Credentials File name
			</summary>
		</member>
		<member name="F:Dvtk.Certificates.CertificateGenerator.DefaultPrivateKeyFile">
			<summary>
				Default PrivateKey File name
			</summary>
		</member>
		<member name="M:Dvtk.Certificates.CertificateGenerator.Generate">
			<summary>
				Generate a certificate with the current settings.
			</summary>
		</member>
		<member name="P:Dvtk.Certificates.CertificateGenerator.CertificateFile">
			<summary>
				Certificate file to be generated.
			</summary>
			<exception cref="T:System.ArgumentNullException">
				Argument is a <see langword="null"/> reference.
			</exception>
		</member>
		<member name="P:Dvtk.Certificates.CertificateGenerator.CommonName">
			<summary>
				Common Name
			</summary>
			<remarks>
				The name of your server as it appears in the server's URL (for example, www.acme.com).
				This name must be identical to the fully qualified domain name of the server for
				which you are requesting a certificate.
				Do not include the protocol specifier (http://) or any port numbers or pathnames
				in the common name. Do not use use wildcards such as * or ?, and do not use an IP address.
			</remarks>
		</member>
		<member name="P:Dvtk.Certificates.CertificateGenerator.Country">
			<summary>
				Country
			</summary>
			<remarks>
				The two-letter ISO abbreviation for the country (for example, US for the United States).
			</remarks>
		</member>
		<member name="P:Dvtk.Certificates.CertificateGenerator.Locality">
			<summary>
				Locality
			</summary>
			<remarks>
				Usually the name of the city in which your organization has its head office.
			</remarks>
		</member>
		<member name="P:Dvtk.Certificates.CertificateGenerator.Organization">
			<summary>
				Organization
			</summary>
			<remarks>
				The name under which your organization is registered.
				This organization must own the domain name that appears in common name of your server.
			</remarks>
		</member>
		<member name="P:Dvtk.Certificates.CertificateGenerator.OrganizationalUnit">
			<summary>
				Organizational Unit
			</summary>
			<remarks>
				Normally the name of the department or group that will be using the secure server.
			</remarks>
		</member>
		<member name="P:Dvtk.Certificates.CertificateGenerator.State">
			<summary>
				State
			</summary>
			<remarks>
				Usually the name of the state in which your organization has its head office.
			</remarks>
		</member>
		<member name="P:Dvtk.Certificates.CertificateGenerator.CredentialsFile">
			<summary>
				The signer's credentials file - may be <see langword="null"/>.
			</summary>
			<remarks>
				If credential file <see langword="null"/>, a self signed certificate will be generated.
			</remarks>
		</member>
		<member name="P:Dvtk.Certificates.CertificateGenerator.CredentialsFilePassword">
			<summary>
				Password for the signer's credentials file
			</summary>
		</member>
		<member name="P:Dvtk.Certificates.CertificateGenerator.PrivateKeyFile">
			<summary>
				Private Key file to be generated
			</summary>
			<exception cref="T:System.ArgumentNullException">
				Argument is a <see langword="null"/> reference.
			</exception>
		</member>
		<member name="P:Dvtk.Certificates.CertificateGenerator.PrivateKeyPassword">
			<summary>
				Private key password
			</summary>
		</member>
		<member name="P:Dvtk.Certificates.CertificateGenerator.SignatureKeyLength">
			<summary>
				Number of bits use in the signing algorithm
			</summary>
		</member>
		<member name="P:Dvtk.Certificates.CertificateGenerator.SignatureAlgorithm">
			<summary>
				Signature Algorithm
			</summary>
		</member>
		<member name="P:Dvtk.Certificates.CertificateGenerator.ValidFromDate">
			<summary>
				The beginning date for the validity of the certificate.
			</summary>
		</member>
		<member name="P:Dvtk.Certificates.CertificateGenerator.ValidToDate">
			<summary>
				The ending date for the validity of the certificate.
			</summary>
		</member>
		<member name="P:Dvtk.Certificates.CertificateGenerator.SelfSign">
			<summary>
				Specify whether to use self signing
			</summary>
		</member>
		<member name="T:Dvtk.Sessions.IDvtSocketParameters">
			<summary>
				TCP/IP socket connection related parameters for the Dicom Validation Tool (DVT).
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.IDvtSocketParameters.Port">
			<summary>
				The port that the System Under Test (SUT) should use when making a connection to
				the Dicom Validation Tool (DVT).
			</summary>
			<remarks>
				Also known as the local listen port.
			</remarks>
		</member>
		<member name="P:Dvtk.Sessions.IDvtSocketParameters.SocketTimeout">
			<summary>
				The period that the Dicom Validation Tool (DVT) will listen for incomming messages
				on the TCP/IP connection before automatically aborting the session.
			</summary>
		</member>
		<member name="T:Dvtk.Sessions.IDvtDulParameters">
			<summary>
				Dicom Upper Layer (DUL) related parameters for the Dicom Validation Tool (DVT).
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.IDvtDulParameters.AeTitle">
			<summary>
				The DVT AE Title is the application entity name of the DVT machine in the test.
			</summary>
			<exception cref="T:System.ArgumentNullException">
				Argument is a <see langword="null"/> reference.
			</exception>
		</member>
		<member name="P:Dvtk.Sessions.IDvtDulParameters.MaximumLengthReceived">
			<summary>
				The maximum length of message fragment (P-DATA-TF PDU)
				that the Dicom Validation Tool (DVT) can receive from the System Under Test (SUT).
			</summary>
			<remarks>
				DICOM DIMSE-messages are split into P-DATA-TF PDU fragments - e.g., C-STORE-RQ of a modality image.
			</remarks>
		</member>
		<member name="P:Dvtk.Sessions.IDvtDulParameters.ImplementationClassUid">
			<summary>
				This is the unique identifier (UID) for the Dicom Validation Tool (DVT) implementation.
			</summary>
			<remarks>
				<p>
					The UID identifies the release of the Dicom Validation Tool (DVT).
				</p>
				<p>
					The Dicom Validation Tool (DVT) sents this UID during communication with the System Under Test (SUT).
				</p>
				<p>
					The number starts is composed of the following items<br></br>
					[ASCII(d)].[ASCII(v)].[ASCII(t)].[year].[version_major].[version_minor]<br></br>
					<c>1.2.826.0.1.3680043.2.1545.1.2.1.7</c>
				</p>
			</remarks>
			<exception cref="T:System.ArgumentNullException">
				Argument is a <see langword="null"/> reference.
			</exception>
		</member>
		<member name="P:Dvtk.Sessions.IDvtDulParameters.ImplementationVersionName">
			<summary>
				This is the implementation version name for the Dicom Validation Tool (DVT) implementation.
			</summary>
			<remarks>
				The version is composed of the folloqing items<br></br>
				[dvt][version_major].[version_minor]<br></br>
				<c>dvtx.x</c>
			</remarks>
			<exception cref="T:System.ArgumentNullException">
				Argument is a <see langword="null"/> reference.
			</exception>
		</member>
		<member name="T:Dvtk.Sessions.IDvtSystemSettings">
			<summary>
				System parameters for the Dicom Validation Tool (DVT).
			</summary>
			<remarks>
				Implements; <see cref="T:Dvtk.Sessions.IDvtSocketParameters"/> and <see cref="T:Dvtk.Sessions.IDvtDulParameters"/>.
			</remarks>
		</member>
		<member name="P:Dvtk.Sessions.DvtSystemSettings.Port">
			<summary>
				<see cref="P:Dvtk.Sessions.IDvtSocketParameters.Port"/>
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.DvtSystemSettings.SocketTimeout">
			<summary>
				<see cref="P:Dvtk.Sessions.IDvtSocketParameters.SocketTimeout"/>
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.DvtSystemSettings.AeTitle">
			<summary>
				<see cref="P:Dvtk.Sessions.IDvtDulParameters.AeTitle"/>
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.DvtSystemSettings.MaximumLengthReceived">
			<summary>
				<see cref="P:Dvtk.Sessions.IDvtDulParameters.MaximumLengthReceived"/>
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.DvtSystemSettings.ImplementationClassUid">
			<summary>
				<see cref="P:Dvtk.Sessions.IDvtDulParameters.ImplementationClassUid"/>
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.DvtSystemSettings.ImplementationVersionName">
			<summary>
				<see cref="P:Dvtk.Sessions.IDvtDulParameters.ImplementationVersionName"/>
			</summary>
		</member>
		<member name="T:Dvtk.Sessions.TlsVersionFlags">
			<summary>
				Protocols Supported
			</summary>
			<remarks>
				<p>
					The use of the secure transport is optional and
					must be turned on in the configuration of the session.
				</p>
				<p>
					By default, a new session will not use secure sockets.
				</p>
				<p>
					The following protocols are supported for secure transport:
					<list type="bullet">
						<item>
							<term>TLS version 1.0</term>
							<description>
								Transport Layer Security (TLS).
								Required by DICOM [DICOM, 3.15, B.1] and IHE [IHE2, 4.32.4.1.2]. (default)
							</description>
						</item>
						<item>
							<term>SSL version 3.0</term>
							<description>
								Secure Socket Layer (SSL).
								Required for compatibility with different implementations.
							</description>
						</item>
					</list>
				</p>
				<p>
					Which protocol to use will be configurable.
					Multiple of the protocols can be configured at the same time.
					In that case, the server will accept any of the configured protocols.
					A client will use the highest protocol in the order of the list above that the server supports.
					If a security failure occurs in establishing a connection or while transmitting data,
					the socket will be closed.  (This is TLS/SSL behavior).
					The protocols support the following features, which can use different mechanisms
					to implement the feature.
					DICOM only defines a minimum set of mechanisms that must be supported.
					Additional, undefined by DICOM, mechanisms are allowed.
				</p>
			</remarks>
		</member>
		<member name="F:Dvtk.Sessions.TlsVersionFlags.TLS_VERSION_TLSv1">
			<summary>
				TLS version 1.0
			</summary>
			<remarks>
				Required by DICOM [DICOM, 3.15, B.1] and IHE [IHE2, 4.32.4.1.2]. (default)
			</remarks>
		</member>
		<member name="F:Dvtk.Sessions.TlsVersionFlags.TLS_VERSION_SSLv3">
			<summary>
				SSL version 3.0
			</summary>
			<remarks>
				Required for compatibility with different implementations
			</remarks>
		</member>
		<member name="T:Dvtk.Sessions.CipherFlags">
			<summary>
				Flags indicating the type of security used.
			</summary>
			<remarks>
				Combination of;
				<list type="bullet">
					<item>
						<term>Entity Authentication</term>
						<description>Mechanisms that allow for checking the integrity of the data transmitted.</description>
					</item>
					<item>
						<term>Key Exchange</term>
						<description>
							DICOM calls this “Exchange of Master Secrets”.
							This is the method that is used to exchange the symmetric key to be used
							for encoding the messages
						</description>
					</item>
					<item>
						<term>Data Integrity</term>
						<description>Mechanisms that allow for checking the integrity of the data transmitted.</description>
					</item>
					<item>
						<term>Privacy</term>
						<description>Mechanisms that allow for encrypting the data sent.</description>
					</item>
				</list>
			</remarks>
		</member>
		<member name="F:Dvtk.Sessions.CipherFlags.TLS_AUTHENICATION_METHOD_RSA">
			<summary>
				Rivest-Shamir-Adleman.
				A public key algorithm that provides both digital signatures and encryption.
				Also the name of the company that developed this and other algorithms.
			</summary>
		</member>
		<member name="F:Dvtk.Sessions.CipherFlags.TLS_AUTHENICATION_METHOD_DSA">
			<summary>
				DSA – Digital Signature Algorithm.
				A method for computing digital signatures.
			</summary>
		</member>
		<member name="F:Dvtk.Sessions.CipherFlags.TLS_KEY_EXCHANGE_METHOD_RSA">
			<summary>
				Rivest-Shamir-Adleman.
				A public key algorithm that provides both digital signatures and encryption.
				Also the name of the company that developed this and other algorithms.
			</summary>
		</member>
		<member name="F:Dvtk.Sessions.CipherFlags.TLS_KEY_EXCHANGE_METHOD_DH">
			<summary>
				DH – Diffie-Hellman algorithm.
				An algorithm used to exchange symmetric keys.
			</summary>
		</member>
		<member name="F:Dvtk.Sessions.CipherFlags.TLS_DATA_INTEGRITY_METHOD_SHA1">
			<summary>
				Secure Hash Algorithm.
				Used to generate a cryptographic hash (or checksum).
				FIPS 180-1.
			</summary>
		</member>
		<member name="F:Dvtk.Sessions.CipherFlags.TLS_DATA_INTEGRITY_METHOD_MD5">
			<summary>
				MD5 – Message Digest 5.
				Used to generate a cryptographic hash (or checksum).
				RFC 1321.
			</summary>
		</member>
		<member name="F:Dvtk.Sessions.CipherFlags.TLS_ENCRYPTION_METHOD_NONE">
			<summary>
				No encryption.
			</summary>
		</member>
		<member name="F:Dvtk.Sessions.CipherFlags.TLS_ENCRYPTION_METHOD_3DES">
			<summary>
				Triple DES (also known as 3DES) –
				DES applied 3 times in a row (encode, decode, encode).
				Highly secure, well trusted symmetric key encryption algorithm.
			</summary>
		</member>
		<member name="F:Dvtk.Sessions.CipherFlags.TLS_ENCRYPTION_METHOD_AES128">
			<summary>
				AES – Advanced Encryption Standard.
				Newer symmetric key encryption algorithm.
				Expected to replace Triple DES.
				FIPS (Federal Information Processing Standard) 197.
			</summary>
		</member>
		<member name="F:Dvtk.Sessions.CipherFlags.TLS_ENCRYPTION_METHOD_AES256">
			<summary>
				AES – Advanced Encryption Standard.
				Newer symmetric key encryption algorithm.
				Expected to replace Triple DES.
				FIPS (Federal Information Processing Standard) 197.
			</summary>
		</member>
		<member name="T:Dvtk.Sessions.ISecuritySettings">
			<summary>
				Access to settings for security
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.ISecuritySettings.ApplyChangedSocketParameters">
			<summary>
				Indicates that the contents of one of the files has changed
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.ISecuritySettings.SecureSocketsEnabled">
			<summary>
				Enable or disable secure socket communication
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.ISecuritySettings.TlsPassword">
			<summary>
				Protocol password
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.ISecuritySettings.TlsVersionFlags">
			<summary>
				Protocol(s) Supported
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.ISecuritySettings.CheckRemoteCertificate">
			<summary>
				Verifies the SSL peer and fail the connection if the peer has no ceritificate.
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.ISecuritySettings.CipherFlags">
			<summary>
				Flags indicating the type of security used.
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.ISecuritySettings.CacheTlsSessions">
			<summary>
				Session caching will be optionally supported.
				It can be turned on or off.
				DVT will only support in memory caching.
				Caching will be enabled by default.
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.ISecuritySettings.TlsCacheTimeout">
			<summary>
				Sets the session cache timeout time used by the TLS server.
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.ISecuritySettings.CredentialsFileName">
			<summary>
				Credentials file name
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.ISecuritySettings.CertificateFileName">
			<summary>
				Certificate file name
			</summary>
		</member>
		<member name="T:Dvtk.Results.ResultsReporter">
			<summary>
				Summary description for ResultsReporter.
			</summary>
		</member>
		<member name="M:Dvtk.Results.ResultsReporter.#ctor(System.String)">
			<summary>
				Class constructor.
			</summary>
			<param name="resultsDirectory">Directory where the results files are to be written.</param>
		</member>
		<member name="M:Dvtk.Results.ResultsReporter.Start(System.String)">
			<summary>
				Start the results reporting to the given file.
			</summary>
			<param name="filename">Results filename.</param>
		</member>
		<member name="M:Dvtk.Results.ResultsReporter.Stop">
			<summary>
				Stop the results reporting.
			</summary>
		</member>
		<member name="M:Dvtk.Results.ResultsReporter.WriteMessageComparisonResults(DvtkData.ComparisonResults.MessageComparisonResults)">
			<summary>
				Write the Message Comparision Results to the results reporter.
			</summary>
			<param name="messageComparisonResults">Message comparison results.</param>
		</member>
		<member name="M:Dvtk.Results.ResultsReporter.WriteValidationError(System.String)">
			<summary>
				Write the Validation Error message to the results reporter.
			</summary>
			<param name="message">Error message.</param>
		</member>
		<member name="M:Dvtk.Results.ResultsReporter.WriteValidationInformation(System.String)">
			<summary>
				Write the Validation Information message to the results reporter.
			</summary>
			<param name="message">Information message.</param>
		</member>
		<member name="M:Dvtk.Results.ResultsReporter.WriteHtmlInformation(System.String)">
			<summary>
				Write the HTML Information message to the results reporter.
			</summary>
			<param name="htmlMessage">HTML message.</param>
		</member>
		<member name="M:Dvtk.Results.ResultsReporter.WriteValidationWarning(System.String)">
			<summary>
				Write the Validation Warning message to the results reporter.
			</summary>
			<param name="message">Warning message.</param>
		</member>
		<member name="M:Dvtk.Results.ResultsReporter.AddValidationErrors(System.UInt32)">
			<summary>
				Add the given number of errors to the total validation error count.
			</summary>
			<param name="errors">Number of errors to add.</param>
		</member>
		<member name="M:Dvtk.Results.ResultsReporter.AddValidationWarnings(System.UInt32)">
			<summary>
				Add the given number of warnings to the total validation warning count.
			</summary>
			<param name="warnings">Number of warnings to add.</param>
		</member>
		<member name="P:Dvtk.Results.ResultsReporter.NrErrors">
			<summary>
				Property - Total Number of Errors in this session.
			</summary>
		</member>
		<member name="P:Dvtk.Results.ResultsReporter.NrWarnings">
			<summary>
				Property - Total Number of Warnings in this session.
			</summary>
		</member>
		<member name="T:Dvtk.Results.Xslt">
			<summary>
				Summary description of the Results XSLT class.
			</summary>
		</member>
		<member name="M:Dvtk.Results.Xslt.Transform(System.String,System.String)">
			<summary>
				Transform the XML file into HTML. Try to do both the Summary and Detailed files.
			</summary>
			<param name="directory">Results directory.</param>
			<param name="filename">Results filename.</param>
			<returns>Detailed or Summary HTML Results filename.</returns>
		</member>
		<member name="P:Dvtk.Results.Xslt.StyleSheetFullFileName">
			<summary>
				The full file name of the stylesheet used to convert results .xml files to .html files.
				This stylesheet is used e.g. when the property ShowResults is set to true.

				The default value for this property is the executable path append with the file name "DVT_RESULTS.xslt".
			</summary>
		</member>
		<member name="T:Dvtk.Sessions.SerializationWriter">
			<summary>
				Serialization Target class for the detailed and summary results
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.SerializationWriter.#ctor(System.String,System.Boolean,System.UInt32,System.Boolean,System.Boolean)">
			<summary>
				Constructor.
			</summary>
			<param name="fullPathname">Results pathname.</param>
			<param name="parent">bool indicating if the targets are for parent (true) or child (false) documents</param>
			<param name="index">Results index - 0 = parent, non-zero = child.</param>
			<param name="detailRequired">bool indicating if detailed results should be generated.</param>
			<param name="summaryRequired">bool indicating if summary results should be generated.</param>
		</member>
		<member name="M:Dvtk.Sessions.SerializationWriter.WriteEndElement">
			<summary>
				Closes one element and pops the corresponding namespace scope.
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.SerializationWriter.WriteEndDocument">
			<summary>
				Closes any open elements or attributes and puts the writer back in the Start state.
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.SerializationWriter.DetailStreamWriter">
			<summary>
				Property to get the detail stream writer.
			</summary>
		</member>
		<member name="P:Dvtk.Sessions.SerializationWriter.SummaryStreamWriter">
			<summary>
				Property to get the summary stream writer.
			</summary>
		</member>
		<member name="T:Dvtk.Sessions.Serializer">
			<summary>

			</summary>
			<remarks>
				The \n characters are replaced by &#xA; in the XML output!
				#x9 (tab)
				#xA (line feed)
				#xD (carriage return)
				#x20 (space)
				see ms-help://MS.MSDNQTR.2003JUL.1033/cpgenref/html/xsdrefsinglecharacterescape.htm
			</remarks>
		</member>
		<member name="M:Dvtk.Sessions.Serializer.CreateChildSerializationTarget(Wrappers.WrappedSerializerNodeType)">
			<summary>
				Factory method to create child-node for this parent-node.
			</summary>
			<param name="reason"></param>
			<returns>child-node</returns>
		</member>
		<member name="M:Dvtk.Sessions.Serializer.StopTopSerializer">
			<summary>
				Stop serialization process.
				Writes a closure to the serialization target stream.
				Performs internal cleanup.
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.Serializer.EndSerializationTarget">
			<summary>
				DO NOT CALL FROM UI-LAYER. Call between managed adapter and manages layers.
			</summary>
		</member>
		<member name="M:Dvtk.Sessions.Serializer.AddEndCounts(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
			<summary>
				Apply counts at the end of the serialization process.
				These counts are used by EndSerializationTarget to serialize a counts tag.
			</summary>
			<param name="endNrOfGeneralErrors"></param>
			<param name="endNrOfGeneralWarnings"></param>
			<param name="endNrOfUserErrors"></param>
			<param name="endNrOfUserWarnings"></param>
			<param name="endNrOfValidationErrors"></param>
			<param name="endNrOfValidationWarnings"></param>
		</member>
		<member name="T:Dvtk.Sessions.Serializer.SerializationStatus">
			<summary>
				Status of the serialization in the workflow;
				Start, Stop
			</summary>
		</member>
		<member name="T:Dvtk.Sessions.StorageMode">
			<summary>
				Storage mode
			</summary>
		</member>
		<member name="F:Dvtk.Sessions.StorageMode.AsMedia">
			<summary>
				Any received storage IOD will be stored in
				the DICOM Media Storage File format (i.e., including the File Prefix,
				DICOM Preamble and File Meta Information) with a file extension .DCM.
				<p>
					Any OB/OF/OW data associated with the stored media will be stored in .PIX files.
				</p>
			</summary>
		</member>
		<member name="F:Dvtk.Sessions.StorageMode.AsMediaOnly">
			<summary>
				Any received storage IOD will be stored in
				the DICOM Media Storage File format (i.e., including the File Prefix,
				DICOM Preamble and File Meta Information) with a file extension .DCM.
			</summary>
		</member>
		<member name="F:Dvtk.Sessions.StorageMode.AsDataSet">
			<summary>
				Any received storage IOD will be stored in
				a “raw” format with only the Dataset being saved.
				The file extension is .RAW.
				<p>
					Any OB/OF/OW data associated with the stored dataset will be stored in .PIX files.
				</p>
			</summary>
		</member>
		<member name="F:Dvtk.Sessions.StorageMode.TemporaryPixelOnly">
			<summary>
				DO NOT USE! INTERNAL USE ONLY!
			</summary>
		</member>
		<member name="F:Dvtk.Sessions.StorageMode.NoStorage">
			<summary>
				Do not store any received storage IOD.
				<p>
					Any OB/OF/OW attributes will be displayed with the value “DATA NOT STORED”
					when this storage mode is selected.
				</p>
			</summary>
		</member>
		<member name="T:Dvtk.Sessions.LogLevelFlags">
			<summary>
				Possible log level flags.
			</summary>
		</member>
		<member name="F:Dvtk.Sessions.LogLevelFlags.None">
			<summary>
				None
			</summary>
		</member>
		<member name="F:Dvtk.Sessions.LogLevelFlags.Error">
			<summary>
				Error
			</summary>
		</member>
		<member name="F:Dvtk.Sessions.LogLevelFlags.Debug">
			<summary>
				Debug
			</summary>
		</member>
		<member name="F:Dvtk.Sessions.LogLevelFlags.Warning">
			<summary>
				Warning
			</summary>
		</member>
		<member name="F:Dvtk.Sessions.LogLevelFlags.Info">
			<summary>
				Info
			</summary>
		</member>
		<member name="F:Dvtk.Sessions.LogLevelFlags.Script">
			<summary>
				Script
			</summary>
		</member>
		<member name="F:Dvtk.Sessions.LogLevelFlags.ScriptName">
			<summary>
				Script name
			</summary>
		</member>
		<member name="F:Dvtk.Sessions.LogLevelFlags.PduBytes">
			<summary>
				PduBytes
			</summary>
		</member>
		<member name="F:Dvtk.Sessions.LogLevelFlags.DulpFsm">
			<summary>
				DulpFsm
			</summary>
		</member>
		<member name="F:Dvtk.Sessions.LogLevelFlags.ImageRelation">
			<summary>
				ImageRelation
			</summary>
		</member>
		<member name="F:Dvtk.Sessions.LogLevelFlags.Print">
			<summary>
				Print
			</summary>
		</member>
		<member name="F:Dvtk.Sessions.LogLevelFlags.Label">
			<summary>
				Label
			</summary>
		</member>
		<member name="F:Dvtk.Sessions.LogLevelFlags.MediaFilename">
			<summary>
				Media filename
			</summary>
		</member>
		<member name="T:Dvtk.NamespaceDoc">
			<summary>
				<p>
					The main component interface for the Dicom Validation ToolKit.
					This assembly can be used to perform DICOM validation tests.
				</p>
				<p>
					The <c>Sessions</c> namespace defines various session classes.
					Validation tests are performed within the context of sessions.
				</p>
				<p>
					The <c>Events</c> namespace defines events to signal the user (integrating application)
					about reports generated by the component.
				</p>
				<p>
					The <see cref="T:Dvtk.Setup"/> is an entry-point for the component. It is used to ensure that
					the component is properly initialized and terminated.
				</p>
				<p>
					The <c>Security</c> namespace is used to set certificates and credentials used
					within a test session.
				</p>
				<p>
					The <c>Certificates</c> namespace is used to create test certificates.
				</p>
			</summary>
		</member>
		<member name="T:Dvtk.Certificates.NamespaceDoc">
			<summary>
				Contains a certificate generator. Use this generator to create new certificate files.
			</summary>
		</member>
		<member name="T:Dvtk.Events.NamespaceDoc">
			<summary>
				<p>
					Events may be used to tightly couple a GUI application to the component.
					The events provide a continues progress about activities performed by the component
					during the validation process.
					These activities have various levels.
				</p>
				<p>
					The listening application can subscribe to these events by means of a
					<see cref="T:Dvtk.Events.ActivityReportEventHandler"/>.
				</p>
			</summary>
		</member>
		<member name="T:Dvtk.Security.NamespaceDoc">
			<summary>
				During communication over TCP/IP, the OpenSSL protocols may be used.
				This requires the use of certificates (public keys) and credentials (private keys).
				The classes within this namespace are used to set the certificates and credentials
				for the validation test session.
			</summary>
		</member>
		<member name="T:Dvtk.Sessions.NamespaceDoc">
			<summary>
				<p>
					Validation tests are performed within the context of sessions.
					There are three kinds of sessions supported by the component;
					<list type="bullet">
						<item>
							<see cref="T:Dvtk.Sessions.ScriptSession"/>
						</item>
						<item>
							<see cref="T:Dvtk.Sessions.MediaSession"/>
						</item>
						<item>
							<see cref="T:Dvtk.Sessions.EmulatorSession"/>
						</item>
					</list>
				</p>
				<p>
					There is a large collection of interfaces defined within this namespace.
					DO NOT BE INTIMIDATED by the number of interfaces. They just provide views
					on top of the session classes. A session class typically implements several interfaces.
				</p>
			</summary>
		</member>
	</members>
</doc>
