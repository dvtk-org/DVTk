<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DvtkHighLevelInterface</name>
    </assembly>
    <members>
        <member name="T:DvtkHighLevelInterface.Dicom.UserInterfaces.DicomThreadOptionsUserControl">
            <summary>
            Summary description for DicomThreadOptionsUserControl.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.UserInterfaces.DicomThreadOptionsUserControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.UserInterfaces.DicomThreadOptionsUserControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.UserInterfaces.DicomThreadOptionsUserControl.localAeTitleVisible">
            <summary>
            See property LocalAeTitleVisible.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.UserInterfaces.DicomThreadOptionsUserControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.UserInterfaces.DicomThreadOptionsUserControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.UserInterfaces.DicomThreadOptionsUserControl.textBoxLocalAeTitle_KeyUp(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Called when a key is released.
            This method is needed to be able to send an OptionChangedEvent if needed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.UserInterfaces.DicomThreadOptionsUserControl.textBoxLocalAeTitle_Validating(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Validate the characters entered when the control looses focus.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.UserInterfaces.DicomThreadOptionsUserControl.textBoxLocalPort_KeyUp(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Called when a key is released.
            This method is needed to be able to send an OptionChangedEvent if needed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.UserInterfaces.DicomThreadOptionsUserControl.textBoxLocalPort_Validating(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Validate the characters entered when the control looses focus.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.UserInterfaces.DicomThreadOptionsUserControl.textBoxRemoteAeTitle_KeyUp(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Called when a key is released.
            This method is needed to be able to send an OptionChangedEvent if needed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.UserInterfaces.DicomThreadOptionsUserControl.textBoxRemoteAeTitle_Validating(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Validate the characters entered when the control looses focus.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.UserInterfaces.DicomThreadOptionsUserControl.textBoxRemoteIpAddress_KeyUp(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Called when a key is released.
            This method is needed to be able to send an OptionChangedEvent if needed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.UserInterfaces.DicomThreadOptionsUserControl.textBoxRemoteIpAddress_Validating(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Validate the characters entered when the control looses focus.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.UserInterfaces.DicomThreadOptionsUserControl.textBoxRemotePort_KeyUp(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Called when a key is released.
            This method is needed to be able to send an OptionChangedEvent if needed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.UserInterfaces.DicomThreadOptionsUserControl.textBoxRemotePort_Validating(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Validate the characters entered when the control looses focus.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.UserInterfaces.DicomThreadOptionsUserControl.UpdateUserControl">
            <summary>
            Update the complete user control.
            </summary>
        </member>
        <member name="E:DvtkHighLevelInterface.Dicom.UserInterfaces.DicomThreadOptionsUserControl.OptionChangedEvent">
            <summary>
            An event triggered when an option has changed.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.UserInterfaces.DicomThreadOptionsUserControl.LocalAeTitleVisible">
            <summary>
            Gets or sets a boolean indicating if the local AE title control should be visible.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.UserInterfaces.DicomThreadOptionsUserControl.DicomThreadOptions">
            <summary>
            Gets or sets the DicomThread options instance used by this control.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.UserInterfaces.DicomThreadOptionsUserControl.LocalPortVisible">
            <summary>
            Gets or sets a boolean indicating if the local port should be visible.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.UserInterfaces.DicomThreadOptionsUserControl.RemoteAeTitleVisible">
            <summary>
            Gets or sets a boolean indicating if the remote AE title should be visible.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.UserInterfaces.DicomThreadOptionsUserControl.RemoteIpAddressVisible">
            <summary>
            Gets or sets a boolean indicating if the remote IP address should be visible.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.UserInterfaces.DicomThreadOptionsUserControl.RemotePortVisible">
            <summary>
            Gets or sets a boolean indicating if the remote port should be visible.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.UserInterfaces.DicomThreadOptionsUserControl.RemoteAeTitleLabel">
            <summary>
            Gets or sets a boolean indicating if the remote AE title label should be visible.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.UserInterfaces.DicomThreadOptionsUserControl.RemotePortLabel">
            <summary>
            Gets or sets a boolean indicating if the remote port label should be visible.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.UserInterfaces.DicomThreadOptionsUserControl.RemoteIpAddressLabel">
            <summary>
            Gets or sets a boolean indicating if the remote IP address label should be visible.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Dicom.UserInterfaces.DicomThreadOptionsUserControl.OptionChangedEventHandler">
            <summary>
            Delegate used for the OptionChangedEvent.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Dicom.Threads.MessageIterator">
            <summary>
            This class represents a framework to loop through received messages and
            react on these. How to react on messsages may both be implemented by a
            descendant of this class and by attached MessageHandlers. This class makes it
            easier to implements SCP's.
            
            Typical behaviour that is implemented in a descendant of this class and not 
            in a MessageHandler is control of flow (e.g. determining when to stop listening
            for new messages, handling the A-ASSOCIATE-RQ, ...).
            
            Advantages of using this class instead of looping through received messages in your
            own classes:
            - Single way to loop through received messages resulting in more code resembling each other
              and avoiding code duplication.
            - More easier to re-use code: MessageHandlers may be used in more then one MessageIteraror
              descendant.
            - "Simpel" MessageHandlers may be combined to implement more complex behaviour in a
              MessageIterator descendant they are attached to.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Dicom.Threads.DicomThread">
            <summary>
            Represents a single thread in which Dicom communication may be tested.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Threads.Thread">
            <summary>
            This class contains the shared threading functionality of a DicomThread and Hl7Thread.
            
            To create a descendant class, do at least the following (DicomThread class may be used as an example):
            - Implement the StopCurrentThread method.
            - Implement the WriteError, WriteInformation and WriteWarning methods.
            - Implement the method ThreadEntryPoint. Within this method, the method Execute must be called.
            - Call the methods TriggerErrorOutputEvent, TriggerInformationOutputEvent and TriggerWarningOutputEvent
              whenever some Error, Information or Warning output is available (this is needed whenever some UserInface
              like the HliConsole or HliForm needs to be attached to the descendant class).
              
            The user of the descendant class on its turn at least needs to implement the Execute method.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Threads.Thread.attachedUserInterfaces">
            <summary>
            See property AttachedUserInterfaces.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Threads.Thread.childs">
            <summary>
            The child Threads.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Threads.Thread.dotNetThread">
            <summary>
            The .Net thread that performs the actual execution in a seperate thread.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Threads.Thread.hasBeenStarted">
            <summary>
            See property HasBeenStarted.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Threads.Thread.hasExceptionOccured">
            <summary>
            See property HasExceptionOccured.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Threads.Thread.initialMillisecondsToWait">
            <summary>
            Initial number of milliseconds to wait before executing code in the thread.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Threads.Thread.isInitialized">
            <summary>
            Boolean indicating if one of the Initialize methods has already been called.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Threads.Thread.isStopCalled">
            <summary>
            See property IsStopCalled.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Threads.Thread.messages">
            <summary>
            All messages that have been send or received. When needed, messages may be removed 
            using the RemoveMessage or ClearMessages methods.
            
            When using this private field within this class, always lock the MessageLock of the
            ThreadManager first.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Threads.Thread.parent">
            <summary>
            The parent thread if existing. Otherwise null.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Threads.Thread.resultsGatheringStarted">
            <summary>
            Only use property ResultsGatheringStarted to access this field.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Threads.Thread.stopDotNetThread">
            <summary>
            Thread used to stop this object and sub Threads, in order to let the caller of the 
            Stop method not wait.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Threads.Thread.threadLock">
            <summary>
            Use this object to lock fields that may be accessed simultaniously by multiple .Net threads.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Threads.Thread.threadManager">
            <summary>
            See property ThreadManager.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Threads.Thread.threadOptions">
            <summary>
            This field must be set by a descendant of this class,
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Threads.Thread.threads">
            <summary>
            See property threads.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Threads.Thread.threadState">
            <summary>
            The current state of the thread.
            
            Don't use directly in this class but use the ThreadState property instead.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Threads.Thread.topmostThread">
            <summary>
            See property TopmostThread.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Threads.Thread.AddMessage(DvtkHighLevelInterface.Common.Messages.Message)">
            <summary>
            Adds a message that has been received or send by this Thread.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Threads.Thread.AfterCallingExecute">
            <summary>
            Called after the Execute method has been called.
            </summary>
            <remarks>
            Gives the descendant of this class the possibility to perform
            extra actions compared to this base class.
            </remarks>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Threads.Thread.AfterHandlingException(System.Exception)">
            <summary>
            Called after the HandleException method has been called.
            </summary>
            <remarks>
            Gives the descendant of this class the possibility to perform
            extra actions compared to this base class.
            </remarks>
            <param name="exception">Exception that has been handled.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Threads.Thread.AfterWaitingForCompletionChildThreads">
            <summary>
            Called after the WaitForCompletionChildThreads method has been called.
            </summary>
            <remarks>
            Gives the descendant of this class the possibility to perform
            extra actions compared to this base class.
            </remarks>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Threads.Thread.BeforeCallingExecute">
            <summary>
            Called before the Execute method will be called.
            </summary>
            <remarks>
            Gives the descendant of this class the possibility to perform
            extra actions compared to this base class.
            </remarks>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Threads.Thread.BeforeHandlingException(System.Exception)">
            <summary>
            Called before the HandleException method will be called.
            </summary>
            <remarks>
            Gives the descendant of this class the possibility to perform
            extra actions compared to this base class.
            </remarks>
            <param name="exception">Exception that is about to be handled.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Threads.Thread.BeforeWaitingForCompletionChildThreads">
            <summary>
            Called before the WaitForCompletionChildThreads method will be called.
            </summary>
            <remarks>
            Gives the descendant of this class the possibility to perform
            extra actions compared to this base class.
            </remarks>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Threads.Thread.ClearMessages">
            <summary>
             Clears the list of received and send messages.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Threads.Thread.DetermineIdentifier">
            <summary>
            Determines the Identifier (property of the Options of this Thread).
            </summary>
            <remarks>
            Override this method to change the Options.Identifier property if needed.
            <br></br><br></br>
            Default implementation is that when the Identifier is not set, a unique Identifier
            (considering the identifiers of all threads belonging to this ThreadManager) will 
            automatically be determined, in which the Name of this object will be postfixed with
            a number to make it unique.
            </remarks>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Threads.Thread.DetermineName">
            <summary>
            Determines the Name of the instance.
            </summary>
            <remarks>
            Override this method to change the Options.Name property if needed.<br></br><br></br>
            
            Default implementation is that when the Name is not set, the Type of this
            object will be used as name.
            </remarks>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Threads.Thread.DetermineResultsFileNameOnlyWithoutExtension">
            <summary>
            Determines the results file name only without the extension.
            </summary>
            <remarks>
            Override this method to change the Options.ResultsFileNameOnlyWithoutExtension if needed.<br></br><br></br>
            
            Default implementation is that when the results file name only is not set it is set to
            String.Format("{0:000}_{1}_res", (int)Options.SessionId, Options.Identifier) + "{0}".
            </remarks>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Threads.Thread.DisplayException(System.Exception)">
            <summary>
            Displays information about an unhandled exception occuring in this instance.
            </summary>
            <param name="exception">The unhandled exception that has been thrown.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Threads.Thread.Execute">
            <summary>
            The actual test code should be placed in this overriden method.
            </summary>
            <example>
            	<b>VB.NETC#</b>
            	<code>
            			<Example name="IncludesDicomThreadScu">
Imports System
Imports System.IO
Imports System.Windows.Forms
Imports DvtkData.Dimse.VR
Imports DvtkData.Dimse.DimseCommand
Imports DvtkHighLevelInterface
Imports DvtkHighLevelInterface.Dicom.Messages
Imports DvtkHighLevelInterface.Common.UserInterfaces
Imports DvtkHighLevelInterface.Dicom.Threads
</Example>
            			<Example name="DicomThreadScu">
Class DicomThreadScu
    Inherits DicomThread

    Protected Overrides Sub Execute()

        'Sending an association request
        SendAssociateRq _
        ( _
            New DvtkHighLevelInterface.Dicom.Other.PresentationContext("1.2.840.10008.5.1.4.1.1.2", "1.2.840.10008.1.2", "1.2.840.10008.1.2.1") _
        )


        'Receive the associate Ackknowledge 
        'Alternatively you could use ReceiveAssociateAc() method which will throw a 
        'HLIException if the received message is not an associate Ackknowledge
        Dim receivedMessage As DvtkHighLevelInterface.Dicom.Messages.DicomProtocolMessage = Nothing
        receivedMessage = ReceiveMessage()
        'Check wether the received response is indeed an associate ackknowledge
        If Not receivedMessage.IsAssociateAc Then
            If receivedMessage.IsAssociateRj Then
                Throw New System.Exception("Association Rejected.")
            ElseIf receivedMessage.IsAbort Then
                Throw New System.Exception("Abort Message.")
            Else
                'No idea what kind of message was sent back.
                Throw New System.Exception("Received unknown message.")
            End If
        End If


        'Sending a Message
        'We create a DicomMessage configured for C-Store Requests
        Dim aCTStoreRQMessage As DvtkHighLevelInterface.Dicom.Messages.DicomMessage = New DicomMessage(CSTORERQ)
        'Check the AttributeSet.read for documentation on reading files to handle exceptions
        aCTStoreRQMessage.DataSet.Read(ScriptContext._CTImageFullFileName)
        Try
            Send(aCTStoreRQMessage)
        Catch ex As DvtkHighLevelInterface.Common.Other.HliException
            'Error while sending. Handle as you please. 
            'ex.Message.ToString()
        End Try


        'The CStore Response
        Dim aCStoreRSPMessage As DvtkHighLevelInterface.Dicom.Messages.DicomMessage
        aCStoreRSPMessage = ReceiveDicomMessage()
        'make sure it really is a CSTORE Response
        If Not aCStoreRSPMessage.CommandSet.DimseCommand = DvtkData.Dimse.DimseCommand.CSTORERSP Then
            Throw New System.Exception("After a CSTORE Request the SCP returned an unexpected message.")
        End If


        'send a release request
        Try
            SendReleaseRq()
        Catch ex As DvtkHighLevelInterface.Common.Other.HliException
            'You error message. Handle as you please. 
            'ex.Message.ToString()
        End Try


        Dim aReleaseResponseMessage As DvtkHighLevelInterface.Dicom.Messages.ReleaseRp
        'receive the release response
        Try
            aReleaseResponseMessage = ReceiveReleaseRp()
        Catch ex As DvtkHighLevelInterface.Common.Other.HliException
            'You error message. Handle as you please. 
            'ex.Message.ToString()
        End Try

    End Sub

End Class
</Example>
            			<Example name="Main">
Class MainDicomThread
    Inherits DicomThreadScu

End Class 

Class ScriptContext

    ' Full session file name, only needed when not executing script under Dvt(Cmd).
    Public Const _SessionFullFileName As String = "C:\Program Files\DVT\example\scripts\storage\scu\Storage_SCU.ses"
    Public Const _CTImageFullFileName As String = "c:\YourCTImageFile.dcm"

End Class ' ScriptContext

Module DvtkScript

    Sub Main(ByVal CmdArgs() As String)

        Dim theExecutablePath As String = System.Windows.Forms.Application.ExecutablePath
        Dim theExecutableName As String = Path.GetFileName(theExecutablePath).ToLower()

        Dvtk.Setup.Initialize()

        Dim theDvtThreadManager As DvtkHighLevelInterface.Common.Threads.ThreadManager = New DvtkHighLevelInterface.Common.Threads.ThreadManager

        Dim theMainDicomThread As MainDicomThread = New MainDicomThread
        theMainDicomThread.Initialize(theDvtThreadManager)


        theMainDicomThread.Options.LoadFromFile(ScriptContext._SessionFullFileName)
        theMainDicomThread.Options.Identifier = "MainDicomThread"

        Dim theHliForm As HliForm = New HliForm
        theHliForm.AutoExit = False
        theHliForm.Attach(theMainDicomThread)

        theMainDicomThread.Start()

        theHliForm.WaitUntilClosed()

        Dvtk.Setup.Terminate()

    End Sub
</Example>		
            	</code>
            </example>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Threads.Thread.HandleExeption(System.Exception)">
            <summary>
            Handles an unhandled exception in the Execute method.
            
            When the Stop method (which also indirectly causes an exception) was not called,
            information about the exception will be logged in the results.
            </summary>
            <param name="exception">The unhandled exception.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Threads.Thread.Initialize(DvtkHighLevelInterface.Common.Threads.Thread)">
            <summary>
            Initializes this instance.
            </summary>
            <remarks>
            Call one of the Initialize methods directly after creating a Thread instance.
            
            Code that normally would be present in the constructor.
            This code is however put in a separate method to be able to have only
            one constructor in DicomThread. This way, it is easier to derive from a
            DicomThread class.
            
            Use this method if this object should have a parent thread.
            </remarks>
            <param name="parent">The parent Thread.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Threads.Thread.Initialize(DvtkHighLevelInterface.Common.Threads.ThreadManager)">
            <summary>
            Initializes this instance.
            </summary>
            <remarks>
            Call one of the Initialize methods directly after creating a Thread instance.
            
            Code that normally would be present in the constructor.
            This code is however put in a separate method to be able to have only
            one constructor in DicomThread. This way, it is easier to derive from a
            DicomThread class.
            
            Use this method if this threads should not have a parent thread.
            </remarks>
            <param name="threadManager">The ThreadManager that manages this object.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Threads.Thread.RemoveMessage(DvtkHighLevelInterface.Common.Messages.Message)">
            <summary>
            Removes this message from the list of received and send messages.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Threads.Thread.Sleep(System.Int32)">
            <summary>
            Makes the thread sleep for a specified number of milliseconds.
            </summary>
            <param name="milliseconds">Number of milliseconds to sleep.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Threads.Thread.SetThreadState(DvtkHighLevelInterface.Common.Threads.ThreadState)">
            <summary>
            Sets the new ThreadState of this object and fire the ThreadStateChangeEvent.
            </summary>
            <param name="threadState">The new ThreadState.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Threads.Thread.Start">
            <summary>
            Starts the Thread without an initial number of milliseconds to wait.
            </summary>
            <remarks>
            The Thread will only start when it has not already been started.
            </remarks>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Threads.Thread.Start(System.Int32)">
            <summary>
            Start the Thread and wait an initial number of milleseconds before
            executing the code that is defined in the overriden Execute method.
            </summary>
            <remarks>
            The Thread will only start when it has not already been started.
            </remarks>
            <param name="initialMillisecondsToWait">Number of milliseconds.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Threads.Thread.StartResultsGathering">
            <summary>
            Starts the results gathering.
            </summary>
            <remarks>
            This method will only perform the basic administration. The actual starting of the
            results gathering needs to be implemented in the derived class.
            
            When overriding this method, make sure to call this base method first.
            </remarks>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Threads.Thread.Stop">
            <summary>
            Stops this object and all child threads.
            </summary>
            <remarks>
            The caller of this method will not wait until the threads have ended.
            </remarks>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Threads.Thread.StopCurrentThread">
            <summary>
            A descendant class must override this method and do the following to stop the current thread only:
            - Terminate any open connecten (e.g. TCP/IP connection)
            - If that doesn't work, Abort the .netThread associated with this object.
            
            This method will be called in a seperate .Net thread (not in the .Net thread of this object).
            A seperate thread is used to make sure other threads are not waiting while this code is executed.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Threads.Thread.StopResultsGathering">
            <summary>
            Stops the results gathering.
            </summary>
            <remarks>
            This method will only perform the basic administration. The actual stopping of the
            results gathering needs to be implemented in the derived class.
            
            When overriding this method, make sure to call this base method first.
            </remarks>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Threads.Thread.ThreadEntryPoint">
            <summary>
            The thread entry point used by the .Net thread.
            
            This method contains the basic implementation of all Thread classes.
            Other code from a derived class needs to be implemented in the overriden
            ThreadCodeDescendantClass method.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Threads.Thread.TriggerErrorOutputEvent(System.String)">
            <summary>
            Call this method when this object should output an error.
            
            Must be called by a descendant of this class when some error output is available.
            </summary>
            <param name="text">The error text.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Threads.Thread.TriggerInformationOutputEvent(System.String)">
            <summary>
            Call this method when this object should output information.
            
            Must be called by a descendant of this class when some information output is available.
            </summary>
            <param name="text">The information text.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Threads.Thread.TriggerWarningOutputEvent(System.String)">
            <summary>
            Call this method when this object should output a warning.
            
            Must be called by a descendant of this class when some warning output is available.
            </summary>
            <param name="text">The warning text.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Threads.Thread.WaitForCompletion">
            <summary>
            Waits until this object has the ThreadState UnStarted or Stopped.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Threads.Thread.WaitForCompletionChildThreads">
            <summary>
            Waits until all child Threads are either unstarted or stopped.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Threads.Thread.WriteError(System.String)">
            <summary>
            Writes an error text to the results and triggers an ErrorOutputEvent.
            </summary>
            <remarks>
            When this instance is e.g. attached to a HliForm, the supplied error text will be
            displayed in this Form (the triggered ErrorOutputEvent is used for this).<br></br><br></br>
            
            This method needs to be overridden in a descendant class.
            </remarks>
            <param name="text">The error text.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Threads.Thread.WriteErrorCurrentThread(System.String)">
            <summary>
            If called within a HLI Thread, calls the WriteError method of this Thread.
            Otherwise, writes the text to the console.
            </summary>
            <param name="text">The error text.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Threads.Thread.WriteInformation(System.String)">
            <summary>
            Writes an information text to the results and triggers an InformationOutputEvent.
            </summary>
            <remarks>
            When this instance is e.g. attached to a HliForm, the supplied information text will be
            displayed in this Form (the triggered InformationOutputEvent is used for this).<br></br><br></br>
            
            This method needs to be overridden in a descendant class.
            </remarks>
            <param name="text">The information text.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Threads.Thread.WriteInformationCurrentThread(System.String)">
            <summary>
            If called within a HLI Thread, calls the WriteInformation method of this Thread.
            Otherwise, writes the text to the console.
            </summary>
            <param name="text">The information text.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Threads.Thread.WriteWarning(System.String)">
            <summary>
            Writes a warning text to the results and triggers a WarningOutputEvent.
            </summary>
            <remarks>
            When this instance is e.g. attached to a HliForm, the supplied warning text will be
            displayed in this Form (the triggered WarningOutputEvent is used for this).<br></br><br></br>
            
            This method needs to be overridden in a descendant class.
            </remarks>
            <param name="text">The warning text.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Threads.Thread.WriteWarningCurrentThread(System.String)">
            <summary>
            If called within a HLI Thread, calls the WriteWarning method of this Thread.
            Otherwise, writes the text to the console.
            </summary>
            <param name="text">The warning text.</param>
        </member>
        <member name="E:DvtkHighLevelInterface.Common.Threads.Thread.ErrorOutputEvent">
            <summary>
            Event is fired when some error output is available (must be implemented by descendant of this
            class by calling the TriggerErrorOutputEvent method).
            </summary>
        </member>
        <member name="E:DvtkHighLevelInterface.Common.Threads.Thread.InformationOutputEvent">
            <summary>
            Event is fired when some information output is available (must be implemented by descendant of this
            class by calling the TriggerInformationOutputEvent method).
            </summary>
        </member>
        <member name="E:DvtkHighLevelInterface.Common.Threads.Thread.WarningOutputEvent">
            <summary>
            Event is fired when some warning output is available (must be implemented by descendant of this
            class by calling the TriggerWarningOutputEvent method).
            </summary>
        </member>
        <member name="E:DvtkHighLevelInterface.Common.Threads.Thread.ThreadStateChangeEvent">
            <summary>
            This event is triggered whenever the ThreadState changes for this object.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Threads.Thread.AttachedUserInterfaces">
            <summary>
            Gets the attached UserInterfaces of this object.
            </summary>
            <remarks>
            An example of a UserInterface is the HliConsole class, which just outputs the text available
            in the ErrorOutputEvent, InformationOutputEvent and WarningOutputEvent to the console.
            </remarks>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Threads.Thread.CurrentThread">
            <summary>
            Gets the current HLI Thread that is (indirectly) calling this property.
            If no HLI thread is (indirectly) calling this property, null is returned.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Threads.Thread.HasBeenStarted">
            <summary>
            Indicates if this Thread has been started.
            </summary>
            <remarks>
            A Thread that has been started and stopped afterwards will also return true.
            </remarks>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Threads.Thread.HasExceptionOccured">
            <summary>
            Indicates if an unhandled exception has occured during execution of the Thread.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Threads.Thread.IsStopCalled">
            <summary>
            Indicates if the Stop method of this object has been called.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Threads.Thread.Parent">
            <summary>
            Gets the parent Thread.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Threads.Thread.ResultsGatheringStarted">
            <summary>
            Indicates if results gathering has started.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Threads.Thread.ThreadManager">
            <summary>
            Gets the ThreadManager that manages this Thread.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Threads.Thread.ThreadOptions">
            <summary>
            Gets the Thread options.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Threads.Thread.Threads">
            <summary>
            Contains mapping between .Net threads and High Level Interface threads.
            </summary>
            <remarks>
            - Key of this hashtable: GetHashCode of the .Net thread.
            - Value of this hashtable: reference to a High Level Interface thread.
            </remarks>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Threads.Thread.ThreadState">
            <summary>
            Gets the current ThreadState of this object.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Threads.Thread.TopmostThread">
            <summary>
            Gets the topmost Thread, considering the parent relation.
            If this thread does not have a parent, this object itself is the topmost thread.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Threads.Thread.TextOutputEventHandler">
            <summary>
            The delegate used for the events ErrorOutputEvent, InformationOutputEvent and WarningOutputEvent.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Threads.Thread.ThreadStateChangeHandler">
            <summary>
            The delegate used for the ThreadStateChangeEvent.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.Threads.DicomThread.activityReportEventHandler">
            <summary>
            The event handler that will handle ActivityReportEvents that are 
            fired by the encapsulated Dvtk ScriptSession.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.Threads.DicomThread.dvtkScriptSession">
            <summary>
            See property DvtkScriptSession.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.Threads.DicomThread.hasOpenConnection">
            <summary>
            Indicates if this instance has een open connection.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.Threads.DicomThread.inboundDicomMessageFilters">
            <summary>
            Under construction.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.Threads.DicomThread.outboundDicomMessageFilters">
            <summary>
            Under construction.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.AddToBack(DvtkHighLevelInterface.Dicom.Threads.OutboundDicomMessageFilter)">
            <summary>
            Under construction.
            </summary>
            <param name="outboundDicomMessageFilter">Under construction.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.AddToBack(DvtkHighLevelInterface.Dicom.Threads.InboundDicomMessageFilter)">
            <summary>
            Under construction.
            </summary>
            <param name="inboundDicomMessageFilter">Under construction.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.AddToFront(DvtkHighLevelInterface.Dicom.Threads.OutboundDicomMessageFilter)">
            <summary>
            Under construction.
            </summary>
            <param name="outboundDicomMessageFilter">Under construction.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.AddToFront(DvtkHighLevelInterface.Dicom.Threads.InboundDicomMessageFilter)">
            <summary>
            Under construction.
            </summary>
            <param name="inboundDicomMessageFilter">Under construction.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.AfterHandlingException(System.Exception)">
            <summary>
            Called after the HandleException method in the base Thread class has been called.
            </summary>
            <param name="exception">Exception that has been handled.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.AfterWaitingForCompletionChildThreads">
            <summary>
            Called after the WaitForCompletionChildThreads method in the base Thread class has been called.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.BeforeCallingExecute">
            <summary>
            Called before the Execute method in the base Thread class will be called.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.BeforeWaitingForCompletionChildThreads">
            <summary>
            Called before the WaitForCompletionChildThreads method in the base Thread class will be called.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.ComparePixelData(DvtkHighLevelInterface.Dicom.Messages.DicomMessage,DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            compares pixel data in two DICOM messages.
            </summary>
            <param name="dicomMessage1">The first Dicom Message.</param>
            <param name="dicomMessage2">The second Dicom Message.</param>
            <returns>Indicates if the pixel data is the same.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.GetIodNameFromDefinition(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            Gets the IOD Name for the supplied DicomMessage using the loaded definition files.
            </summary>
            <remarks>
            The DimseCommand and SOP Class UID specified in the CommandSet of the DicomMessage is
            used to get the IOD Name using the loaded definition files.
            </remarks>
            <param name="dicomMessage">DicomMessage for which the IOD Name is being sought.</param>
            <returns>
            The IOD Name for the DicomMessage or an empty String if no matching definition file is
            found in the loaded definition files.
            </returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.HandleActivityReportEvent(System.Object,Dvtk.Events.ActivityReportEventArgs)">
            <summary>
            This method will be called when the encapsulated Dvtk ScriptSession object raises
            an ActivityReportEvent.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The content of the event.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.Initialize">
            <summary>
            Conatins common initialization code, called from the other Initialize methods from
            this class.
            </summary>
            <example>
            	<b>C#</b>
            	<code>
            			<Example name="IncludesDicomThreadScu">
Imports System
Imports System.IO
Imports System.Windows.Forms
Imports DvtkData.Dimse.VR
Imports DvtkData.Dimse.DimseCommand
Imports DvtkHighLevelInterface
Imports DvtkHighLevelInterface.Dicom.Messages
Imports DvtkHighLevelInterface.Common.UserInterfaces
Imports DvtkHighLevelInterface.Dicom.Threads
</Example>
            			<Example name="DicomThreadScu">
Class DicomThreadScu
    Inherits DicomThread

    Protected Overrides Sub Execute()

        'Sending an association request
        SendAssociateRq _
        ( _
            New DvtkHighLevelInterface.Dicom.Other.PresentationContext("1.2.840.10008.5.1.4.1.1.2", "1.2.840.10008.1.2", "1.2.840.10008.1.2.1") _
        )


        'Receive the associate Ackknowledge 
        'Alternatively you could use ReceiveAssociateAc() method which will throw a 
        'HLIException if the received message is not an associate Ackknowledge
        Dim receivedMessage As DvtkHighLevelInterface.Dicom.Messages.DicomProtocolMessage = Nothing
        receivedMessage = ReceiveMessage()
        'Check wether the received response is indeed an associate ackknowledge
        If Not receivedMessage.IsAssociateAc Then
            If receivedMessage.IsAssociateRj Then
                Throw New System.Exception("Association Rejected.")
            ElseIf receivedMessage.IsAbort Then
                Throw New System.Exception("Abort Message.")
            Else
                'No idea what kind of message was sent back.
                Throw New System.Exception("Received unknown message.")
            End If
        End If


        'Sending a Message
        'We create a DicomMessage configured for C-Store Requests
        Dim aCTStoreRQMessage As DvtkHighLevelInterface.Dicom.Messages.DicomMessage = New DicomMessage(CSTORERQ)
        'Check the AttributeSet.read for documentation on reading files to handle exceptions
        aCTStoreRQMessage.DataSet.Read(ScriptContext._CTImageFullFileName)
        Try
            Send(aCTStoreRQMessage)
        Catch ex As DvtkHighLevelInterface.Common.Other.HliException
            'Error while sending. Handle as you please. 
            'ex.Message.ToString()
        End Try


        'The CStore Response
        Dim aCStoreRSPMessage As DvtkHighLevelInterface.Dicom.Messages.DicomMessage
        aCStoreRSPMessage = ReceiveDicomMessage()
        'make sure it really is a CSTORE Response
        If Not aCStoreRSPMessage.CommandSet.DimseCommand = DvtkData.Dimse.DimseCommand.CSTORERSP Then
            Throw New System.Exception("After a CSTORE Request the SCP returned an unexpected message.")
        End If


        'send a release request
        Try
            SendReleaseRq()
        Catch ex As DvtkHighLevelInterface.Common.Other.HliException
            'You error message. Handle as you please. 
            'ex.Message.ToString()
        End Try


        Dim aReleaseResponseMessage As DvtkHighLevelInterface.Dicom.Messages.ReleaseRp
        'receive the release response
        Try
            aReleaseResponseMessage = ReceiveReleaseRp()
        Catch ex As DvtkHighLevelInterface.Common.Other.HliException
            'You error message. Handle as you please. 
            'ex.Message.ToString()
        End Try

    End Sub

End Class
</Example>
            			<Example name="Main">
Class MainDicomThread
    Inherits DicomThreadScu

End Class 

Class ScriptContext

    ' Full session file name, only needed when not executing script under Dvt(Cmd).
    Public Const _SessionFullFileName As String = "C:\Program Files\DVT\example\scripts\storage\scu\Storage_SCU.ses"
    Public Const _CTImageFullFileName As String = "c:\YourCTImageFile.dcm"

End Class ' ScriptContext

Module DvtkScript

    Sub Main(ByVal CmdArgs() As String)

        Dim theExecutablePath As String = System.Windows.Forms.Application.ExecutablePath
        Dim theExecutableName As String = Path.GetFileName(theExecutablePath).ToLower()

        Dvtk.Setup.Initialize()

        Dim theDvtThreadManager As DvtkHighLevelInterface.Common.Threads.ThreadManager = New DvtkHighLevelInterface.Common.Threads.ThreadManager

        Dim theMainDicomThread As MainDicomThread = New MainDicomThread
        theMainDicomThread.Initialize(theDvtThreadManager)


        theMainDicomThread.Options.LoadFromFile(ScriptContext._SessionFullFileName)
        theMainDicomThread.Options.Identifier = "MainDicomThread"

        Dim theHliForm As HliForm = New HliForm
        theHliForm.AutoExit = False
        theHliForm.Attach(theMainDicomThread)

        theMainDicomThread.Start()

        theHliForm.WaitUntilClosed()

        Dvtk.Setup.Terminate()

    End Sub
</Example>		
            	</code>
            </example>		
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.Initialize(DvtkHighLevelInterface.Common.Threads.ThreadManager)">
            <summary>
            Initializes this instance as a DicomThread with no parent thread.
            </summary>
            <param name="threadManager">The threadManager.</param>
            <example>
            	<b>VB.NET</b>
            	<code>
            			<Example name="IncludesDicomThreadScu">
Imports System
Imports System.IO
Imports System.Windows.Forms
Imports DvtkData.Dimse.VR
Imports DvtkData.Dimse.DimseCommand
Imports DvtkHighLevelInterface
Imports DvtkHighLevelInterface.Dicom.Messages
Imports DvtkHighLevelInterface.Common.UserInterfaces
Imports DvtkHighLevelInterface.Dicom.Threads
</Example>
            			<Example name="DicomThreadScu">
Class DicomThreadScu
    Inherits DicomThread

    Protected Overrides Sub Execute()

        'Sending an association request
        SendAssociateRq _
        ( _
            New DvtkHighLevelInterface.Dicom.Other.PresentationContext("1.2.840.10008.5.1.4.1.1.2", "1.2.840.10008.1.2", "1.2.840.10008.1.2.1") _
        )


        'Receive the associate Ackknowledge 
        'Alternatively you could use ReceiveAssociateAc() method which will throw a 
        'HLIException if the received message is not an associate Ackknowledge
        Dim receivedMessage As DvtkHighLevelInterface.Dicom.Messages.DicomProtocolMessage = Nothing
        receivedMessage = ReceiveMessage()
        'Check wether the received response is indeed an associate ackknowledge
        If Not receivedMessage.IsAssociateAc Then
            If receivedMessage.IsAssociateRj Then
                Throw New System.Exception("Association Rejected.")
            ElseIf receivedMessage.IsAbort Then
                Throw New System.Exception("Abort Message.")
            Else
                'No idea what kind of message was sent back.
                Throw New System.Exception("Received unknown message.")
            End If
        End If


        'Sending a Message
        'We create a DicomMessage configured for C-Store Requests
        Dim aCTStoreRQMessage As DvtkHighLevelInterface.Dicom.Messages.DicomMessage = New DicomMessage(CSTORERQ)
        'Check the AttributeSet.read for documentation on reading files to handle exceptions
        aCTStoreRQMessage.DataSet.Read(ScriptContext._CTImageFullFileName)
        Try
            Send(aCTStoreRQMessage)
        Catch ex As DvtkHighLevelInterface.Common.Other.HliException
            'Error while sending. Handle as you please. 
            'ex.Message.ToString()
        End Try


        'The CStore Response
        Dim aCStoreRSPMessage As DvtkHighLevelInterface.Dicom.Messages.DicomMessage
        aCStoreRSPMessage = ReceiveDicomMessage()
        'make sure it really is a CSTORE Response
        If Not aCStoreRSPMessage.CommandSet.DimseCommand = DvtkData.Dimse.DimseCommand.CSTORERSP Then
            Throw New System.Exception("After a CSTORE Request the SCP returned an unexpected message.")
        End If


        'send a release request
        Try
            SendReleaseRq()
        Catch ex As DvtkHighLevelInterface.Common.Other.HliException
            'You error message. Handle as you please. 
            'ex.Message.ToString()
        End Try


        Dim aReleaseResponseMessage As DvtkHighLevelInterface.Dicom.Messages.ReleaseRp
        'receive the release response
        Try
            aReleaseResponseMessage = ReceiveReleaseRp()
        Catch ex As DvtkHighLevelInterface.Common.Other.HliException
            'You error message. Handle as you please. 
            'ex.Message.ToString()
        End Try

    End Sub

End Class
</Example>
            			<Example name="Main">
Class MainDicomThread
    Inherits DicomThreadScu

End Class 

Class ScriptContext

    ' Full session file name, only needed when not executing script under Dvt(Cmd).
    Public Const _SessionFullFileName As String = "C:\Program Files\DVT\example\scripts\storage\scu\Storage_SCU.ses"
    Public Const _CTImageFullFileName As String = "c:\YourCTImageFile.dcm"

End Class ' ScriptContext

Module DvtkScript

    Sub Main(ByVal CmdArgs() As String)

        Dim theExecutablePath As String = System.Windows.Forms.Application.ExecutablePath
        Dim theExecutableName As String = Path.GetFileName(theExecutablePath).ToLower()

        Dvtk.Setup.Initialize()

        Dim theDvtThreadManager As DvtkHighLevelInterface.Common.Threads.ThreadManager = New DvtkHighLevelInterface.Common.Threads.ThreadManager

        Dim theMainDicomThread As MainDicomThread = New MainDicomThread
        theMainDicomThread.Initialize(theDvtThreadManager)


        theMainDicomThread.Options.LoadFromFile(ScriptContext._SessionFullFileName)
        theMainDicomThread.Options.Identifier = "MainDicomThread"

        Dim theHliForm As HliForm = New HliForm
        theHliForm.AutoExit = False
        theHliForm.Attach(theMainDicomThread)

        theMainDicomThread.Start()

        theHliForm.WaitUntilClosed()

        Dvtk.Setup.Terminate()

    End Sub
</Example>		
            	</code>
            </example>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.Initialize(DvtkHighLevelInterface.Common.Threads.Thread)">
            <summary>
            Initializes this instance as a DicomThread with a parent thread.
            </summary>
            <param name="parent">The parent thread.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.MessageReceived(DvtkHighLevelInterface.Dicom.Messages.DicomProtocolMessage)">
            <summary>
            Method must be called when a message has been received.
            </summary>
            <param name="dicomProtocolMessage">The message that has been received.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.ReceiveAssociateAc">
            <summary>
            Receives a An-ASSOCIATE-AC.
            </summary>
            <returns>The received A-ASSOCIATE-AC</returns>
            <example>
            	<b>VB.NET</b>
            	<code>
            			<Example name="IncludesDicomThreadScu">
Imports System
Imports System.IO
Imports System.Windows.Forms
Imports DvtkData.Dimse.VR
Imports DvtkData.Dimse.DimseCommand
Imports DvtkHighLevelInterface
Imports DvtkHighLevelInterface.Dicom.Messages
Imports DvtkHighLevelInterface.Common.UserInterfaces
Imports DvtkHighLevelInterface.Dicom.Threads
</Example>
            			<Example name="DicomThreadScu">
Class DicomThreadScu
    Inherits DicomThread

    Protected Overrides Sub Execute()

        'Sending an association request
        SendAssociateRq _
        ( _
            New DvtkHighLevelInterface.Dicom.Other.PresentationContext("1.2.840.10008.5.1.4.1.1.2", "1.2.840.10008.1.2", "1.2.840.10008.1.2.1") _
        )


        'Receive the associate Ackknowledge 
        'Alternatively you could use ReceiveAssociateAc() method which will throw a 
        'HLIException if the received message is not an associate Ackknowledge
        Dim receivedMessage As DvtkHighLevelInterface.Dicom.Messages.DicomProtocolMessage = Nothing
        receivedMessage = ReceiveMessage()
        'Check wether the received response is indeed an associate ackknowledge
        If Not receivedMessage.IsAssociateAc Then
            If receivedMessage.IsAssociateRj Then
                Throw New System.Exception("Association Rejected.")
            ElseIf receivedMessage.IsAbort Then
                Throw New System.Exception("Abort Message.")
            Else
                'No idea what kind of message was sent back.
                Throw New System.Exception("Received unknown message.")
            End If
        End If


        'Sending a Message
        'We create a DicomMessage configured for C-Store Requests
        Dim aCTStoreRQMessage As DvtkHighLevelInterface.Dicom.Messages.DicomMessage = New DicomMessage(CSTORERQ)
        'Check the AttributeSet.read for documentation on reading files to handle exceptions
        aCTStoreRQMessage.DataSet.Read(ScriptContext._CTImageFullFileName)
        Try
            Send(aCTStoreRQMessage)
        Catch ex As DvtkHighLevelInterface.Common.Other.HliException
            'Error while sending. Handle as you please. 
            'ex.Message.ToString()
        End Try


        'The CStore Response
        Dim aCStoreRSPMessage As DvtkHighLevelInterface.Dicom.Messages.DicomMessage
        aCStoreRSPMessage = ReceiveDicomMessage()
        'make sure it really is a CSTORE Response
        If Not aCStoreRSPMessage.CommandSet.DimseCommand = DvtkData.Dimse.DimseCommand.CSTORERSP Then
            Throw New System.Exception("After a CSTORE Request the SCP returned an unexpected message.")
        End If


        'send a release request
        Try
            SendReleaseRq()
        Catch ex As DvtkHighLevelInterface.Common.Other.HliException
            'You error message. Handle as you please. 
            'ex.Message.ToString()
        End Try


        Dim aReleaseResponseMessage As DvtkHighLevelInterface.Dicom.Messages.ReleaseRp
        'receive the release response
        Try
            aReleaseResponseMessage = ReceiveReleaseRp()
        Catch ex As DvtkHighLevelInterface.Common.Other.HliException
            'You error message. Handle as you please. 
            'ex.Message.ToString()
        End Try

    End Sub

End Class
</Example>
            			<Example name="Main">
Class MainDicomThread
    Inherits DicomThreadScu

End Class 

Class ScriptContext

    ' Full session file name, only needed when not executing script under Dvt(Cmd).
    Public Const _SessionFullFileName As String = "C:\Program Files\DVT\example\scripts\storage\scu\Storage_SCU.ses"
    Public Const _CTImageFullFileName As String = "c:\YourCTImageFile.dcm"

End Class ' ScriptContext

Module DvtkScript

    Sub Main(ByVal CmdArgs() As String)

        Dim theExecutablePath As String = System.Windows.Forms.Application.ExecutablePath
        Dim theExecutableName As String = Path.GetFileName(theExecutablePath).ToLower()

        Dvtk.Setup.Initialize()

        Dim theDvtThreadManager As DvtkHighLevelInterface.Common.Threads.ThreadManager = New DvtkHighLevelInterface.Common.Threads.ThreadManager

        Dim theMainDicomThread As MainDicomThread = New MainDicomThread
        theMainDicomThread.Initialize(theDvtThreadManager)


        theMainDicomThread.Options.LoadFromFile(ScriptContext._SessionFullFileName)
        theMainDicomThread.Options.Identifier = "MainDicomThread"

        Dim theHliForm As HliForm = New HliForm
        theHliForm.AutoExit = False
        theHliForm.Attach(theMainDicomThread)

        theMainDicomThread.Start()

        theHliForm.WaitUntilClosed()

        Dvtk.Setup.Terminate()

    End Sub
</Example>		
            	</code>
            </example>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.ReceiveAssociateRj">
            <summary>
            Receives an A-ASSOCIATE-RJ
            </summary>
            <returns>The received A-ASSOCIATE-RJ</returns>
            <exception cref="T:System.Exception">
            Receiving of a message fails or the received message is not an A-ASSOCIATE-RJ.
            </exception> 
            <example>
            	<b>VB.NET</b>
            	<code>
            			<Example name="IncludesDicomThreadScu">
Imports System
Imports System.IO
Imports System.Windows.Forms
Imports DvtkData.Dimse.VR
Imports DvtkData.Dimse.DimseCommand
Imports DvtkHighLevelInterface
Imports DvtkHighLevelInterface.Dicom.Messages
Imports DvtkHighLevelInterface.Common.UserInterfaces
Imports DvtkHighLevelInterface.Dicom.Threads
</Example>
            			<Example name="DicomThreadScu">
Class DicomThreadScu
    Inherits DicomThread

    Protected Overrides Sub Execute()

        'Sending an association request
        SendAssociateRq _
        ( _
            New DvtkHighLevelInterface.Dicom.Other.PresentationContext("1.2.840.10008.5.1.4.1.1.2", "1.2.840.10008.1.2", "1.2.840.10008.1.2.1") _
        )


        'Receive the associate Ackknowledge 
        'Alternatively you could use ReceiveAssociateAc() method which will throw a 
        'HLIException if the received message is not an associate Ackknowledge
        Dim receivedMessage As DvtkHighLevelInterface.Dicom.Messages.DicomProtocolMessage = Nothing
        receivedMessage = ReceiveMessage()
        'Check wether the received response is indeed an associate ackknowledge
        If Not receivedMessage.IsAssociateAc Then
            If receivedMessage.IsAssociateRj Then
                Throw New System.Exception("Association Rejected.")
            ElseIf receivedMessage.IsAbort Then
                Throw New System.Exception("Abort Message.")
            Else
                'No idea what kind of message was sent back.
                Throw New System.Exception("Received unknown message.")
            End If
        End If


        'Sending a Message
        'We create a DicomMessage configured for C-Store Requests
        Dim aCTStoreRQMessage As DvtkHighLevelInterface.Dicom.Messages.DicomMessage = New DicomMessage(CSTORERQ)
        'Check the AttributeSet.read for documentation on reading files to handle exceptions
        aCTStoreRQMessage.DataSet.Read(ScriptContext._CTImageFullFileName)
        Try
            Send(aCTStoreRQMessage)
        Catch ex As DvtkHighLevelInterface.Common.Other.HliException
            'Error while sending. Handle as you please. 
            'ex.Message.ToString()
        End Try


        'The CStore Response
        Dim aCStoreRSPMessage As DvtkHighLevelInterface.Dicom.Messages.DicomMessage
        aCStoreRSPMessage = ReceiveDicomMessage()
        'make sure it really is a CSTORE Response
        If Not aCStoreRSPMessage.CommandSet.DimseCommand = DvtkData.Dimse.DimseCommand.CSTORERSP Then
            Throw New System.Exception("After a CSTORE Request the SCP returned an unexpected message.")
        End If


        'send a release request
        Try
            SendReleaseRq()
        Catch ex As DvtkHighLevelInterface.Common.Other.HliException
            'You error message. Handle as you please. 
            'ex.Message.ToString()
        End Try


        Dim aReleaseResponseMessage As DvtkHighLevelInterface.Dicom.Messages.ReleaseRp
        'receive the release response
        Try
            aReleaseResponseMessage = ReceiveReleaseRp()
        Catch ex As DvtkHighLevelInterface.Common.Other.HliException
            'You error message. Handle as you please. 
            'ex.Message.ToString()
        End Try

    End Sub

End Class
</Example>
            			<Example name="Main">
Class MainDicomThread
    Inherits DicomThreadScu

End Class 

Class ScriptContext

    ' Full session file name, only needed when not executing script under Dvt(Cmd).
    Public Const _SessionFullFileName As String = "C:\Program Files\DVT\example\scripts\storage\scu\Storage_SCU.ses"
    Public Const _CTImageFullFileName As String = "c:\YourCTImageFile.dcm"

End Class ' ScriptContext

Module DvtkScript

    Sub Main(ByVal CmdArgs() As String)

        Dim theExecutablePath As String = System.Windows.Forms.Application.ExecutablePath
        Dim theExecutableName As String = Path.GetFileName(theExecutablePath).ToLower()

        Dvtk.Setup.Initialize()

        Dim theDvtThreadManager As DvtkHighLevelInterface.Common.Threads.ThreadManager = New DvtkHighLevelInterface.Common.Threads.ThreadManager

        Dim theMainDicomThread As MainDicomThread = New MainDicomThread
        theMainDicomThread.Initialize(theDvtThreadManager)


        theMainDicomThread.Options.LoadFromFile(ScriptContext._SessionFullFileName)
        theMainDicomThread.Options.Identifier = "MainDicomThread"

        Dim theHliForm As HliForm = New HliForm
        theHliForm.AutoExit = False
        theHliForm.Attach(theMainDicomThread)

        theMainDicomThread.Start()

        theHliForm.WaitUntilClosed()

        Dvtk.Setup.Terminate()

    End Sub
</Example>		
            	</code>
            </example>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.ReceiveAssociateRp">
            <summary>
            Receives an A-ASSOCIATE-AC or A-ASSOCIATE-RJ.
            </summary>
            <returns>The received A-ASSOCIATE-AC or A-ASSOCIATE-RJ.</returns>
            <exception cref="T:System.Exception">
            Receiving of a message fails or the received message is not an A-ASSOCIATE-AC or A-ASSOCIATE-RJ.
            </exception> 
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.ReceiveAssociateRq">
            <summary>
            Receives a A-ASSOCIATE-RQ.
            </summary>
            <returns>The received A-ASSOCIATE-RQ.</returns>
            <exception cref="T:System.Exception">
            Receiving of a message fails or the received message is not an A-ASSOCIATE-RQ.
            </exception> 
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.ReceiveDicomMessage">
            <summary>
            Receives a Dicom Message.
            </summary>
            <returns>The received Dicom Message.</returns>
            <exception cref="T:System.Exception">
            Receiving of a message fails or the received message is not a Dicom message.
            </exception> 
            <example>
            	<b>VB.NET</b>
            	<code>
            			<Example name="IncludesDicomThreadScu">
Imports System
Imports System.IO
Imports System.Windows.Forms
Imports DvtkData.Dimse.VR
Imports DvtkData.Dimse.DimseCommand
Imports DvtkHighLevelInterface
Imports DvtkHighLevelInterface.Dicom.Messages
Imports DvtkHighLevelInterface.Common.UserInterfaces
Imports DvtkHighLevelInterface.Dicom.Threads
</Example>
            			<Example name="DicomThreadScu">
Class DicomThreadScu
    Inherits DicomThread

    Protected Overrides Sub Execute()

        'Sending an association request
        SendAssociateRq _
        ( _
            New DvtkHighLevelInterface.Dicom.Other.PresentationContext("1.2.840.10008.5.1.4.1.1.2", "1.2.840.10008.1.2", "1.2.840.10008.1.2.1") _
        )


        'Receive the associate Ackknowledge 
        'Alternatively you could use ReceiveAssociateAc() method which will throw a 
        'HLIException if the received message is not an associate Ackknowledge
        Dim receivedMessage As DvtkHighLevelInterface.Dicom.Messages.DicomProtocolMessage = Nothing
        receivedMessage = ReceiveMessage()
        'Check wether the received response is indeed an associate ackknowledge
        If Not receivedMessage.IsAssociateAc Then
            If receivedMessage.IsAssociateRj Then
                Throw New System.Exception("Association Rejected.")
            ElseIf receivedMessage.IsAbort Then
                Throw New System.Exception("Abort Message.")
            Else
                'No idea what kind of message was sent back.
                Throw New System.Exception("Received unknown message.")
            End If
        End If


        'Sending a Message
        'We create a DicomMessage configured for C-Store Requests
        Dim aCTStoreRQMessage As DvtkHighLevelInterface.Dicom.Messages.DicomMessage = New DicomMessage(CSTORERQ)
        'Check the AttributeSet.read for documentation on reading files to handle exceptions
        aCTStoreRQMessage.DataSet.Read(ScriptContext._CTImageFullFileName)
        Try
            Send(aCTStoreRQMessage)
        Catch ex As DvtkHighLevelInterface.Common.Other.HliException
            'Error while sending. Handle as you please. 
            'ex.Message.ToString()
        End Try


        'The CStore Response
        Dim aCStoreRSPMessage As DvtkHighLevelInterface.Dicom.Messages.DicomMessage
        aCStoreRSPMessage = ReceiveDicomMessage()
        'make sure it really is a CSTORE Response
        If Not aCStoreRSPMessage.CommandSet.DimseCommand = DvtkData.Dimse.DimseCommand.CSTORERSP Then
            Throw New System.Exception("After a CSTORE Request the SCP returned an unexpected message.")
        End If


        'send a release request
        Try
            SendReleaseRq()
        Catch ex As DvtkHighLevelInterface.Common.Other.HliException
            'You error message. Handle as you please. 
            'ex.Message.ToString()
        End Try


        Dim aReleaseResponseMessage As DvtkHighLevelInterface.Dicom.Messages.ReleaseRp
        'receive the release response
        Try
            aReleaseResponseMessage = ReceiveReleaseRp()
        Catch ex As DvtkHighLevelInterface.Common.Other.HliException
            'You error message. Handle as you please. 
            'ex.Message.ToString()
        End Try

    End Sub

End Class
</Example>
            			<Example name="Main">
Class MainDicomThread
    Inherits DicomThreadScu

End Class 

Class ScriptContext

    ' Full session file name, only needed when not executing script under Dvt(Cmd).
    Public Const _SessionFullFileName As String = "C:\Program Files\DVT\example\scripts\storage\scu\Storage_SCU.ses"
    Public Const _CTImageFullFileName As String = "c:\YourCTImageFile.dcm"

End Class ' ScriptContext

Module DvtkScript

    Sub Main(ByVal CmdArgs() As String)

        Dim theExecutablePath As String = System.Windows.Forms.Application.ExecutablePath
        Dim theExecutableName As String = Path.GetFileName(theExecutablePath).ToLower()

        Dvtk.Setup.Initialize()

        Dim theDvtThreadManager As DvtkHighLevelInterface.Common.Threads.ThreadManager = New DvtkHighLevelInterface.Common.Threads.ThreadManager

        Dim theMainDicomThread As MainDicomThread = New MainDicomThread
        theMainDicomThread.Initialize(theDvtThreadManager)


        theMainDicomThread.Options.LoadFromFile(ScriptContext._SessionFullFileName)
        theMainDicomThread.Options.Identifier = "MainDicomThread"

        Dim theHliForm As HliForm = New HliForm
        theHliForm.AutoExit = False
        theHliForm.Attach(theMainDicomThread)

        theMainDicomThread.Start()

        theHliForm.WaitUntilClosed()

        Dvtk.Setup.Terminate()

    End Sub
</Example>		
            	</code>
            </example>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.ReceiveMessage">
            <summary>
            Receives a messages (can be a Dicom or Dul message).
            </summary>
            <returns>The received message.</returns>
            <exception cref="T:System.Exception">
            Receiving of a message fails.
            </exception> 
            <example>
            	<b>VB.NET</b>
            	<code>
            			<Example name="IncludesDicomThreadScu">
Imports System
Imports System.IO
Imports System.Windows.Forms
Imports DvtkData.Dimse.VR
Imports DvtkData.Dimse.DimseCommand
Imports DvtkHighLevelInterface
Imports DvtkHighLevelInterface.Dicom.Messages
Imports DvtkHighLevelInterface.Common.UserInterfaces
Imports DvtkHighLevelInterface.Dicom.Threads
</Example>
            			<Example name="DicomThreadScu">
Class DicomThreadScu
    Inherits DicomThread

    Protected Overrides Sub Execute()

        'Sending an association request
        SendAssociateRq _
        ( _
            New DvtkHighLevelInterface.Dicom.Other.PresentationContext("1.2.840.10008.5.1.4.1.1.2", "1.2.840.10008.1.2", "1.2.840.10008.1.2.1") _
        )


        'Receive the associate Ackknowledge 
        'Alternatively you could use ReceiveAssociateAc() method which will throw a 
        'HLIException if the received message is not an associate Ackknowledge
        Dim receivedMessage As DvtkHighLevelInterface.Dicom.Messages.DicomProtocolMessage = Nothing
        receivedMessage = ReceiveMessage()
        'Check wether the received response is indeed an associate ackknowledge
        If Not receivedMessage.IsAssociateAc Then
            If receivedMessage.IsAssociateRj Then
                Throw New System.Exception("Association Rejected.")
            ElseIf receivedMessage.IsAbort Then
                Throw New System.Exception("Abort Message.")
            Else
                'No idea what kind of message was sent back.
                Throw New System.Exception("Received unknown message.")
            End If
        End If


        'Sending a Message
        'We create a DicomMessage configured for C-Store Requests
        Dim aCTStoreRQMessage As DvtkHighLevelInterface.Dicom.Messages.DicomMessage = New DicomMessage(CSTORERQ)
        'Check the AttributeSet.read for documentation on reading files to handle exceptions
        aCTStoreRQMessage.DataSet.Read(ScriptContext._CTImageFullFileName)
        Try
            Send(aCTStoreRQMessage)
        Catch ex As DvtkHighLevelInterface.Common.Other.HliException
            'Error while sending. Handle as you please. 
            'ex.Message.ToString()
        End Try


        'The CStore Response
        Dim aCStoreRSPMessage As DvtkHighLevelInterface.Dicom.Messages.DicomMessage
        aCStoreRSPMessage = ReceiveDicomMessage()
        'make sure it really is a CSTORE Response
        If Not aCStoreRSPMessage.CommandSet.DimseCommand = DvtkData.Dimse.DimseCommand.CSTORERSP Then
            Throw New System.Exception("After a CSTORE Request the SCP returned an unexpected message.")
        End If


        'send a release request
        Try
            SendReleaseRq()
        Catch ex As DvtkHighLevelInterface.Common.Other.HliException
            'You error message. Handle as you please. 
            'ex.Message.ToString()
        End Try


        Dim aReleaseResponseMessage As DvtkHighLevelInterface.Dicom.Messages.ReleaseRp
        'receive the release response
        Try
            aReleaseResponseMessage = ReceiveReleaseRp()
        Catch ex As DvtkHighLevelInterface.Common.Other.HliException
            'You error message. Handle as you please. 
            'ex.Message.ToString()
        End Try

    End Sub

End Class
</Example>
            			<Example name="Main">
Class MainDicomThread
    Inherits DicomThreadScu

End Class 

Class ScriptContext

    ' Full session file name, only needed when not executing script under Dvt(Cmd).
    Public Const _SessionFullFileName As String = "C:\Program Files\DVT\example\scripts\storage\scu\Storage_SCU.ses"
    Public Const _CTImageFullFileName As String = "c:\YourCTImageFile.dcm"

End Class ' ScriptContext

Module DvtkScript

    Sub Main(ByVal CmdArgs() As String)

        Dim theExecutablePath As String = System.Windows.Forms.Application.ExecutablePath
        Dim theExecutableName As String = Path.GetFileName(theExecutablePath).ToLower()

        Dvtk.Setup.Initialize()

        Dim theDvtThreadManager As DvtkHighLevelInterface.Common.Threads.ThreadManager = New DvtkHighLevelInterface.Common.Threads.ThreadManager

        Dim theMainDicomThread As MainDicomThread = New MainDicomThread
        theMainDicomThread.Initialize(theDvtThreadManager)


        theMainDicomThread.Options.LoadFromFile(ScriptContext._SessionFullFileName)
        theMainDicomThread.Options.Identifier = "MainDicomThread"

        Dim theHliForm As HliForm = New HliForm
        theHliForm.AutoExit = False
        theHliForm.Attach(theMainDicomThread)

        theMainDicomThread.Start()

        theHliForm.WaitUntilClosed()

        Dvtk.Setup.Terminate()

    End Sub
</Example>		
            	</code>
            </example>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.ReceiveMessage(System.String)">
            <summary>
            Receives a messages (can be a Dicom or Dul message).
            </summary>
            <param name="messageToExpect">Message to expect that is written in the results.</param>
            <returns>The received message.</returns>
            <exception cref="T:DvtkHighLevelInterface.Dicom.Other.DicomProtocolMessageReceiveException">
            Receiving of a message fails.
            </exception> 
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.ReceiveReleaseRp">
            <summary>
            Receives a A-RELEASE-RP.
            </summary>
            <returns>The received A-RELEASE-RP.</returns>
            <exception cref="T:System.Exception">
            Receiving of a message fails or the received message is not an A-RELEASE-RP.
            </exception> 
            <example>
            	<b>VB.NET</b>
            	<code>
            			<Example name="IncludesDicomThreadScu">
Imports System
Imports System.IO
Imports System.Windows.Forms
Imports DvtkData.Dimse.VR
Imports DvtkData.Dimse.DimseCommand
Imports DvtkHighLevelInterface
Imports DvtkHighLevelInterface.Dicom.Messages
Imports DvtkHighLevelInterface.Common.UserInterfaces
Imports DvtkHighLevelInterface.Dicom.Threads
</Example>
            			<Example name="DicomThreadScu">
Class DicomThreadScu
    Inherits DicomThread

    Protected Overrides Sub Execute()

        'Sending an association request
        SendAssociateRq _
        ( _
            New DvtkHighLevelInterface.Dicom.Other.PresentationContext("1.2.840.10008.5.1.4.1.1.2", "1.2.840.10008.1.2", "1.2.840.10008.1.2.1") _
        )


        'Receive the associate Ackknowledge 
        'Alternatively you could use ReceiveAssociateAc() method which will throw a 
        'HLIException if the received message is not an associate Ackknowledge
        Dim receivedMessage As DvtkHighLevelInterface.Dicom.Messages.DicomProtocolMessage = Nothing
        receivedMessage = ReceiveMessage()
        'Check wether the received response is indeed an associate ackknowledge
        If Not receivedMessage.IsAssociateAc Then
            If receivedMessage.IsAssociateRj Then
                Throw New System.Exception("Association Rejected.")
            ElseIf receivedMessage.IsAbort Then
                Throw New System.Exception("Abort Message.")
            Else
                'No idea what kind of message was sent back.
                Throw New System.Exception("Received unknown message.")
            End If
        End If


        'Sending a Message
        'We create a DicomMessage configured for C-Store Requests
        Dim aCTStoreRQMessage As DvtkHighLevelInterface.Dicom.Messages.DicomMessage = New DicomMessage(CSTORERQ)
        'Check the AttributeSet.read for documentation on reading files to handle exceptions
        aCTStoreRQMessage.DataSet.Read(ScriptContext._CTImageFullFileName)
        Try
            Send(aCTStoreRQMessage)
        Catch ex As DvtkHighLevelInterface.Common.Other.HliException
            'Error while sending. Handle as you please. 
            'ex.Message.ToString()
        End Try


        'The CStore Response
        Dim aCStoreRSPMessage As DvtkHighLevelInterface.Dicom.Messages.DicomMessage
        aCStoreRSPMessage = ReceiveDicomMessage()
        'make sure it really is a CSTORE Response
        If Not aCStoreRSPMessage.CommandSet.DimseCommand = DvtkData.Dimse.DimseCommand.CSTORERSP Then
            Throw New System.Exception("After a CSTORE Request the SCP returned an unexpected message.")
        End If


        'send a release request
        Try
            SendReleaseRq()
        Catch ex As DvtkHighLevelInterface.Common.Other.HliException
            'You error message. Handle as you please. 
            'ex.Message.ToString()
        End Try


        Dim aReleaseResponseMessage As DvtkHighLevelInterface.Dicom.Messages.ReleaseRp
        'receive the release response
        Try
            aReleaseResponseMessage = ReceiveReleaseRp()
        Catch ex As DvtkHighLevelInterface.Common.Other.HliException
            'You error message. Handle as you please. 
            'ex.Message.ToString()
        End Try

    End Sub

End Class
</Example>
            			<Example name="Main">
Class MainDicomThread
    Inherits DicomThreadScu

End Class 

Class ScriptContext

    ' Full session file name, only needed when not executing script under Dvt(Cmd).
    Public Const _SessionFullFileName As String = "C:\Program Files\DVT\example\scripts\storage\scu\Storage_SCU.ses"
    Public Const _CTImageFullFileName As String = "c:\YourCTImageFile.dcm"

End Class ' ScriptContext

Module DvtkScript

    Sub Main(ByVal CmdArgs() As String)

        Dim theExecutablePath As String = System.Windows.Forms.Application.ExecutablePath
        Dim theExecutableName As String = Path.GetFileName(theExecutablePath).ToLower()

        Dvtk.Setup.Initialize()

        Dim theDvtThreadManager As DvtkHighLevelInterface.Common.Threads.ThreadManager = New DvtkHighLevelInterface.Common.Threads.ThreadManager

        Dim theMainDicomThread As MainDicomThread = New MainDicomThread
        theMainDicomThread.Initialize(theDvtThreadManager)


        theMainDicomThread.Options.LoadFromFile(ScriptContext._SessionFullFileName)
        theMainDicomThread.Options.Identifier = "MainDicomThread"

        Dim theHliForm As HliForm = New HliForm
        theHliForm.AutoExit = False
        theHliForm.Attach(theMainDicomThread)

        theMainDicomThread.Start()

        theHliForm.WaitUntilClosed()

        Dvtk.Setup.Terminate()

    End Sub
</Example>		
            	</code>
            </example>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.ReceiveReleaseRq">
            <summary>
            Receives a A-RELEASE-RQ.
            </summary>
            <returns>The received A-RELEASE-RQ.</returns>
            <exception cref="T:System.Exception">
            Receiving of a message fails or the received message is not an A-RELEASE-RQQ.
            </exception> 
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.Send(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            Sends a Dicom Message.
            </summary>
            <param name="dicomMessage">The DicomMessage.</param>
            <exception cref="T:System.Exception">
            Sending of the DicomMessage fails.
            </exception> 
            <example>
            	<b>VB.NET</b>
            	<code>
            			<Example name="IncludesDicomThreadScu">
Imports System
Imports System.IO
Imports System.Windows.Forms
Imports DvtkData.Dimse.VR
Imports DvtkData.Dimse.DimseCommand
Imports DvtkHighLevelInterface
Imports DvtkHighLevelInterface.Dicom.Messages
Imports DvtkHighLevelInterface.Common.UserInterfaces
Imports DvtkHighLevelInterface.Dicom.Threads
</Example>
            			<Example name="DicomThreadScu">
Class DicomThreadScu
    Inherits DicomThread

    Protected Overrides Sub Execute()

        'Sending an association request
        SendAssociateRq _
        ( _
            New DvtkHighLevelInterface.Dicom.Other.PresentationContext("1.2.840.10008.5.1.4.1.1.2", "1.2.840.10008.1.2", "1.2.840.10008.1.2.1") _
        )


        'Receive the associate Ackknowledge 
        'Alternatively you could use ReceiveAssociateAc() method which will throw a 
        'HLIException if the received message is not an associate Ackknowledge
        Dim receivedMessage As DvtkHighLevelInterface.Dicom.Messages.DicomProtocolMessage = Nothing
        receivedMessage = ReceiveMessage()
        'Check wether the received response is indeed an associate ackknowledge
        If Not receivedMessage.IsAssociateAc Then
            If receivedMessage.IsAssociateRj Then
                Throw New System.Exception("Association Rejected.")
            ElseIf receivedMessage.IsAbort Then
                Throw New System.Exception("Abort Message.")
            Else
                'No idea what kind of message was sent back.
                Throw New System.Exception("Received unknown message.")
            End If
        End If


        'Sending a Message
        'We create a DicomMessage configured for C-Store Requests
        Dim aCTStoreRQMessage As DvtkHighLevelInterface.Dicom.Messages.DicomMessage = New DicomMessage(CSTORERQ)
        'Check the AttributeSet.read for documentation on reading files to handle exceptions
        aCTStoreRQMessage.DataSet.Read(ScriptContext._CTImageFullFileName)
        Try
            Send(aCTStoreRQMessage)
        Catch ex As DvtkHighLevelInterface.Common.Other.HliException
            'Error while sending. Handle as you please. 
            'ex.Message.ToString()
        End Try


        'The CStore Response
        Dim aCStoreRSPMessage As DvtkHighLevelInterface.Dicom.Messages.DicomMessage
        aCStoreRSPMessage = ReceiveDicomMessage()
        'make sure it really is a CSTORE Response
        If Not aCStoreRSPMessage.CommandSet.DimseCommand = DvtkData.Dimse.DimseCommand.CSTORERSP Then
            Throw New System.Exception("After a CSTORE Request the SCP returned an unexpected message.")
        End If


        'send a release request
        Try
            SendReleaseRq()
        Catch ex As DvtkHighLevelInterface.Common.Other.HliException
            'You error message. Handle as you please. 
            'ex.Message.ToString()
        End Try


        Dim aReleaseResponseMessage As DvtkHighLevelInterface.Dicom.Messages.ReleaseRp
        'receive the release response
        Try
            aReleaseResponseMessage = ReceiveReleaseRp()
        Catch ex As DvtkHighLevelInterface.Common.Other.HliException
            'You error message. Handle as you please. 
            'ex.Message.ToString()
        End Try

    End Sub

End Class
</Example>
            			<Example name="Main">
Class MainDicomThread
    Inherits DicomThreadScu

End Class 

Class ScriptContext

    ' Full session file name, only needed when not executing script under Dvt(Cmd).
    Public Const _SessionFullFileName As String = "C:\Program Files\DVT\example\scripts\storage\scu\Storage_SCU.ses"
    Public Const _CTImageFullFileName As String = "c:\YourCTImageFile.dcm"

End Class ' ScriptContext

Module DvtkScript

    Sub Main(ByVal CmdArgs() As String)

        Dim theExecutablePath As String = System.Windows.Forms.Application.ExecutablePath
        Dim theExecutableName As String = Path.GetFileName(theExecutablePath).ToLower()

        Dvtk.Setup.Initialize()

        Dim theDvtThreadManager As DvtkHighLevelInterface.Common.Threads.ThreadManager = New DvtkHighLevelInterface.Common.Threads.ThreadManager

        Dim theMainDicomThread As MainDicomThread = New MainDicomThread
        theMainDicomThread.Initialize(theDvtThreadManager)


        theMainDicomThread.Options.LoadFromFile(ScriptContext._SessionFullFileName)
        theMainDicomThread.Options.Identifier = "MainDicomThread"

        Dim theHliForm As HliForm = New HliForm
        theHliForm.AutoExit = False
        theHliForm.Attach(theMainDicomThread)

        theMainDicomThread.Start()

        theHliForm.WaitUntilClosed()

        Dvtk.Setup.Terminate()

    End Sub
</Example>		
            	</code>
            </example>		
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.Send(DvtkHighLevelInterface.Dicom.Messages.DicomMessage,System.Int32)">
            <summary>
            Sends a Dicom Message.
            </summary>
            <param name="dicomMessage">The DicomMessage.</param>
            <param name="presentationContextId">The ID of the presentation context to use.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.SendAbort(System.Byte,System.Byte)">
            <summary>
            Sends a Dicom A_ABORT.
            </summary>
            <param name="source">The Abort source.</param>
            <param name="reason">The Abort reason.</param>
            <returns>The sent A_ABORT.</returns>
            <exception cref="T:System.Exception">
            Sending of the A_ABORT fails.
            </exception> 
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.SendAssociateAc">
            <overloads>
            Sends an A-ASSOCIATE-AC.
            </overloads>
            <summary>
            Sends an A-ASSOCIATE-AC based on the previously received A-ASSOCIATE-RQ.
            </summary>
            <remarks>
            The following holds for the presentation contexts in the sent A-ASSOCIATE-AC:<br></br>
            - All requested presentation contexts will be accepted (have result field 0).<br></br>
            - For each requested presentation context, the first proposed transfer syntax will be used.<br></br><br></br>
            
            If an A-ASSOCIATE-RJ should be sent when none of the requested presentation contexts is accepted,
            use the SendAssociateRp method instead.	
            </remarks>
            <returns>The sent AssociateAc.</returns>
            <exception cref="T:System.Exception">
            Last received message is not an A-ASSOCIATE-RQ or no message has been received at all.
            </exception> 
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.SendAssociateAc(DvtkHighLevelInterface.Dicom.Other.PresentationContextCollection)">
            <summary>
            Sends an A-ASSOCIATE-AC based on the supplied presentation contexts.
            </summary>
            <remarks>
            Any requested presentation context that has no counterpart in the supplied presentation
            contexts will automaticaly be added to the A-ASSOCIATE-AC with the presentation context rejected.<br></br><br></br>
            
            If an A-ASSOCIATE-RJ should be sent when none of the requested presentation contexts is accepted,
            use the <see cref="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.SendAssociateRp(DvtkHighLevelInterface.Dicom.Other.PresentationContextCollection)"/> method instead.	
            </remarks>
            <param name="presentationContextCollection">The presentation contexts.</param>
            <returns>The sent AssociateAc.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.SendAssociateAc(DvtkHighLevelInterface.Dicom.Other.PresentationContext[])">
            <summary>
            Sends an A-ASSOCIATE-AC based on the supplied presentation contexts.
            </summary>
            <remarks>
            Any requested presentation context that has no counterpart in the supplied presentation
            contexts will automaticaly be added to the A-ASSOCIATE-AC with the presentation context rejected.<br></br><br></br>
            
            If an A-ASSOCIATE-RJ should be sent when none of the requested presentation contexts is accepted,
            use the <see cref="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.SendAssociateRp(DvtkHighLevelInterface.Dicom.Other.PresentationContext[])"/> method instead.	
            </remarks>
            <param name="presentationContexts">The presentation contexts.</param>
            <returns>The sent AssociateAc.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.SendAssociateAc(DvtkHighLevelInterface.Dicom.Other.SopClasses)">
            <summary>
            Sends an A-ASSOCIATE-AC based on the previously received A-ASSOCIATE-RQ.
            </summary>
            <remarks>
            The following holds for the presentation contexts in the sent A-ASSOCIATE-AC:<br></br>
            - All requested presentation contexts with an abstract syntax contained in the supplied
              SOP classes will be accepted (have result field 0). The rest will be rejected
              (have result field 3).<br></br>
            - For each accepted requested presentation context, the first proposed transfer syntax 
              will be used.<br></br><br></br>
            
            If an A-ASSOCIATE-RJ should be sent when none of the requested presentation contexts is accepted,
            use the <see cref="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.SendAssociateRp(DvtkHighLevelInterface.Dicom.Other.SopClasses)"/> method instead.	
            </remarks>
            <param name="sopClasses">The SOP Classes to accept.</param>
            <returns>The sent AssociateAc.</returns>
            <exception cref="T:System.Exception">
            Last received message is not an A-ASSOCIATE-RQ or no message has been received at all.
            </exception> 
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.SendAssociateAc(DvtkHighLevelInterface.Dicom.Other.SopClasses,DvtkHighLevelInterface.Dicom.Other.TransferSyntaxes[])">
            <summary>
            Sends an A-ASSOCIATE-AC based on the previously received A-ASSOCIATE-RQ.
            </summary>
            <remarks>
            The following holds for the presentation contexts in the sent A-ASSOCIATE-AC:<br></br>
            - All requested presentation contexts with an abstract syntax not contained in the supplied
              SOP classes will be rejected (have result field 3).<br></br>
            - For each other requested presentation contex that has an abstract syntax contained in
              the supplied SOP classes, do the following:<br></br>
              1)<br></br>
              Check if one or more of the requested transfer syntaxes is present in the first supplied
              TransferSyntaxes instance. If this is the case, use the requested transfer syntax that is
              requested before the other ones in the accepted presentation context counterpart (has
              result field 0).<br></br>
              2)<br></br>
              If no requested transfer syntaxes was present, try this with the second supplied
              TransferSyntaxes instance.<br></br>
              3) If no requested transfer syntaxes was present is in any supplied TransferSyntaxes
              instance, reject the presentation context with result 4.<br></br><br></br>
            
              Note that a difference exists between supplying one TransferSyntaxes instance with all
              transfer syntaxes to accept and supplying multiple TransferSyntaxes instances each containing
              only one transfer syntax. In the first case, the preference (order of proposed transfer
              syntaxes) of the SCU will be used, in the second case the preference of the caller of this
              method will be used.<br></br><br></br>
            
            If an A-ASSOCIATE-RJ should be sent when none of the requested presentation contexts is accepted,
            use the <see cref="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.SendAssociateRp(DvtkHighLevelInterface.Dicom.Other.SopClasses,DvtkHighLevelInterface.Dicom.Other.TransferSyntaxes[])"/> method instead.	
            </remarks>
            <param name="sopClasses">The SOP Classes to accept.</param>
            <param name="transferSyntaxesList">The transfer syntaxes to accept.</param>
            <returns>The sent AssociateAc.</returns>
            <exception cref="T:System.Exception">
            Last received message is not an A-ASSOCIATE-RQ or no message has been received at all.
            </exception> 
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.SendAssociateAc(DvtkHighLevelInterface.Dicom.Other.TransferSyntaxes[])">
            <summary>
            Sends an A-ASSOCIATE-AC based on the previously received A-ASSOCIATE-RQ.
            </summary>
            <remarks>
            The following holds for the presentation contexts in the sent A-ASSOCIATE-AC:<br></br>
            - For each requested presentation contex, do the following:<br></br>
              1)<br></br>
              Check if one or more of the requested transfer syntaxes is present in the first supplied
              TransferSyntaxes instance. If this is the case, use the requested transfer syntax that is
              requested before the other ones in the accepted presentation context counterpart (has
              result field 0).<br></br>
              2)<br></br>
              If no requested transfer syntaxes was present, try this with the second supplied
              TransferSyntaxes instance.<br></br>
              3) If no requested transfer syntaxes was present is in any supplied TransferSyntaxes
              instance, reject the presentation context with result 4.<br></br><br></br>
              
              Note that a difference exists between supplying one TransferSyntaxes instance with all
              transfer syntaxes to accept and supplying multiple TransferSyntaxes instances each containing
              only one transfer syntax. In the first case, the preference (order of proposed transfer
              syntaxes) of the SCU will be used, in the second case the preference of the caller of this
              method will be used.<br></br><br></br>
            
            If an A-ASSOCIATE-RJ should be sent when none of the requested presentation contexts is accepted,
            use the <see cref="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.SendAssociateRp(DvtkHighLevelInterface.Dicom.Other.TransferSyntaxes[])"/> method instead.	
            </remarks>
            <param name="transferSyntaxesList">The transfer syntaxes to accept.</param>
            <returns>The sent AssociateAc.</returns>
            <exception cref="T:System.Exception">
            Last received message is not an A-ASSOCIATE-RQ or no message has been received at all.
            </exception> 
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.SendAssociateRj">
            <summary>
            Sends a Dicom A_ASSOCIATE_RJ.
            </summary>
            <returns>The sent A_ASSOCIATE_RJ.</returns>
            <exception cref="T:System.Exception">
            Sending of the A_ASSOCIATE_RJ fails.
            </exception> 
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.SendAssociateRj(System.Byte,System.Byte,System.Byte)">
            <summary>
            Sends a Dicom A_ASSOCIATE_RJ.
            </summary>
            <param name="result">The result as defined in the Dicom standard.</param>
            <param name="source">The source as defined in the Dicom standard.</param>
            <param name="reason">The reason as defined in the Dicom standard.</param>
            <returns>The sent A_ASSOCIATE_RJ.</returns>
            <exception cref="T:System.Exception">
            Sending of the A_ASSOCIATE_RJ fails.
            </exception> 
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.SendAssociateRp">
            <overloads>
            Sends an A-ASSOCIATE-AC or A-ASSOCIATE-RJ.
            </overloads>
            <summary>
            Sends an A-ASSOCIATE-AC or A-ASSOCIATE-RJ based on the previously received A-ASSOCIATE-RQ.
            </summary>
            <remarks>
            This method will send an A-ASSOCIATE-AC if at least one presentation context will be accepted
            according to the rules specified below. Otherwise an A-ASSOCIATE-RJ will be sent. <br></br><br></br>
            
            The following holds for the presentation contexts in the A-ASSOCIATE-AC:<br></br>
            - All requested presentation contexts will be accepted (have result field 0).<br></br>
            - For each requested presentation context, the first proposed transfer syntax will be used.
            </remarks>
            <returns>The sent AssociateAc or AssociateRj.</returns>
            <exception cref="T:System.Exception">
            Last received message is not an A-ASSOCIATE-RQ or no message has been received at all.
            </exception> 
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.SendAssociateRp(DvtkHighLevelInterface.Dicom.Other.PresentationContextCollection)">
            <summary>
            Sends an A-ASSOCIATE-AC or A-ASSOCIATE-RJ based on the supplied presentation contexts.
            </summary>
            <remarks>
            This method will send an A-ASSOCIATE-AC if at least one presentation context will be accepted
            in the supplied presentation contexts. Otherwise an A-ASSOCIATE-RJ will be sent. <br></br><br></br>
            
            Any requested presentation context that has no counterpart in the supplied presentation
            contexts will automaticaly be added to the A-ASSOCIATE-AC with the presentation context rejected.<br></br><br></br>
            </remarks>
            <param name="presentationContextCollection">The presentation contexts.</param>
            <returns>The sent AssociateAc or AssociateRj.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.SendAssociateRp(DvtkHighLevelInterface.Dicom.Other.PresentationContext[])">
            <summary>
            Sends an A-ASSOCIATE-AC or A-ASSOCIATE-RJ based on the supplied presentation contexts.
            </summary>
            <remarks>
            This method will send an A-ASSOCIATE-AC if at least one presentation context will be accepted
            in the supplied presentation contexts. Otherwise an A-ASSOCIATE-RJ will be sent. <br></br><br></br>
            
            Any requested presentation context that has no counterpart in the supplied presentation
            contexts will automaticaly be added to the A-ASSOCIATE-AC with the presentation context rejected.<br></br><br></br>
            </remarks>
            <param name="presentationContexts">The presentation contexts.</param>
            <returns>The sent AssociateAc or AssociateRj.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.SendAssociateRp(DvtkHighLevelInterface.Dicom.Other.SopClasses)">
            <overloads>
            Sends an A-ASSOCIATE-AC or A-ASSOCIATE-RJ.
            </overloads>
            <summary>
            Sends an A-ASSOCIATE-AC or A-ASSOCIATE-RJ based on the previously received A-ASSOCIATE-RQ.
            </summary>
            <remarks>
            This method will send an A-ASSOCIATE-AC if at least one presentation context will be accepted
            according to the rules specified below. Otherwise an A-ASSOCIATE-RJ will be sent. <br></br><br></br>
            
            The following holds for the presentation contexts in the A-ASSOCIATE-AC:<br></br>
            - All requested presentation contexts with an abstract syntax contained in the supplied
              SOP classes will be accepted (have result field 0). The rest will be rejected
              (have result field 3).<br></br>
            - For each accepted requested presentation context, the first proposed transfer syntax 
              will be used.<br></br><br></br>
            </remarks>
            <param name="sopClasses">The SOP Classes to accept.</param>
            <returns>The sent AssociateAc or AssociateRj.</returns>
            <exception cref="T:System.Exception">
            Last received message is not an A-ASSOCIATE-RQ or no message has been received at all.
            </exception> 
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.SendAssociateRp(DvtkHighLevelInterface.Dicom.Other.SopClasses,DvtkHighLevelInterface.Dicom.Other.TransferSyntaxes[])">
            <overloads>
            Sends an A-ASSOCIATE-AC or A-ASSOCIATE-RJ.
            </overloads>
            <summary>
            Sends an A-ASSOCIATE-AC or A-ASSOCIATE-RJ based on the previously received A-ASSOCIATE-RQ.
            </summary>
            <remarks>
            This method will send an A-ASSOCIATE-AC if at least one presentation context will be accepted
            according to the rules specified below. Otherwise an A-ASSOCIATE-RJ will be sent. <br></br><br></br>
            
            The following holds for the presentation contexts in the A-ASSOCIATE-AC:<br></br>
            - All requested presentation contexts with an abstract syntax not contained in the supplied
              SOP classes will be rejected (have result field 3).<br></br>
            - For each other requested presentation contex that has an abstract syntax contained in
              the supplied SOP classes, do the following:<br></br>
              1)<br></br>
              Check if one or more of the requested transfer syntaxes is present in the first supplied
              TransferSyntaxes instance. If this is the case, use the requested transfer syntax that is
              requested before the other ones in the accepted presentation context counterpart (has
              result field 0).<br></br>
              2)<br></br>
              If no requested transfer syntaxes was present, try this with the second supplied
              TransferSyntaxes instance.<br></br>
              3) If no requested transfer syntaxes was present is in any supplied TransferSyntaxes
              instance, reject the presentation context with result 4.<br></br><br></br>
              
              Note that a difference exists between supplying one TransferSyntaxes instance with all
              transfer syntaxes to accept and supplying multiple TransferSyntaxes instances each containing
              only one transfer syntax. In the first case, the preference (order of proposed transfer
              syntaxes) of the SCU will be used, in the second case the preference of the caller of this
              method will be used.
            </remarks>
            <param name="sopClasses">The SOP Classes to accept.</param>
            <param name="transferSyntaxesList">The transfer syntaxes to accept.</param>
            <returns>The sent AssociateAc or AssociateRj.</returns>
            <exception cref="T:System.Exception">
            Last received message is not an A-ASSOCIATE-RQ or no message has been received at all.
            </exception> 
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.SendAssociateRp(DvtkHighLevelInterface.Dicom.Other.TransferSyntaxes[])">
            <summary>
            Sends an A-ASSOCIATE-AC or A-ASSOCIATE-RJ based on the previously received A-ASSOCIATE-RQ.
            </summary>
            <remarks>
            This method will send an A-ASSOCIATE-AC if at least one presentation context will be accepted
            according to the rules specified below. Otherwise an A-ASSOCIATE-RJ will be sent. <br></br><br></br>
            
            The following holds for the presentation contexts in the A-ASSOCIATE-AC:<br></br>
            - For each requested presentation contex, do the following:<br></br>
              1)<br></br>
              Check if one or more of the requested transfer syntaxes is present in the first supplied
              TransferSyntaxes instance. If this is the case, use the requested transfer syntax that is
              requested before the other ones in the accepted presentation context counterpart (has
              result field 0).<br></br>
              2)<br></br>
              If no requested transfer syntaxes was present, try this with the second supplied
              TransferSyntaxes instance.<br></br>
              3) If no requested transfer syntaxes was present is in any supplied TransferSyntaxes
              instance, reject the presentation context with result 4.<br></br><br></br>
              
              Note that a difference exists between supplying one TransferSyntaxes instance with all
              transfer syntaxes to accept and supplying multiple TransferSyntaxes instances each containing
              only one transfer syntax. In the first case, the preference (order of proposed transfer
              syntaxes) of the SCU will be used, in the second case the preference of the caller of this
              method will be used.
            </remarks>
            <param name="transferSyntaxesList">The transfer syntaxes to accept.</param>
            <returns>The sent AssociateAc or AssociateRj.</returns>
            <exception cref="T:System.Exception">
            Last received message is not an A-ASSOCIATE-RQ or no message has been received at all.
            </exception> 
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.SendAssociateRq(DvtkHighLevelInterface.Dicom.Other.PresentationContext[])">
            <summary>
            Sends an A-ASSOCIATE-RQ.
            </summary>
            <param name="presentationContexts">One or more PresentationContext objects.</param>
            <returns>The sent A-ASSOCIATE-RQ</returns>
            <exception cref="T:System.Exception">
            One or more of the supplied presentation contexts is an A_ASSOCIATE_AC presentation 
            context or sending of the A-ASSOCIATE-RQ fails.
            </exception> 
            <example>
            	<b>VB.NET</b>
            	<code>
            			<Example name="IncludesDicomThreadScu">
Imports System
Imports System.IO
Imports System.Windows.Forms
Imports DvtkData.Dimse.VR
Imports DvtkData.Dimse.DimseCommand
Imports DvtkHighLevelInterface
Imports DvtkHighLevelInterface.Dicom.Messages
Imports DvtkHighLevelInterface.Common.UserInterfaces
Imports DvtkHighLevelInterface.Dicom.Threads
</Example>
            			<Example name="DicomThreadScu">
Class DicomThreadScu
    Inherits DicomThread

    Protected Overrides Sub Execute()

        'Sending an association request
        SendAssociateRq _
        ( _
            New DvtkHighLevelInterface.Dicom.Other.PresentationContext("1.2.840.10008.5.1.4.1.1.2", "1.2.840.10008.1.2", "1.2.840.10008.1.2.1") _
        )


        'Receive the associate Ackknowledge 
        'Alternatively you could use ReceiveAssociateAc() method which will throw a 
        'HLIException if the received message is not an associate Ackknowledge
        Dim receivedMessage As DvtkHighLevelInterface.Dicom.Messages.DicomProtocolMessage = Nothing
        receivedMessage = ReceiveMessage()
        'Check wether the received response is indeed an associate ackknowledge
        If Not receivedMessage.IsAssociateAc Then
            If receivedMessage.IsAssociateRj Then
                Throw New System.Exception("Association Rejected.")
            ElseIf receivedMessage.IsAbort Then
                Throw New System.Exception("Abort Message.")
            Else
                'No idea what kind of message was sent back.
                Throw New System.Exception("Received unknown message.")
            End If
        End If


        'Sending a Message
        'We create a DicomMessage configured for C-Store Requests
        Dim aCTStoreRQMessage As DvtkHighLevelInterface.Dicom.Messages.DicomMessage = New DicomMessage(CSTORERQ)
        'Check the AttributeSet.read for documentation on reading files to handle exceptions
        aCTStoreRQMessage.DataSet.Read(ScriptContext._CTImageFullFileName)
        Try
            Send(aCTStoreRQMessage)
        Catch ex As DvtkHighLevelInterface.Common.Other.HliException
            'Error while sending. Handle as you please. 
            'ex.Message.ToString()
        End Try


        'The CStore Response
        Dim aCStoreRSPMessage As DvtkHighLevelInterface.Dicom.Messages.DicomMessage
        aCStoreRSPMessage = ReceiveDicomMessage()
        'make sure it really is a CSTORE Response
        If Not aCStoreRSPMessage.CommandSet.DimseCommand = DvtkData.Dimse.DimseCommand.CSTORERSP Then
            Throw New System.Exception("After a CSTORE Request the SCP returned an unexpected message.")
        End If


        'send a release request
        Try
            SendReleaseRq()
        Catch ex As DvtkHighLevelInterface.Common.Other.HliException
            'You error message. Handle as you please. 
            'ex.Message.ToString()
        End Try


        Dim aReleaseResponseMessage As DvtkHighLevelInterface.Dicom.Messages.ReleaseRp
        'receive the release response
        Try
            aReleaseResponseMessage = ReceiveReleaseRp()
        Catch ex As DvtkHighLevelInterface.Common.Other.HliException
            'You error message. Handle as you please. 
            'ex.Message.ToString()
        End Try

    End Sub

End Class
</Example>
            			<Example name="Main">
Class MainDicomThread
    Inherits DicomThreadScu

End Class 

Class ScriptContext

    ' Full session file name, only needed when not executing script under Dvt(Cmd).
    Public Const _SessionFullFileName As String = "C:\Program Files\DVT\example\scripts\storage\scu\Storage_SCU.ses"
    Public Const _CTImageFullFileName As String = "c:\YourCTImageFile.dcm"

End Class ' ScriptContext

Module DvtkScript

    Sub Main(ByVal CmdArgs() As String)

        Dim theExecutablePath As String = System.Windows.Forms.Application.ExecutablePath
        Dim theExecutableName As String = Path.GetFileName(theExecutablePath).ToLower()

        Dvtk.Setup.Initialize()

        Dim theDvtThreadManager As DvtkHighLevelInterface.Common.Threads.ThreadManager = New DvtkHighLevelInterface.Common.Threads.ThreadManager

        Dim theMainDicomThread As MainDicomThread = New MainDicomThread
        theMainDicomThread.Initialize(theDvtThreadManager)


        theMainDicomThread.Options.LoadFromFile(ScriptContext._SessionFullFileName)
        theMainDicomThread.Options.Identifier = "MainDicomThread"

        Dim theHliForm As HliForm = New HliForm
        theHliForm.AutoExit = False
        theHliForm.Attach(theMainDicomThread)

        theMainDicomThread.Start()

        theHliForm.WaitUntilClosed()

        Dvtk.Setup.Terminate()

    End Sub
</Example>		
            	</code>
            </example>		
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.SendAssociateRq(DvtkData.Dul.A_ASSOCIATE_RQ)">
            <summary>
            Sends an A-ASSOCIATE-RQ.The A-ASSOCIATE-RQ being passed must have the Presentation Contexts also.
            </summary>
            <param name="associateRequest">The A-Associate-Rq</param>
            <returns>The sent A-ASSOCIATE-RQ</returns>
            <exception cref="T:System.Exception">
            The A-Associate-Rq message does not have any presentation contexts. 
            
            </exception> 
            <example>
            	<b>VB.NET</b>
            	<code>
            			<Example name="IncludesDicomThreadScu">
Imports System
Imports System.IO
Imports System.Windows.Forms
Imports DvtkData.Dimse.VR
Imports DvtkData.Dimse.DimseCommand
Imports DvtkHighLevelInterface
Imports DvtkHighLevelInterface.Dicom.Messages
Imports DvtkHighLevelInterface.Common.UserInterfaces
Imports DvtkHighLevelInterface.Dicom.Threads
</Example>
            			<Example name="DicomThreadScu">
Class DicomThreadScu
    Inherits DicomThread

    Protected Overrides Sub Execute()

        'Sending an association request
        SendAssociateRq _
        ( _
            New DvtkHighLevelInterface.Dicom.Other.PresentationContext("1.2.840.10008.5.1.4.1.1.2", "1.2.840.10008.1.2", "1.2.840.10008.1.2.1") _
        )


        'Receive the associate Ackknowledge 
        'Alternatively you could use ReceiveAssociateAc() method which will throw a 
        'HLIException if the received message is not an associate Ackknowledge
        Dim receivedMessage As DvtkHighLevelInterface.Dicom.Messages.DicomProtocolMessage = Nothing
        receivedMessage = ReceiveMessage()
        'Check wether the received response is indeed an associate ackknowledge
        If Not receivedMessage.IsAssociateAc Then
            If receivedMessage.IsAssociateRj Then
                Throw New System.Exception("Association Rejected.")
            ElseIf receivedMessage.IsAbort Then
                Throw New System.Exception("Abort Message.")
            Else
                'No idea what kind of message was sent back.
                Throw New System.Exception("Received unknown message.")
            End If
        End If


        'Sending a Message
        'We create a DicomMessage configured for C-Store Requests
        Dim aCTStoreRQMessage As DvtkHighLevelInterface.Dicom.Messages.DicomMessage = New DicomMessage(CSTORERQ)
        'Check the AttributeSet.read for documentation on reading files to handle exceptions
        aCTStoreRQMessage.DataSet.Read(ScriptContext._CTImageFullFileName)
        Try
            Send(aCTStoreRQMessage)
        Catch ex As DvtkHighLevelInterface.Common.Other.HliException
            'Error while sending. Handle as you please. 
            'ex.Message.ToString()
        End Try


        'The CStore Response
        Dim aCStoreRSPMessage As DvtkHighLevelInterface.Dicom.Messages.DicomMessage
        aCStoreRSPMessage = ReceiveDicomMessage()
        'make sure it really is a CSTORE Response
        If Not aCStoreRSPMessage.CommandSet.DimseCommand = DvtkData.Dimse.DimseCommand.CSTORERSP Then
            Throw New System.Exception("After a CSTORE Request the SCP returned an unexpected message.")
        End If


        'send a release request
        Try
            SendReleaseRq()
        Catch ex As DvtkHighLevelInterface.Common.Other.HliException
            'You error message. Handle as you please. 
            'ex.Message.ToString()
        End Try


        Dim aReleaseResponseMessage As DvtkHighLevelInterface.Dicom.Messages.ReleaseRp
        'receive the release response
        Try
            aReleaseResponseMessage = ReceiveReleaseRp()
        Catch ex As DvtkHighLevelInterface.Common.Other.HliException
            'You error message. Handle as you please. 
            'ex.Message.ToString()
        End Try

    End Sub

End Class
</Example>
            			<Example name="Main">
Class MainDicomThread
    Inherits DicomThreadScu

End Class 

Class ScriptContext

    ' Full session file name, only needed when not executing script under Dvt(Cmd).
    Public Const _SessionFullFileName As String = "C:\Program Files\DVT\example\scripts\storage\scu\Storage_SCU.ses"
    Public Const _CTImageFullFileName As String = "c:\YourCTImageFile.dcm"

End Class ' ScriptContext

Module DvtkScript

    Sub Main(ByVal CmdArgs() As String)

        Dim theExecutablePath As String = System.Windows.Forms.Application.ExecutablePath
        Dim theExecutableName As String = Path.GetFileName(theExecutablePath).ToLower()

        Dvtk.Setup.Initialize()

        Dim theDvtThreadManager As DvtkHighLevelInterface.Common.Threads.ThreadManager = New DvtkHighLevelInterface.Common.Threads.ThreadManager

        Dim theMainDicomThread As MainDicomThread = New MainDicomThread
        theMainDicomThread.Initialize(theDvtThreadManager)


        theMainDicomThread.Options.LoadFromFile(ScriptContext._SessionFullFileName)
        theMainDicomThread.Options.Identifier = "MainDicomThread"

        Dim theHliForm As HliForm = New HliForm
        theHliForm.AutoExit = False
        theHliForm.Attach(theMainDicomThread)

        theMainDicomThread.Start()

        theHliForm.WaitUntilClosed()

        Dvtk.Setup.Terminate()

    End Sub
</Example>		
            	</code>
            </example>		
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.SendAssociation(DvtkHighLevelInterface.Dicom.Messages.DicomMessage,DvtkHighLevelInterface.Dicom.Other.PresentationContext[])">
            <summary>
            Sends a single Dicom Message while taking care of setting up and releasing an
            association for it.
            </summary>
            <remarks>
            1. An A-ASSOCIATE-RQ is sent.<br></br>
            2. An A-ASSOCIATE-AC or A-ASSOCIATE-RJ is received.<br></br>
            Only when an A-ASSOCIATE-AC is received, steps 3, 4 and 5 are executed.<br></br>
            3. The Dicom Message is send and responses are received until the status is not pending anymore.<br></br>
            4. An A-RELEASE-RQ is sent.<br></br>
            5. An A-RELEASE-RP is received.<br></br>
            </remarks>
            <param name="dicomMessage">The Dicom Message to send.</param>
            <param name="presentationContexts">The presentation contexts to propose in the A-ASSOCIATE-RQ.</param>
            <returns>
            True indicates the other side has accepted the association, false indicates the other side
            has rejected the association.
            </returns>
            <exception cref="T:System.Exception">
            Sending or receiving of one of the Dul or Dicom messages fails or the flow of messages differs
            from the flow described.
            </exception> 
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.SendAssociation(DvtkHighLevelInterface.Dicom.Messages.DicomMessageCollection,DvtkHighLevelInterface.Dicom.Other.PresentationContext[])">
            <summary>
            Sends a Dicom Messages while taking care of setting up and releasing an
            association for it.
            </summary>
            <remarks>
            1. An A-ASSOCIATE-RQ is sent.<br></br>
            2. An A-ASSOCIATE-AC or A-ASSOCIATE-RJ is received.<br></br>
            Only when an A-ASSOCIATE-AC is received, steps 3, 4 and 5 are executed.<br></br>
            3. For each Dicom Message to send, it is sent and responses are received until the status is not pending anymore.<br></br>
            4. An A-RELEASE-RQ is sent.<br></br>
            5. An A-RELEASE-RP is received.<br></br>
            </remarks>
            <param name="dicomMessages">The Dicom Messages to send.</param>
            <param name="presentationContexts">The presentation contexts to propose in the A-ASSOCIATE-RQ.</param>
            <returns>
            True indicates the other side has accepted the association, false indicates the other side
            has rejected the association.
            </returns>
            <exception cref="T:System.Exception">
            Sending or receiving of one of the Dul or Dicom messages fails or the flow of messages differs
            from the flow described.
            </exception> 
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.SendReleaseRp">
            <summary>
            Sends a Dicom A_RELEASE_RP.
            </summary>
            <returns>The sent A_RELEASE_RP.</returns>
            <exception cref="T:System.Exception">
            Sending of the A_RELEASE_RP fails.
            </exception> 		
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.SendReleaseRq">
            <summary>
            Sends an A-RELEASE-RQ.
            </summary>
            <returns>The sent A-RELEASE-RQ.</returns>
            <exception cref="T:System.Exception">
            Sending of the A-RELEASE-RQ fails.
            </exception> 
            <example>
            	<b>VB.NET</b>
            	<code>
            			<Example name="IncludesDicomThreadScu">
Imports System
Imports System.IO
Imports System.Windows.Forms
Imports DvtkData.Dimse.VR
Imports DvtkData.Dimse.DimseCommand
Imports DvtkHighLevelInterface
Imports DvtkHighLevelInterface.Dicom.Messages
Imports DvtkHighLevelInterface.Common.UserInterfaces
Imports DvtkHighLevelInterface.Dicom.Threads
</Example>
            			<Example name="DicomThreadScu">
Class DicomThreadScu
    Inherits DicomThread

    Protected Overrides Sub Execute()

        'Sending an association request
        SendAssociateRq _
        ( _
            New DvtkHighLevelInterface.Dicom.Other.PresentationContext("1.2.840.10008.5.1.4.1.1.2", "1.2.840.10008.1.2", "1.2.840.10008.1.2.1") _
        )


        'Receive the associate Ackknowledge 
        'Alternatively you could use ReceiveAssociateAc() method which will throw a 
        'HLIException if the received message is not an associate Ackknowledge
        Dim receivedMessage As DvtkHighLevelInterface.Dicom.Messages.DicomProtocolMessage = Nothing
        receivedMessage = ReceiveMessage()
        'Check wether the received response is indeed an associate ackknowledge
        If Not receivedMessage.IsAssociateAc Then
            If receivedMessage.IsAssociateRj Then
                Throw New System.Exception("Association Rejected.")
            ElseIf receivedMessage.IsAbort Then
                Throw New System.Exception("Abort Message.")
            Else
                'No idea what kind of message was sent back.
                Throw New System.Exception("Received unknown message.")
            End If
        End If


        'Sending a Message
        'We create a DicomMessage configured for C-Store Requests
        Dim aCTStoreRQMessage As DvtkHighLevelInterface.Dicom.Messages.DicomMessage = New DicomMessage(CSTORERQ)
        'Check the AttributeSet.read for documentation on reading files to handle exceptions
        aCTStoreRQMessage.DataSet.Read(ScriptContext._CTImageFullFileName)
        Try
            Send(aCTStoreRQMessage)
        Catch ex As DvtkHighLevelInterface.Common.Other.HliException
            'Error while sending. Handle as you please. 
            'ex.Message.ToString()
        End Try


        'The CStore Response
        Dim aCStoreRSPMessage As DvtkHighLevelInterface.Dicom.Messages.DicomMessage
        aCStoreRSPMessage = ReceiveDicomMessage()
        'make sure it really is a CSTORE Response
        If Not aCStoreRSPMessage.CommandSet.DimseCommand = DvtkData.Dimse.DimseCommand.CSTORERSP Then
            Throw New System.Exception("After a CSTORE Request the SCP returned an unexpected message.")
        End If


        'send a release request
        Try
            SendReleaseRq()
        Catch ex As DvtkHighLevelInterface.Common.Other.HliException
            'You error message. Handle as you please. 
            'ex.Message.ToString()
        End Try


        Dim aReleaseResponseMessage As DvtkHighLevelInterface.Dicom.Messages.ReleaseRp
        'receive the release response
        Try
            aReleaseResponseMessage = ReceiveReleaseRp()
        Catch ex As DvtkHighLevelInterface.Common.Other.HliException
            'You error message. Handle as you please. 
            'ex.Message.ToString()
        End Try

    End Sub

End Class
</Example>
            			<Example name="Main">
Class MainDicomThread
    Inherits DicomThreadScu

End Class 

Class ScriptContext

    ' Full session file name, only needed when not executing script under Dvt(Cmd).
    Public Const _SessionFullFileName As String = "C:\Program Files\DVT\example\scripts\storage\scu\Storage_SCU.ses"
    Public Const _CTImageFullFileName As String = "c:\YourCTImageFile.dcm"

End Class ' ScriptContext

Module DvtkScript

    Sub Main(ByVal CmdArgs() As String)

        Dim theExecutablePath As String = System.Windows.Forms.Application.ExecutablePath
        Dim theExecutableName As String = Path.GetFileName(theExecutablePath).ToLower()

        Dvtk.Setup.Initialize()

        Dim theDvtThreadManager As DvtkHighLevelInterface.Common.Threads.ThreadManager = New DvtkHighLevelInterface.Common.Threads.ThreadManager

        Dim theMainDicomThread As MainDicomThread = New MainDicomThread
        theMainDicomThread.Initialize(theDvtThreadManager)


        theMainDicomThread.Options.LoadFromFile(ScriptContext._SessionFullFileName)
        theMainDicomThread.Options.Identifier = "MainDicomThread"

        Dim theHliForm As HliForm = New HliForm
        theHliForm.AutoExit = False
        theHliForm.Attach(theMainDicomThread)

        theMainDicomThread.Start()

        theHliForm.WaitUntilClosed()

        Dvtk.Setup.Terminate()

    End Sub
</Example>		
            	</code>
            </example>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.ShowResults">
            <summary>
            Shows the detailed results by starting the windows application associated with an xml file.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.StartResultsGathering">
            <summary>
            Starts the results gathering.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.StopCurrentThread">
            <summary>
            Stops the current thread only:
            - Terminate any open TCP/IP connection
            - If that doesn't work, Abort the .netThread associated with this object.
            
            This method will indirectly be called in a seperate .Net thread (not in the .Net thread of
            this object) when the Stop method of this instance is called. A seperate thread is used to
            make sure that other threads are not waiting on the Stop method while this code is executed.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.StopResultsGathering">
            <summary>
            Stops the results gathering.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.TriggerAssociationReleasedEvent(DvtkHighLevelInterface.Dicom.Threads.DicomThread)">
            <summary>
            Used to trigger the AssociationReleasedEvent.
            </summary>
            <param name="dicomThread">The DicomThread which sends to received the A-RELEASE-RQ.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.UpdateErrorAndWarningCount">
            <summary>
            Adds the error and warning counts of all childs Threads to the error and warning counts
            of this instance.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.Validate(DvtkHighLevelInterface.Dicom.Messages.DicomProtocolMessage)">
            <summary>
            Validates a message.
            </summary>
            <param name="dicomProtocolMessage">The message to validate.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.Validate(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            Validates a Dicom Message.
            </summary>
            <remarks>
            If applicable for this Dicom Message, this method will automatically try
            to determine the correct definition file to use for validation. A warning
            will be logged if no definition file can be found.
            </remarks>
            <param name="dicomMessage">The Dicom Message to validate.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.Validate(DvtkHighLevelInterface.Dicom.Messages.DicomMessage,DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            Validates a Dicom Message against a reference Dicom Message.
            </summary>
            <remarks>
            If applicable for this Dicom Message, this method will automatically try
            to determine the correct definition file to use for validation. A warning
            will be logged if no definition file can be found.
            </remarks>
            <param name="dicomMessageSrc">The Dicom Message to validate.</param>
            <param name="dicomMessageRef">The reference Message.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.Validate(DvtkHighLevelInterface.Dicom.Messages.DicomMessage,DvtkHighLevelInterface.Dicom.Messages.DicomMessage,System.String)">
            <summary>
            Validates a Dicom Message against a reference Dicom Message.
            </summary>
            <param name="dicomMessageSrc">The Dicom Message to validate.</param>
            <param name="dicomMessageRef">The reference Dicom Message.</param>
            <param name="iodName">
            The IOD name used to select the definition file to use for validation.<br></br>
            When "" is supplied, no definition file is used for validation.
            </param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.Validate(DvtkHighLevelInterface.Dicom.Messages.DicomMessage,System.String)">
            <summary>
            Validates a Dicom Message.
            </summary>
            <param name="dicomMessage">The Dicom Message to validate.</param>
            <param name="iodName">
            The IOD name used to select the definition file to use for validation.<br></br>
            When "" is supplied, no definition file is used for validation.
            </param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.Validate(DvtkHighLevelInterface.Dicom.Messages.DulMessage)">
            <summary>
            Validates a Dul Message.
            </summary>
            <param name="dulMessage">The Dul Message to validate.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.WaitForPendingDataInNetworkInputBuffer(System.Int32,System.Int32@)">
            <summary>
            Waits until pending data is available in the network input buffer.
            </summary>
            <param name="timeOut">The maximum amout of time in milliseconds to wait for pending data.</param>
            <param name="waitedTime">Return amout of time in milliseconds waited for pending data.</param>
            <returns>Returns a boolean indicating if pending data is available.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.WriteError(System.String)">
            <summary>
            Writes an error text to the results and triggers an ErrorOutputEvent.
            </summary>
            <remarks>
            When this instance is e.g. attached to a HliForm, the supplied error text will be
            displayed in this Form (the triggered ErrorOutputEvent is used for this).
            </remarks>
            <param name="text">The error text.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.WriteHtml(System.String,System.Boolean,System.Boolean)">
            <summary>
            Writes a HTML text to the results.
            </summary>
            <param name="html">The HTML text.</param>
            <param name="writeToSummary">Determines if the HTML text will be written to the summary results file.</param>
            <param name="writeToDetail">Determines if the HTML text will be written to the detail results file.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.WriteHtmlInformation(System.String)">
            <summary>
            Writes a HTML text to the results.
            </summary>
            <param name="html">The HTML text.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.WriteInformation(System.String)">
            <summary>
            Writes an information text to the results and triggers an InformationOutputEvent.
            </summary>
            <remarks>
            When this instance is e.g. attached to a HliForm, the supplied information text will be
            displayed in this Form (the triggered InformationOutputEvent is used for this).
            </remarks>
            <param name="text">The information text.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThread.WriteWarning(System.String)">
            <summary>
            Writes a warning text to the results and triggers a WarningOutputEvent.
            </summary>
            <remarks>
            When this instance is e.g. attached to a HliForm, the supplied warning text will be
            displayed in this Form (the triggered WarningOutputEvent is used for this).
            </remarks>
            <param name="text">The warning text.</param>
        </member>
        <member name="E:DvtkHighLevelInterface.Dicom.Threads.DicomThread.AssociationReleasedEvent">
            <summary>
            Event is fired when an A-RELEASE-RQ has been sent or received.
            </summary>
        </member>
        <member name="E:DvtkHighLevelInterface.Dicom.Threads.DicomThread.MessageReceivedEvent">
            <summary>
            This event is triggered when this instance has received a message.
            </summary>
        </member>
        <member name="E:DvtkHighLevelInterface.Dicom.Threads.DicomThread.SendingMessageEvent">
            <summary>
            This event is triggered just before this instance is going to send a message.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Threads.DicomThread.DvtkScriptSession">
            <summary>
            Gets or sets the encapsulated Dvtk ScriptSession.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Threads.DicomThread.Messages">
            <summary>
            Gets the collection of received and send messages by this instance.
            
            Note that messages may have been removed from this collection using the RemoveMessage or 
            ClearMessages methods.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Threads.DicomThread.NrOfErrors">
            <summary>
            Gets the number of errors found during execution of this thread and all child threads.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Threads.DicomThread.NrOfGeneralErrors">
            <summary>
            Gets or sets the number of general errors found during execution of this thread and all child threads.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Threads.DicomThread.NrOfGeneralWarnings">
            <summary>
            Gets or sets the number of general warnings found during execution of this thread and all child threads.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Threads.DicomThread.NrOfUserErrors">
            <summary>
            Gets or sets the number of user errors found during execution of this thread and all child threads.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Threads.DicomThread.NrOfUserWarnings">
            <summary>
            Gets or sets the number of user warnings found during execution of this thread and all child threads.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Threads.DicomThread.NrOfValidationErrors">
            <summary>
            Gets or sets the number of validation errors found during execution of this thread and all child threads.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Threads.DicomThread.NrOfValidationWarnings">
            <summary>
            Gets or sets the number of validation warnings found during execution of this thread and all child threads.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Threads.DicomThread.NrOfWarnings">
            <summary>
            Gets the number of warnings found during execution of this thread and all child threads.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Threads.DicomThread.Options">
            <summary>
            Gets the options for this instance.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Dicom.Threads.DicomThread.AssociationReleasedEventHandler">
            <summary>
            Delegate used for the AssociationReleasedEvent event.
            </summary>
            <param name="dicomThread"></param>
        </member>
        <member name="T:DvtkHighLevelInterface.Dicom.Threads.DicomThread.MessageReceivedEventHandler">
            <summary>
            Delegate used for the MessageReceivedEvent event.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Dicom.Threads.DicomThread.SendingMessageEventHandler">
            <summary>
            Delegate used for the SendingMessageEvent event.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.isMessageHandled">
            <summary>
            See property IsMessageHandled.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.messageHandlers">
            <summary>
            The list of attached MessageHandlers. The order in which the 
            MessageHandlers are stored is of importance. When a message is
            received, this object tries to handle the message with a MessageHandler
            starting at the beginning of the list. When the message is handled by
            a MessageHandler, the MessageHandlers following in the list are not
            applied anymore for this specific message.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.receiveMessages">
            <summary>
            Boolean indicating if this instance should still listen for incoming messages.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.AddToBack(DvtkHighLevelInterface.Dicom.Threads.MessageHandler)">
            <summary>
            Add a MessageHandler to the back. When a MessageHandler is at the back,
            all MessageHandlers in front may try to handle a received messages first.
            </summary>
            <param name="messageHandler">The MessageHandler to add.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.AddToFront(DvtkHighLevelInterface.Dicom.Threads.MessageHandler)">
            <summary>
            Add a MessageHandler to the front. When a MessageHandler is at the front,
            this MessageHandlers may try to handle a received messages first.
            </summary>
            <param name="messageHandler">The MessageHandler to add.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.AfterHandlingAbort(DvtkHighLevelInterface.Dicom.Messages.Abort)">
            <summary>
            This method is called after an A-ABORT has been received and has 
            (possibly) been handled by the (zero or more) MessageHandler objects that
            are attached to this object.
            
            Default, nothing is done in this method. Override if needed.
            </summary>
            <param name="abort">The received A-ABORT.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.AfterHandlingAssociateAccept(DvtkHighLevelInterface.Dicom.Messages.AssociateAc)">
            <summary>
            This method is called after an A-ASSOCIATE-AC has been received and has 
            (possibly) been handled by the (zero or more) MessageHandler objects that
            are attached to this object.
            
            Default, nothing is done in this method. Override if needed.
            </summary>
            <param name="associateAc">The received A-ASSOCIATE-AC.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.AfterHandlingAssociateReject(DvtkHighLevelInterface.Dicom.Messages.AssociateRj)">
            <summary>
            This method is called after an A-ASSOCIATE-RJ has been received and has 
            (possibly) been handled by the (zero or more) MessageHandler objects that
            are attached to this object.
            
            Default, nothing is done in this method. Override if needed.
            </summary>
            <param name="associateRj">The received A-ASSOCIATE-RJ.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.AfterHandlingAssociateRequest(DvtkHighLevelInterface.Dicom.Messages.AssociateRq)">
            <summary>
            This method is called after an A-ASSOCIATE-RQ has been received and has 
            (possibly) been handled by the (zero or more) MessageHandler objects that
            are attached to this object.
            
            Default, nothing is done in this method. Override if needed.
            </summary>
            <param name="associateRq">The received A-ASSOCIATE-RQ.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.AfterHandlingCCancelRequest(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            This method is called after a C-CANCEL-RQ message has been received and has 
            (possibly) been handled by the (zero or more) MessageHandler objects that
            are attached to this object.
            
            Default, nothing is done in this method. Override if needed.
            </summary>
            <param name="dicomMessage">The received C-CANCEL-RQ message.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.AfterHandlingCEchoRequest(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            This method is called after a C-ECHO-RQ message has been received and has 
            (possibly) been handled by the (zero or more) MessageHandler objects that
            are attached to this object.
            
            Default, nothing is done in this method. Override if needed.
            </summary>
            <param name="dicomMessage">The received C-ECHO-RQ message.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.AfterHandlingCEchoResponse(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            This method is called after a C-ECHO-RSP message has been received and has 
            (possibly) been handled by the (zero or more) MessageHandler objects that
            are attached to this object.
            
            Default, nothing is done in this method. Override if needed.
            </summary>
            <param name="dicomMessage">The received C-ECHO-RSP message.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.AfterHandlingCFindRequest(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            This method is called after a C-FIND-RQ message has been received and has 
            (possibly) been handled by the (zero or more) MessageHandler objects that
            are attached to this object.
            
            Default, nothing is done in this method. Override if needed.
            </summary>
            <param name="dicomMessage">The received C-FIND-RQ message.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.AfterHandlingCFindResponse(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            This method is called after a C-FIND-RSP message has been received and has 
            (possibly) been handled by the (zero or more) MessageHandler objects that
            are attached to this object.
            
            Default, nothing is done in this method. Override if needed.
            </summary>
            <param name="dicomMessage">The received C-FIND-RSP message.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.AfterHandlingCGetRequest(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            This method is called after a C-GET-RQ message has been received and has 
            (possibly) been handled by the (zero or more) MessageHandler objects that
            are attached to this object.
            
            Default, nothing is done in this method. Override if needed.
            </summary>
            <param name="dicomMessage">The received C-GET-RQ message.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.AfterHandlingCGetResponse(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            This method is called after a C-GET-RSP message has been received and has 
            (possibly) been handled by the (zero or more) MessageHandler objects that
            are attached to this object.
            
            Default, nothing is done in this method. Override if needed.
            </summary>
            <param name="dicomMessage">The received C-GET-RSP message.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.AfterHandlingCMoveRequest(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            This method is called after a C-MOVE-RQ message has been received and has 
            (possibly) been handled by the (zero or more) MessageHandler objects that
            are attached to this object.
            
            Default, nothing is done in this method. Override if needed.
            </summary>
            <param name="dicomMessage">The received C-MOVE-RQ message.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.AfterHandlingCMoveResponse(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            This method is called after a C-MOVE-RSP message has been received and has 
            (possibly) been handled by the (zero or more) MessageHandler objects that
            are attached to this object.
            
            Default, nothing is done in this method. Override if needed.
            </summary>
            <param name="dicomMessage">The received C-MOVE-RSP message.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.AfterHandlingCStoreRequest(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            This method is called after a C-STORE-RQ message has been received and has 
            (possibly) been handled by the (zero or more) MessageHandler objects that
            are attached to this object.
            
            Default, nothing is done in this method. Override if needed.
            </summary>
            <param name="dicomMessage">The received C-STORE-RQ message.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.AfterHandlingCStoreResponse(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            This method is called after a C-STORE-RSP message has been received and has 
            (possibly) been handled by the (zero or more) MessageHandler objects that
            are attached to this object.
            
            Default, nothing is done in this method. Override if needed.
            </summary>
            <param name="dicomMessage">The received C-STORE-RSP message.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.AfterHandlingDicomMessage(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            This method is called after a Dicom message has been received and has 
            (possibly) been handled by the (zero or more) MessageHandler objects that
            are attached to this object.
            </summary>
            <param name="dicomMessage">The received Dicom message.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.AfterHandlingDulMessage(DvtkHighLevelInterface.Dicom.Messages.DulMessage)">
            <summary>
            This method is called after a DulMessage has been received and has 
            (possibly) been handled by the (zero or more) MessageHandler objects that
            are attached to this object.
            </summary>
            <param name="dulMessage">The received DulMessage.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.AfterHandlingMessage(DvtkHighLevelInterface.Dicom.Messages.DicomProtocolMessage)">
            <summary>
            This method is called after a Message has been received and has 
            (possibly) been handled by the (zero or more) MessageHandler objects that
            are attached to this object.
            </summary>
            <param name="message">The received Message.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.AfterHandlingNActionRequest(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            This method is called after a N-ACTION-RQ message has been received and has 
            (possibly) been handled by the (zero or more) MessageHandler objects that
            are attached to this object.
            
            Default, nothing is done in this method. Override if needed.
            </summary>
            <param name="dicomMessage">The received N-ACTION-RQ message.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.AfterHandlingNActionResponse(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            This method is called after a N-ACTION-RSP message has been received and has 
            (possibly) been handled by the (zero or more) MessageHandler objects that
            are attached to this object.
            
            Default, nothing is done in this method. Override if needed.
            </summary>
            <param name="dicomMessage">The received N-ACTION-RSP message.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.AfterHandlingNCreateRequest(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            This method is called after a N-CREATE-RQ message has been received and has 
            (possibly) been handled by the (zero or more) MessageHandler objects that
            are attached to this object.
            
            Default, nothing is done in this method. Override if needed.
            </summary>
            <param name="dicomMessage">The received N-CREATE-RQ message.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.AfterHandlingNCreateResponse(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            This method is called after a N-CREATE-RSP message has been received and has 
            (possibly) been handled by the (zero or more) MessageHandler objects that
            are attached to this object.
            
            Default, nothing is done in this method. Override if needed.
            </summary>
            <param name="dicomMessage">The received N-CREATE-RSP message.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.AfterHandlingNDeleteRequest(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            This method is called after a N-DELETE-RQ message has been received and has 
            (possibly) been handled by the (zero or more) MessageHandler objects that
            are attached to this object.
            
            Default, nothing is done in this method. Override if needed.
            </summary>
            <param name="dicomMessage">The received N-DELETE-RQ message.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.AfterHandlingNDeleteResponse(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            This method is called after a N-DELETE-RSP message has been received and has 
            (possibly) been handled by the (zero or more) MessageHandler objects that
            are attached to this object.
            
            Default, nothing is done in this method. Override if needed.
            </summary>
            <param name="dicomMessage">The received N-DELETE-RSP message.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.AfterHandlingNEventReportRequest(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            This method is called after a N-EVENT-REPORT-RQ message has been received and has 
            (possibly) been handled by the (zero or more) MessageHandler objects that
            are attached to this object.
            
            Default, nothing is done in this method. Override if needed.
            </summary>
            <param name="dicomMessage">The received N-EVENT-REPORT-RQ message.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.AfterHandlingNEventReportResponse(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            This method is called after a N-EVENT-REPORT-RSP message has been received and has 
            (possibly) been handled by the (zero or more) MessageHandler objects that
            are attached to this object.
            
            Default, nothing is done in this method. Override if needed.
            </summary>
            <param name="dicomMessage">The received N-EVENT-REPORT-RSP message.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.AfterHandlingHandleNGetRequest(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            This method is called after a N-GET-RQ message has been received and has 
            (possibly) been handled by the (zero or more) MessageHandler objects that
            are attached to this object.
            
            Default, nothing is done in this method. Override if needed.
            </summary>
            <param name="dicomMessage">The received N-GET-RQ message.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.AfterHandlingHandleNGetResponse(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            This method is called after a N-GET-RSP message has been received and has 
            (possibly) been handled by the (zero or more) MessageHandler objects that
            are attached to this object.
            
            Default, nothing is done in this method. Override if needed.
            </summary>
            <param name="dicomMessage">The received N-GET-RSP message.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.AfterHandlingNSetRequest(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            This method is called after a N-SET-RQ message has been received and has 
            (possibly) been handled by the (zero or more) MessageHandler objects that
            are attached to this object.
            
            Default, nothing is done in this method. Override if needed.
            </summary>
            <param name="dicomMessage">The received N-SET-RQ message.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.AfterHandlingNSetResponse(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            This method is called after a N-SET-RSP message has been received and has 
            (possibly) been handled by the (zero or more) MessageHandler objects that
            are attached to this object.
            
            Default, nothing is done in this method. Override if needed.
            </summary>
            <param name="dicomMessage">The received N-SET-RSP message.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.AfterHandlingReleaseRequest(DvtkHighLevelInterface.Dicom.Messages.ReleaseRq)">
            <summary>
            This method is called after an A-RELEASE-RQ has been received and has 
            (possibly) been handled by the (zero or more) MessageHandler objects that
            are attached to this object.
            
            Default, nothing is done in this method. Override if needed.
            </summary>
            <param name="releaseRq">The received A-RELEASE-RQ.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.AfterHandlingReleaseResponse(DvtkHighLevelInterface.Dicom.Messages.ReleaseRp)">
            <summary>
            This method is called after an A-RELEASE-RP has been received and has 
            (possibly) been handled by the (zero or more) MessageHandler objects that
            are attached to this object.
            
            Default, nothing is done in this method. Override if needed.
            </summary>
            <param name="releaseRp">The received A-RELEASE-RP.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.BeforeHandlingAbort(DvtkHighLevelInterface.Dicom.Messages.Abort)">
            <summary>
            This method is called after an A-ABORT has been received but before it
            (possibly) will be handled by the (zero or more) MessageHandler objects that
            are attached to this object.
            
            Default, nothing is done in this method. Override if needed.
            </summary>
            <param name="abort">The received A-ABORT.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.BeforeHandlingAssociateAccept(DvtkHighLevelInterface.Dicom.Messages.AssociateAc)">
            <summary>
            This method is called after an A-ASSOCIATE-AC has been received but before it
            (possibly) will be handled by the (zero or more) MessageHandler objects that
            are attached to this object.
            
            Default, nothing is done in this method. Override if needed.
            </summary>
            <param name="associateAc">The received A-ASSOCIATE-AC</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.BeforeHandlingAssociateReject(DvtkHighLevelInterface.Dicom.Messages.AssociateRj)">
            <summary>
            This method is called after an A-ASSOCIATE-RJ has been received but before it
            (possibly) will be handled by the (zero or more) MessageHandler objects that
            are attached to this object.
            
            Default, nothing is done in this method. Override if needed.
            </summary>
            <param name="associateRj">The received A-ASSOCIATE-RJ</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.BeforeHandlingAssociateRequest(DvtkHighLevelInterface.Dicom.Messages.AssociateRq)">
            <summary>
            This method is called after an A-ASSOCIATE-RQ has been received but before it
            (possibly) will be handled by the (zero or more) MessageHandler objects that
            are attached to this object.
            
            Default, nothing is done in this method. Override if needed.
            </summary>
            <param name="associateRq">The received A-ASSOCIATE-RQ</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.BeforeHandlingCCancelRequest(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            This method is called after a C-CANCEL-RQ message has been received but before it
            (possibly) will be handled by the (zero or more) MessageHandler objects that
            are attached to this object.
            
            Default, nothing is done in this method. Override if needed.
            </summary>
            <param name="dicomMessage">The received C-CANCEL-RQ message.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.BeforeHandlingCEchoRequest(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            This method is called after a C-ECHO-RQ message has been received but before it
            (possibly) will be handled by the (zero or more) MessageHandler objects that
            are attached to this object.
            
            Default, nothing is done in this method. Override if needed.
            </summary>
            <param name="dicomMessage">The received C-ECHO-RQ message.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.BeforeHandlingCEchoResponse(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            This method is called after a C-ECHO-RSP message has been received but before it
            (possibly) will be handled by the (zero or more) MessageHandler objects that
            are attached to this object.
            
            Default, nothing is done in this method. Override if needed.
            </summary>
            <param name="dicomMessage">The received C-ECHO-RSP message.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.BeforeHandlingCFindRequest(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            This method is called after a C-FIND-RQ message has been received but before it
            (possibly) will be handled by the (zero or more) MessageHandler objects that
            are attached to this object.
            
            Default, nothing is done in this method. Override if needed.
            </summary>
            <param name="dicomMessage">The received C-FIND-RQ message.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.BeforeHandlingCFindResponse(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            This method is called after a C-FIND-RSP message has been received but before it
            (possibly) will be handled by the (zero or more) MessageHandler objects that
            are attached to this object.
            
            Default, nothing is done in this method. Override if needed.
            </summary>
            <param name="dicomMessage">The received C-FIND-RSP message.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.BeforeHandlingCGetRequest(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            This method is called after a C-GET-RQ message has been received but before it
            (possibly) will be handled by the (zero or more) MessageHandler objects that
            are attached to this object.
            
            Default, nothing is done in this method. Override if needed.
            </summary>
            <param name="dicomMessage">The received C-GET-RQ message.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.BeforeHandlingCGetResponse(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            This method is called after a C-GET-RSP message has been received but before it
            (possibly) will be handled by the (zero or more) MessageHandler objects that
            are attached to this object.
            
            Default, nothing is done in this method. Override if needed.
            </summary>
            <param name="dicomMessage">The received C-GET-RSP message.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.BeforeHandlingCMoveRequest(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            This method is called after a C-MOVE-RQ message has been received but before it
            (possibly) will be handled by the (zero or more) MessageHandler objects that
            are attached to this object.
            
            Default, nothing is done in this method. Override if needed.
            </summary>
            <param name="dicomMessage">The received C-MOVE-RQ message.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.BeforeHandlingCMoveResponse(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            This method is called after a C-MOVE-RSP message has been received but before it
            (possibly) will be handled by the (zero or more) MessageHandler objects that
            are attached to this object.
            
            Default, nothing is done in this method. Override if needed.
            </summary>
            <param name="dicomMessage">The received C-MOVE-RSP message.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.BeforeHandlingCStoreRequest(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            This method is called after a C-STORE-RQ message has been received but before it
            (possibly) will be handled by the (zero or more) MessageHandler objects that
            are attached to this object.
            
            Default, nothing is done in this method. Override if needed.
            </summary>
            <param name="dicomMessage">The received C-STORE-RQ message.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.BeforeHandlingCStoreResponse(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            This method is called after a C-STORE-RSP message has been received but before it
            (possibly) will be handled by the (zero or more) MessageHandler objects that
            are attached to this object.
            
            Default, nothing is done in this method. Override if needed.
            </summary>
            <param name="dicomMessage">The received C-STORE-RSP message.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.BeforeHandlingDicomMessage(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            This method is called after a Dicom message has been received but before it
            (possibly) will be handled by the (zero or more) MessageHandler objects that
            are attached to this object.
            </summary>
            <param name="dicomMessage">The received Dicom message.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.BeforeHandlingDulMessage(DvtkHighLevelInterface.Dicom.Messages.DulMessage)">
            <summary>
            This method is called after a DulMessage has been received but before it
            (possibly) will be handled by the (zero or more) MessageHandler objects that
            are attached to this object.
            </summary>
            <param name="dulMessage">The received DulMessage.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.BeforeHandlingMessage(DvtkHighLevelInterface.Dicom.Messages.DicomProtocolMessage)">
            <summary>
            This method is called after a Message has been received but before it
            (possibly) will be handled by the (zero or more) MessageHandler objects that
            are attached to this object.
            </summary>
            <param name="message">The received message.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.BeforeHandlingNActionRequest(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            This method is called after a N-ACTION-RQ message has been received but before it
            (possibly) will be handled by the (zero or more) MessageHandler objects that
            are attached to this object.
            
            Default, nothing is done in this method. Override if needed.
            </summary>
            <param name="dicomMessage">The received N-ACTION-RQ message.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.BeforeHandlingNActionResponse(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            This method is called after a N-ACTION-RSP message has been received but before it
            (possibly) will be handled by the (zero or more) MessageHandler objects that
            are attached to this object.
            
            Default, nothing is done in this method. Override if needed.
            </summary>
            <param name="dicomMessage">The received N-ACTION-RSP message.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.BeforeHandlingNCreateRequest(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            This method is called after a N-CREATE-RQ message has been received but before it
            (possibly) will be handled by the (zero or more) MessageHandler objects that
            are attached to this object.
            
            Default, nothing is done in this method. Override if needed.
            </summary>
            <param name="dicomMessage">The received N-CREATE-RQ message.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.BeforeHandlingNCreateResponse(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            This method is called after a N-CREATE-RSP message has been received but before it
            (possibly) will be handled by the (zero or more) MessageHandler objects that
            are attached to this object.
            
            Default, nothing is done in this method. Override if needed.
            </summary>
            <param name="dicomMessage">The received N-CREATE-RSP message.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.BeforeHandlingNDeleteRequest(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            This method is called after a N-DELETE-RQ message has been received but before it
            (possibly) will be handled by the (zero or more) MessageHandler objects that
            are attached to this object.
            
            Default, nothing is done in this method. Override if needed.
            </summary>
            <param name="dicomMessage">The received N-DELETE-RQ message.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.BeforeHandlingNDeleteResponse(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            This method is called after a N-DELETE-RSP message has been received but before it
            (possibly) will be handled by the (zero or more) MessageHandler objects that
            are attached to this object.
            
            Default, nothing is done in this method. Override if needed.
            </summary>
            <param name="dicomMessage">The received N-DELETE-RSP message.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.BeforeHandlingNEventReportRequest(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            This method is called after a N-EVENT-REPORT-RQ message has been received but before it
            (possibly) will be handled by the (zero or more) MessageHandler objects that
            are attached to this object.
            
            Default, nothing is done in this method. Override if needed.
            </summary>
            <param name="dicomMessage">The received N-EVENT-REPORT-RQ message.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.BeforeHandlingNEventReportResponse(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            This method is called after a N-EVENT-REPORT-RSP message has been received but before it
            (possibly) will be handled by the (zero or more) MessageHandler objects that
            are attached to this object.
            
            Default, nothing is done in this method. Override if needed.
            </summary>
            <param name="dicomMessage">The received N-EVENT-REPORT-RSP message.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.BeforeHandlingHandleNGetRequest(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            This method is called after a N-GET-RQ message has been received but before it
            (possibly) will be handled by the (zero or more) MessageHandler objects that
            are attached to this object.
            
            Default, nothing is done in this method. Override if needed.
            </summary>
            <param name="dicomMessage">The received N-GET-RQ message.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.BeforeHandlingHandleNGetResponse(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            This method is called after a N-GET-RSP message has been received but before it
            (possibly) will be handled by the (zero or more) MessageHandler objects that
            are attached to this object.
            
            Default, nothing is done in this method. Override if needed.
            </summary>
            <param name="dicomMessage">The received N-GET-RSP message.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.BeforeHandlingNSetRequest(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            This method is called after a N-SET-RQ message has been received but before it
            (possibly) will be handled by the (zero or more) MessageHandler objects that
            are attached to this object.
            
            Default, nothing is done in this method. Override if needed.
            </summary>
            <param name="dicomMessage">The received N-SET-RQ message.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.BeforeHandlingNSetResponse(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            This method is called after a N-SET-RSP message has been received but before it
            (possibly) will be handled by the (zero or more) MessageHandler objects that
            are attached to this object.
            
            Default, nothing is done in this method. Override if needed.
            </summary>
            <param name="dicomMessage">The received N-SET-RSP message.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.BeforeHandlingReleaseRequest(DvtkHighLevelInterface.Dicom.Messages.ReleaseRq)">
            <summary>
            This method is called after an A-RELEASE-RQ has been received but before it
            (possibly) will be handled by the (zero or more) MessageHandler objects that
            are attached to this object.
            
            Default, nothing is done in this method. Override if needed.
            </summary>
            <param name="releaseRq">The received A-RELEASE-RQ.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.BeforeHandlingReleaseResponse(DvtkHighLevelInterface.Dicom.Messages.ReleaseRp)">
            <summary>
            This method is called after an A-RELEASE-RP has been received but before it
            (possibly) will be handled by the (zero or more) MessageHandler objects that
            are attached to this object.
            
            Default, nothing is done in this method. Override if needed.
            </summary>
            <param name="releaseRp">The received A-RELEASE-RP.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.Execute">
            <summary>
            Implements the loop that loops through the received messages and tries to
            handle them with the implementation of a descendant of this class and
            attached MessageHandlers.
            
            This method will be executed in a seperate thread when the Start method is called on
            an instance of this class.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.InitialAction">
            <summary>
            An descendant of this class may override this method to perform some extra
            actions before the main loop is entered.
            
            A reason for putting code in this place instead of the constructor is that all Write... methods
            work (if results are gathered).
            
            Default, nothing is done in this method.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Threads.MessageIterator.IsMessageHandled">
            <summary>
            Indicates if the last received message has already been handled by this
            object or by its attached MessageHandlers. If a descendant of this class overrides
            an AfterHandling... or BeforeHandling... method and handles the received Message, it
            should set this property to true.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Dicom.Threads.MessageHandler">
            <summary>
            A descendant of this class is used in combination with a MessageIterator
            to handle specific Messages that are received by the MessageIterator. An
            instance of this class will typically implement sending one or more messages
            as a reaction on specific received message. This class should normally not
            be concerned with control of flow e.g. like accepting/rejecting an association.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.dicomThread">
            <summary>
            See property DicomThread.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.HandleAbort(DvtkHighLevelInterface.Dicom.Messages.Abort)">
            <summary>
            Override this method to handle an A-ABORT.
            </summary>
            <param name="abort">The received A-ABORT.</param>
            <returns>Return true when this methods has handled the received A-ABORT, otherwise false.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.HandleAssociateAccept(DvtkHighLevelInterface.Dicom.Messages.AssociateAc)">
            <summary>
            Override this method to handle an A-ASSOCIATE-AC.
            </summary>
            <param name="associateAc">The received A-ASSOCIATE-AC.</param>
            <returns>Return true when this methods has handled the received A-ASSOCIATE-AC, otherwise false.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.HandleAssociateReject(DvtkHighLevelInterface.Dicom.Messages.AssociateRj)">
            <summary>
            Override this method to handle an A-ASSOCIATE-RJ.
            </summary>
            <param name="associateRj">The received A-ASSOCIATE-RJ.</param>
            <returns>Return true when this methods has handled the received A-ASSOCIATE-RJ, otherwise false.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.HandleAssociateRequest(DvtkHighLevelInterface.Dicom.Messages.AssociateRq)">
            <summary>
            Override this method to handle an A-ASSOCIATE-RQ.
            </summary>
            <param name="associateRq">The received A-ASSOCIATE-RQ.</param>
            <returns>Return true when this methods has handled the received A-ASSOCIATE-RQ, otherwise false.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.HandleCCancelRequest(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            Override this method to handle a C-CANCEL-RQ message.
            </summary>
            <param name="dicomMessage">The received C-CANCEL-RQ message.</param>
            <returns>Return true when this methods has handled the received C-CANCEL-RQ message , otherwise false.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.HandleCEchoRequest(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            Override this method to handle a C-ECHO-RQ message.
            </summary>
            <param name="dicomMessage">The received C-ECHO-RQ message.</param>
            <returns>Return true when this methods has handled the received C-ECHO-RQ message , otherwise false.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.HandleCEchoResponse(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            Override this method to handle a C-ECHO-RSP message.
            </summary>
            <param name="dicomMessage">The received C-ECHO-RSP message.</param>
            <returns>Return true when this methods has handled the received C-ECHO-RSP message , otherwise false.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.HandleCFindRequest(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            Override this method to handle a C-FIND-RQ message.
            </summary>
            <param name="dicomMessage">The received C-FIND-RQ message.</param>
            <returns>Return true when this methods has handled the received C-FIND-RQ message , otherwise false.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.HandleCFindResponse(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            Override this method to handle a C-FIND-RSP message.
            </summary>
            <param name="dicomMessage">The received C-FIND-RSP message.</param>
            <returns>Return true when this methods has handled the received C-FIND-RSP message , otherwise false.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.HandleCGetRequest(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            Override this method to handle a C-GET-RQ message.
            </summary>
            <param name="dicomMessage">The received C-GET-RQ message.</param>
            <returns>Return true when this methods has handled the received C-GET-RQ message , otherwise false.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.HandleCGetResponse(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            Override this method to handle a C-GET-RSP message.
            </summary>
            <param name="dicomMessage">The received C-GET-RSP message.</param>
            <returns>Return true when this methods has handled the received C-GET-RSP message , otherwise false.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.HandleCMoveRequest(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            Override this method to handle a C-MOVE-RQ message.
            </summary>
            <param name="dicomMessage">The received C-MOVE-RQ message.</param>
            <returns>Return true when this methods has handled the received C-MOVE-RQ message , otherwise false.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.HandleCMoveResponse(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            Override this method to handle a C-MOVE-RSP message.
            </summary>
            <param name="dicomMessage">The received C-MOVE-RSP message.</param>
            <returns>Return true when this methods has handled the received C-MOVE-RSP message , otherwise false.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.HandleCStoreRequest(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            Override this method to handle a C-STORE-RQ message.
            </summary>
            <param name="dicomMessage">The received C-STORE-RQ message.</param>
            <returns>Return true when this methods has handled the received C-STORE-RQ message , otherwise false.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.HandleCStoreResponse(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            Override this method to handle a C-STORE-RSP message.
            </summary>
            <param name="dicomMessage">The received C-STORE-RSP message.</param>
            <returns>Return true when this methods has handled the received C-STORE-RSP message , otherwise false.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.HandleDicomMessage(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            This method is indirectly called by a MessageIterator to let this object try
            to handle the received DicomMessage.
            </summary>
            <param name="dicomMessage">The received DicomMessage.</param>
            <returns>Returns true if this object has handled the DicomMessage, otherwise false.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.HandleDulMessage(DvtkHighLevelInterface.Dicom.Messages.DulMessage)">
            <summary>
            This method is indirectly called by a MessageIterator to let this object try
            to handle the received DulMessage.
            </summary>
            <param name="dulMessage">The received DulMessage.</param>
            <returns>Returns true if this object has handled the DulMessage, otherwise false.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.HandleMessage(DvtkHighLevelInterface.Dicom.Messages.DicomProtocolMessage)">
            <summary>
            This method is called by a MessageIterator to let this object try
            to handle the received message.
            </summary>
            <param name="message">The received message.</param>
            <returns>Returns true if this object has handled the message, otherwise false.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.HandleNActionRequest(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            Override this method to handle a N-ACTION-RQ message.
            </summary>
            <param name="dicomMessage">The received N-ACTION-RQ message.</param>
            <returns>Return true when this methods has handled the received N-ACTION-RQ message , otherwise false.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.HandleNActionResponse(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            Override this method to handle a N-ACTION-RSP message.
            </summary>
            <param name="dicomMessage">The received N-ACTION-RSP message.</param>
            <returns>Return true when this methods has handled the received N-ACTION-RSP message , otherwise false.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.HandleNCreateRequest(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            Override this method to handle a N-CREATE-RQ message.
            </summary>
            <param name="dicomMessage">The received N-CREATE-RQ message.</param>
            <returns>Return true when this methods has handled the received N-CREATE-RQ message , otherwise false.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.HandleNCreateResponse(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            Override this method to handle a N-CREATE-RSP message.
            </summary>
            <param name="dicomMessage">The received N-CREATE-RSP message.</param>
            <returns>Return true when this methods has handled the received N-CREATE-RSP message , otherwise false.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.HandleNDeleteRequest(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            Override this method to handle a N-DELETE-RQ message.
            </summary>
            <param name="dicomMessage">The received N-DELETE-RQ message.</param>
            <returns>Return true when this methods has handled the received N-DELETE-RQ message , otherwise false.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.HandleNDeleteResponse(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            Override this method to handle a N-DELETE-RSP message.
            </summary>
            <param name="dicomMessage">The received N-DELETE-RSP message.</param>
            <returns>Return true when this methods has handled the received N-DELETE-RSP message , otherwise false.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.HandleNEventReportRequest(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            Override this method to handle a N-EVENT-REPORT-RQ message.
            </summary>
            <param name="dicomMessage">The received N-EVENT-REPORT-RQ message.</param>
            <returns>Return true when this methods has handled the received N-EVENT-REPORT-RQ message , otherwise false.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.HandleNEventReportResponse(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            Override this method to handle a N-EVENT-REPORT-RSP message.
            </summary>
            <param name="dicomMessage">The received N-EVENT-REPORT-RSP message.</param>
            <returns>Return true when this methods has handled the received N-EVENT-REPORT-RSP message , otherwise false.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.HandleNGetRequest(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            Override this method to handle a N-GET-RQ message.
            </summary>
            <param name="dicomMessage">The received N-GET-RQ message.</param>
            <returns>Return true when this methods has handled the received N-GET-RQ message , otherwise false.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.HandleNGetResponse(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            Override this method to handle a N-GET-RSP message.
            </summary>
            <param name="dicomMessage">The received N-GET-RSP message.</param>
            <returns>Return true when this methods has handled the received N-GET-RSP message , otherwise false.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.HandleNSetRequest(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            Override this method to handle a N-SET-RQ message.
            </summary>
            <param name="dicomMessage">The received N-SET-RQ message.</param>
            <returns>Return true when this methods has handled the received N-SET-RQ message , otherwise false.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.HandleNSetResponse(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            Override this method to handle a N-SET-RSP message.
            </summary>
            <param name="dicomMessage">The received N-SET-RSP message.</param>
            <returns>Return true when this methods has handled the received N-SET-RSP message , otherwise false.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.HandleReleaseRequest(DvtkHighLevelInterface.Dicom.Messages.ReleaseRq)">
            <summary>
            Override this method to handle an A-RELEASE-RQ.
            </summary>
            <param name="releaseRq">The received A-RELEASE-RQ.</param>
            <returns>Return true when this methods has handled the received A-RELEASE-RQ, otherwise false.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.HandleReleaseResponse(DvtkHighLevelInterface.Dicom.Messages.ReleaseRp)">
            <summary>
            Override this method to handle an A-RELEASE-RP.
            </summary>
            <param name="releaseRp">The received A-RELEASE-RP.</param>
            <returns>Return true when this methods has handled the received A-RELEASE-RP, otherwise false.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.ReceiveAssociateRj">
            <summary>
            Receives an A-ASSOCIATE-RJ
            </summary>
            <returns>The received A-ASSOCIATE-RJ</returns>
            <exception cref="T:System.Exception">
            Receiving of a message fails or the received message is not an A-ASSOCIATE-RJ.
            </exception> 
            <example>
            	<b>VB.NET</b>
            	<code>
            			<Example name="IncludesDicomThreadScu">
Imports System
Imports System.IO
Imports System.Windows.Forms
Imports DvtkData.Dimse.VR
Imports DvtkData.Dimse.DimseCommand
Imports DvtkHighLevelInterface
Imports DvtkHighLevelInterface.Dicom.Messages
Imports DvtkHighLevelInterface.Common.UserInterfaces
Imports DvtkHighLevelInterface.Dicom.Threads
</Example>
            			<Example name="DicomThreadScu">
Class DicomThreadScu
    Inherits DicomThread

    Protected Overrides Sub Execute()

        'Sending an association request
        SendAssociateRq _
        ( _
            New DvtkHighLevelInterface.Dicom.Other.PresentationContext("1.2.840.10008.5.1.4.1.1.2", "1.2.840.10008.1.2", "1.2.840.10008.1.2.1") _
        )


        'Receive the associate Ackknowledge 
        'Alternatively you could use ReceiveAssociateAc() method which will throw a 
        'HLIException if the received message is not an associate Ackknowledge
        Dim receivedMessage As DvtkHighLevelInterface.Dicom.Messages.DicomProtocolMessage = Nothing
        receivedMessage = ReceiveMessage()
        'Check wether the received response is indeed an associate ackknowledge
        If Not receivedMessage.IsAssociateAc Then
            If receivedMessage.IsAssociateRj Then
                Throw New System.Exception("Association Rejected.")
            ElseIf receivedMessage.IsAbort Then
                Throw New System.Exception("Abort Message.")
            Else
                'No idea what kind of message was sent back.
                Throw New System.Exception("Received unknown message.")
            End If
        End If


        'Sending a Message
        'We create a DicomMessage configured for C-Store Requests
        Dim aCTStoreRQMessage As DvtkHighLevelInterface.Dicom.Messages.DicomMessage = New DicomMessage(CSTORERQ)
        'Check the AttributeSet.read for documentation on reading files to handle exceptions
        aCTStoreRQMessage.DataSet.Read(ScriptContext._CTImageFullFileName)
        Try
            Send(aCTStoreRQMessage)
        Catch ex As DvtkHighLevelInterface.Common.Other.HliException
            'Error while sending. Handle as you please. 
            'ex.Message.ToString()
        End Try


        'The CStore Response
        Dim aCStoreRSPMessage As DvtkHighLevelInterface.Dicom.Messages.DicomMessage
        aCStoreRSPMessage = ReceiveDicomMessage()
        'make sure it really is a CSTORE Response
        If Not aCStoreRSPMessage.CommandSet.DimseCommand = DvtkData.Dimse.DimseCommand.CSTORERSP Then
            Throw New System.Exception("After a CSTORE Request the SCP returned an unexpected message.")
        End If


        'send a release request
        Try
            SendReleaseRq()
        Catch ex As DvtkHighLevelInterface.Common.Other.HliException
            'You error message. Handle as you please. 
            'ex.Message.ToString()
        End Try


        Dim aReleaseResponseMessage As DvtkHighLevelInterface.Dicom.Messages.ReleaseRp
        'receive the release response
        Try
            aReleaseResponseMessage = ReceiveReleaseRp()
        Catch ex As DvtkHighLevelInterface.Common.Other.HliException
            'You error message. Handle as you please. 
            'ex.Message.ToString()
        End Try

    End Sub

End Class
</Example>
            			<Example name="Main">
Class MainDicomThread
    Inherits DicomThreadScu

End Class 

Class ScriptContext

    ' Full session file name, only needed when not executing script under Dvt(Cmd).
    Public Const _SessionFullFileName As String = "C:\Program Files\DVT\example\scripts\storage\scu\Storage_SCU.ses"
    Public Const _CTImageFullFileName As String = "c:\YourCTImageFile.dcm"

End Class ' ScriptContext

Module DvtkScript

    Sub Main(ByVal CmdArgs() As String)

        Dim theExecutablePath As String = System.Windows.Forms.Application.ExecutablePath
        Dim theExecutableName As String = Path.GetFileName(theExecutablePath).ToLower()

        Dvtk.Setup.Initialize()

        Dim theDvtThreadManager As DvtkHighLevelInterface.Common.Threads.ThreadManager = New DvtkHighLevelInterface.Common.Threads.ThreadManager

        Dim theMainDicomThread As MainDicomThread = New MainDicomThread
        theMainDicomThread.Initialize(theDvtThreadManager)


        theMainDicomThread.Options.LoadFromFile(ScriptContext._SessionFullFileName)
        theMainDicomThread.Options.Identifier = "MainDicomThread"

        Dim theHliForm As HliForm = New HliForm
        theHliForm.AutoExit = False
        theHliForm.Attach(theMainDicomThread)

        theMainDicomThread.Start()

        theHliForm.WaitUntilClosed()

        Dvtk.Setup.Terminate()

    End Sub
</Example>		
            	</code>
            </example>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.ReceiveAssociateRp">
            <summary>
            Receives an A-ASSOCIATE-AC or A-ASSOCIATE-RJ.
            </summary>
            <returns>The received A-ASSOCIATE-AC or A-ASSOCIATE-RJ.</returns>
            <exception cref="T:System.Exception">
            Receiving of a message fails or the received message is not an A-ASSOCIATE-AC or A-ASSOCIATE-RJ.
            </exception> 
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.ReceiveAssociateRq">
            <summary>
            Receives a A-ASSOCIATE-RQ.
            </summary>
            <returns>The received A-ASSOCIATE-RQ.</returns>
            <exception cref="T:System.Exception">
            Receiving of a message fails or the received message is not an A-ASSOCIATE-RQ.
            </exception> 
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.ReceiveDicomMessage">
            <summary>
            Receives a Dicom Message.
            </summary>
            <returns>The received Dicom Message.</returns>
            <exception cref="T:System.Exception">
            Receiving of a message fails or the received message is not a Dicom message.
            </exception> 
            <example>
            	<b>VB.NET</b>
            	<code>
            			<Example name="IncludesDicomThreadScu">
Imports System
Imports System.IO
Imports System.Windows.Forms
Imports DvtkData.Dimse.VR
Imports DvtkData.Dimse.DimseCommand
Imports DvtkHighLevelInterface
Imports DvtkHighLevelInterface.Dicom.Messages
Imports DvtkHighLevelInterface.Common.UserInterfaces
Imports DvtkHighLevelInterface.Dicom.Threads
</Example>
            			<Example name="DicomThreadScu">
Class DicomThreadScu
    Inherits DicomThread

    Protected Overrides Sub Execute()

        'Sending an association request
        SendAssociateRq _
        ( _
            New DvtkHighLevelInterface.Dicom.Other.PresentationContext("1.2.840.10008.5.1.4.1.1.2", "1.2.840.10008.1.2", "1.2.840.10008.1.2.1") _
        )


        'Receive the associate Ackknowledge 
        'Alternatively you could use ReceiveAssociateAc() method which will throw a 
        'HLIException if the received message is not an associate Ackknowledge
        Dim receivedMessage As DvtkHighLevelInterface.Dicom.Messages.DicomProtocolMessage = Nothing
        receivedMessage = ReceiveMessage()
        'Check wether the received response is indeed an associate ackknowledge
        If Not receivedMessage.IsAssociateAc Then
            If receivedMessage.IsAssociateRj Then
                Throw New System.Exception("Association Rejected.")
            ElseIf receivedMessage.IsAbort Then
                Throw New System.Exception("Abort Message.")
            Else
                'No idea what kind of message was sent back.
                Throw New System.Exception("Received unknown message.")
            End If
        End If


        'Sending a Message
        'We create a DicomMessage configured for C-Store Requests
        Dim aCTStoreRQMessage As DvtkHighLevelInterface.Dicom.Messages.DicomMessage = New DicomMessage(CSTORERQ)
        'Check the AttributeSet.read for documentation on reading files to handle exceptions
        aCTStoreRQMessage.DataSet.Read(ScriptContext._CTImageFullFileName)
        Try
            Send(aCTStoreRQMessage)
        Catch ex As DvtkHighLevelInterface.Common.Other.HliException
            'Error while sending. Handle as you please. 
            'ex.Message.ToString()
        End Try


        'The CStore Response
        Dim aCStoreRSPMessage As DvtkHighLevelInterface.Dicom.Messages.DicomMessage
        aCStoreRSPMessage = ReceiveDicomMessage()
        'make sure it really is a CSTORE Response
        If Not aCStoreRSPMessage.CommandSet.DimseCommand = DvtkData.Dimse.DimseCommand.CSTORERSP Then
            Throw New System.Exception("After a CSTORE Request the SCP returned an unexpected message.")
        End If


        'send a release request
        Try
            SendReleaseRq()
        Catch ex As DvtkHighLevelInterface.Common.Other.HliException
            'You error message. Handle as you please. 
            'ex.Message.ToString()
        End Try


        Dim aReleaseResponseMessage As DvtkHighLevelInterface.Dicom.Messages.ReleaseRp
        'receive the release response
        Try
            aReleaseResponseMessage = ReceiveReleaseRp()
        Catch ex As DvtkHighLevelInterface.Common.Other.HliException
            'You error message. Handle as you please. 
            'ex.Message.ToString()
        End Try

    End Sub

End Class
</Example>
            			<Example name="Main">
Class MainDicomThread
    Inherits DicomThreadScu

End Class 

Class ScriptContext

    ' Full session file name, only needed when not executing script under Dvt(Cmd).
    Public Const _SessionFullFileName As String = "C:\Program Files\DVT\example\scripts\storage\scu\Storage_SCU.ses"
    Public Const _CTImageFullFileName As String = "c:\YourCTImageFile.dcm"

End Class ' ScriptContext

Module DvtkScript

    Sub Main(ByVal CmdArgs() As String)

        Dim theExecutablePath As String = System.Windows.Forms.Application.ExecutablePath
        Dim theExecutableName As String = Path.GetFileName(theExecutablePath).ToLower()

        Dvtk.Setup.Initialize()

        Dim theDvtThreadManager As DvtkHighLevelInterface.Common.Threads.ThreadManager = New DvtkHighLevelInterface.Common.Threads.ThreadManager

        Dim theMainDicomThread As MainDicomThread = New MainDicomThread
        theMainDicomThread.Initialize(theDvtThreadManager)


        theMainDicomThread.Options.LoadFromFile(ScriptContext._SessionFullFileName)
        theMainDicomThread.Options.Identifier = "MainDicomThread"

        Dim theHliForm As HliForm = New HliForm
        theHliForm.AutoExit = False
        theHliForm.Attach(theMainDicomThread)

        theMainDicomThread.Start()

        theHliForm.WaitUntilClosed()

        Dvtk.Setup.Terminate()

    End Sub
</Example>		
            	</code>
            </example>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.ReceiveMessage">
            <summary>
            Receives a messages (can be a Dicom or Dul message).
            </summary>
            <returns>The received message.</returns>
            <exception cref="T:System.Exception">
            Receiving of a message fails.
            </exception> 
            <example>
            	<b>VB.NET</b>
            	<code>
            			<Example name="IncludesDicomThreadScu">
Imports System
Imports System.IO
Imports System.Windows.Forms
Imports DvtkData.Dimse.VR
Imports DvtkData.Dimse.DimseCommand
Imports DvtkHighLevelInterface
Imports DvtkHighLevelInterface.Dicom.Messages
Imports DvtkHighLevelInterface.Common.UserInterfaces
Imports DvtkHighLevelInterface.Dicom.Threads
</Example>
            			<Example name="DicomThreadScu">
Class DicomThreadScu
    Inherits DicomThread

    Protected Overrides Sub Execute()

        'Sending an association request
        SendAssociateRq _
        ( _
            New DvtkHighLevelInterface.Dicom.Other.PresentationContext("1.2.840.10008.5.1.4.1.1.2", "1.2.840.10008.1.2", "1.2.840.10008.1.2.1") _
        )


        'Receive the associate Ackknowledge 
        'Alternatively you could use ReceiveAssociateAc() method which will throw a 
        'HLIException if the received message is not an associate Ackknowledge
        Dim receivedMessage As DvtkHighLevelInterface.Dicom.Messages.DicomProtocolMessage = Nothing
        receivedMessage = ReceiveMessage()
        'Check wether the received response is indeed an associate ackknowledge
        If Not receivedMessage.IsAssociateAc Then
            If receivedMessage.IsAssociateRj Then
                Throw New System.Exception("Association Rejected.")
            ElseIf receivedMessage.IsAbort Then
                Throw New System.Exception("Abort Message.")
            Else
                'No idea what kind of message was sent back.
                Throw New System.Exception("Received unknown message.")
            End If
        End If


        'Sending a Message
        'We create a DicomMessage configured for C-Store Requests
        Dim aCTStoreRQMessage As DvtkHighLevelInterface.Dicom.Messages.DicomMessage = New DicomMessage(CSTORERQ)
        'Check the AttributeSet.read for documentation on reading files to handle exceptions
        aCTStoreRQMessage.DataSet.Read(ScriptContext._CTImageFullFileName)
        Try
            Send(aCTStoreRQMessage)
        Catch ex As DvtkHighLevelInterface.Common.Other.HliException
            'Error while sending. Handle as you please. 
            'ex.Message.ToString()
        End Try


        'The CStore Response
        Dim aCStoreRSPMessage As DvtkHighLevelInterface.Dicom.Messages.DicomMessage
        aCStoreRSPMessage = ReceiveDicomMessage()
        'make sure it really is a CSTORE Response
        If Not aCStoreRSPMessage.CommandSet.DimseCommand = DvtkData.Dimse.DimseCommand.CSTORERSP Then
            Throw New System.Exception("After a CSTORE Request the SCP returned an unexpected message.")
        End If


        'send a release request
        Try
            SendReleaseRq()
        Catch ex As DvtkHighLevelInterface.Common.Other.HliException
            'You error message. Handle as you please. 
            'ex.Message.ToString()
        End Try


        Dim aReleaseResponseMessage As DvtkHighLevelInterface.Dicom.Messages.ReleaseRp
        'receive the release response
        Try
            aReleaseResponseMessage = ReceiveReleaseRp()
        Catch ex As DvtkHighLevelInterface.Common.Other.HliException
            'You error message. Handle as you please. 
            'ex.Message.ToString()
        End Try

    End Sub

End Class
</Example>
            			<Example name="Main">
Class MainDicomThread
    Inherits DicomThreadScu

End Class 

Class ScriptContext

    ' Full session file name, only needed when not executing script under Dvt(Cmd).
    Public Const _SessionFullFileName As String = "C:\Program Files\DVT\example\scripts\storage\scu\Storage_SCU.ses"
    Public Const _CTImageFullFileName As String = "c:\YourCTImageFile.dcm"

End Class ' ScriptContext

Module DvtkScript

    Sub Main(ByVal CmdArgs() As String)

        Dim theExecutablePath As String = System.Windows.Forms.Application.ExecutablePath
        Dim theExecutableName As String = Path.GetFileName(theExecutablePath).ToLower()

        Dvtk.Setup.Initialize()

        Dim theDvtThreadManager As DvtkHighLevelInterface.Common.Threads.ThreadManager = New DvtkHighLevelInterface.Common.Threads.ThreadManager

        Dim theMainDicomThread As MainDicomThread = New MainDicomThread
        theMainDicomThread.Initialize(theDvtThreadManager)


        theMainDicomThread.Options.LoadFromFile(ScriptContext._SessionFullFileName)
        theMainDicomThread.Options.Identifier = "MainDicomThread"

        Dim theHliForm As HliForm = New HliForm
        theHliForm.AutoExit = False
        theHliForm.Attach(theMainDicomThread)

        theMainDicomThread.Start()

        theHliForm.WaitUntilClosed()

        Dvtk.Setup.Terminate()

    End Sub
</Example>		
            	</code>
            </example>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.ReceiveReleaseRp">
            <summary>
            Receives a A-RELEASE-RP.
            </summary>
            <returns>The received A-RELEASE-RP.</returns>
            <exception cref="T:System.Exception">
            Receiving of a message fails or the received message is not an A-RELEASE-RP.
            </exception> 
            <example>
            	<b>VB.NET</b>
            	<code>
            			<Example name="IncludesDicomThreadScu">
Imports System
Imports System.IO
Imports System.Windows.Forms
Imports DvtkData.Dimse.VR
Imports DvtkData.Dimse.DimseCommand
Imports DvtkHighLevelInterface
Imports DvtkHighLevelInterface.Dicom.Messages
Imports DvtkHighLevelInterface.Common.UserInterfaces
Imports DvtkHighLevelInterface.Dicom.Threads
</Example>
            			<Example name="DicomThreadScu">
Class DicomThreadScu
    Inherits DicomThread

    Protected Overrides Sub Execute()

        'Sending an association request
        SendAssociateRq _
        ( _
            New DvtkHighLevelInterface.Dicom.Other.PresentationContext("1.2.840.10008.5.1.4.1.1.2", "1.2.840.10008.1.2", "1.2.840.10008.1.2.1") _
        )


        'Receive the associate Ackknowledge 
        'Alternatively you could use ReceiveAssociateAc() method which will throw a 
        'HLIException if the received message is not an associate Ackknowledge
        Dim receivedMessage As DvtkHighLevelInterface.Dicom.Messages.DicomProtocolMessage = Nothing
        receivedMessage = ReceiveMessage()
        'Check wether the received response is indeed an associate ackknowledge
        If Not receivedMessage.IsAssociateAc Then
            If receivedMessage.IsAssociateRj Then
                Throw New System.Exception("Association Rejected.")
            ElseIf receivedMessage.IsAbort Then
                Throw New System.Exception("Abort Message.")
            Else
                'No idea what kind of message was sent back.
                Throw New System.Exception("Received unknown message.")
            End If
        End If


        'Sending a Message
        'We create a DicomMessage configured for C-Store Requests
        Dim aCTStoreRQMessage As DvtkHighLevelInterface.Dicom.Messages.DicomMessage = New DicomMessage(CSTORERQ)
        'Check the AttributeSet.read for documentation on reading files to handle exceptions
        aCTStoreRQMessage.DataSet.Read(ScriptContext._CTImageFullFileName)
        Try
            Send(aCTStoreRQMessage)
        Catch ex As DvtkHighLevelInterface.Common.Other.HliException
            'Error while sending. Handle as you please. 
            'ex.Message.ToString()
        End Try


        'The CStore Response
        Dim aCStoreRSPMessage As DvtkHighLevelInterface.Dicom.Messages.DicomMessage
        aCStoreRSPMessage = ReceiveDicomMessage()
        'make sure it really is a CSTORE Response
        If Not aCStoreRSPMessage.CommandSet.DimseCommand = DvtkData.Dimse.DimseCommand.CSTORERSP Then
            Throw New System.Exception("After a CSTORE Request the SCP returned an unexpected message.")
        End If


        'send a release request
        Try
            SendReleaseRq()
        Catch ex As DvtkHighLevelInterface.Common.Other.HliException
            'You error message. Handle as you please. 
            'ex.Message.ToString()
        End Try


        Dim aReleaseResponseMessage As DvtkHighLevelInterface.Dicom.Messages.ReleaseRp
        'receive the release response
        Try
            aReleaseResponseMessage = ReceiveReleaseRp()
        Catch ex As DvtkHighLevelInterface.Common.Other.HliException
            'You error message. Handle as you please. 
            'ex.Message.ToString()
        End Try

    End Sub

End Class
</Example>
            			<Example name="Main">
Class MainDicomThread
    Inherits DicomThreadScu

End Class 

Class ScriptContext

    ' Full session file name, only needed when not executing script under Dvt(Cmd).
    Public Const _SessionFullFileName As String = "C:\Program Files\DVT\example\scripts\storage\scu\Storage_SCU.ses"
    Public Const _CTImageFullFileName As String = "c:\YourCTImageFile.dcm"

End Class ' ScriptContext

Module DvtkScript

    Sub Main(ByVal CmdArgs() As String)

        Dim theExecutablePath As String = System.Windows.Forms.Application.ExecutablePath
        Dim theExecutableName As String = Path.GetFileName(theExecutablePath).ToLower()

        Dvtk.Setup.Initialize()

        Dim theDvtThreadManager As DvtkHighLevelInterface.Common.Threads.ThreadManager = New DvtkHighLevelInterface.Common.Threads.ThreadManager

        Dim theMainDicomThread As MainDicomThread = New MainDicomThread
        theMainDicomThread.Initialize(theDvtThreadManager)


        theMainDicomThread.Options.LoadFromFile(ScriptContext._SessionFullFileName)
        theMainDicomThread.Options.Identifier = "MainDicomThread"

        Dim theHliForm As HliForm = New HliForm
        theHliForm.AutoExit = False
        theHliForm.Attach(theMainDicomThread)

        theMainDicomThread.Start()

        theHliForm.WaitUntilClosed()

        Dvtk.Setup.Terminate()

    End Sub
</Example>		
            	</code>
            </example>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.ReceiveReleaseRq">
            <summary>
            Receives a A-RELEASE-RQ.
            </summary>
            <returns>The received A-RELEASE-RQ.</returns>
            <exception cref="T:System.Exception">
            Receiving of a message fails or the received message is not an A-RELEASE-RQQ.
            </exception> 
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.Send(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            Sends a Dicom Message.
            </summary>
            <param name="dicomMessage">The DicomMessage.</param>
            <exception cref="T:System.Exception">
            Sending of the DicomMessage fails.
            </exception> 
            <example>
            	<b>VB.NET</b>
            	<code>
            			<Example name="IncludesDicomThreadScu">
Imports System
Imports System.IO
Imports System.Windows.Forms
Imports DvtkData.Dimse.VR
Imports DvtkData.Dimse.DimseCommand
Imports DvtkHighLevelInterface
Imports DvtkHighLevelInterface.Dicom.Messages
Imports DvtkHighLevelInterface.Common.UserInterfaces
Imports DvtkHighLevelInterface.Dicom.Threads
</Example>
            			<Example name="DicomThreadScu">
Class DicomThreadScu
    Inherits DicomThread

    Protected Overrides Sub Execute()

        'Sending an association request
        SendAssociateRq _
        ( _
            New DvtkHighLevelInterface.Dicom.Other.PresentationContext("1.2.840.10008.5.1.4.1.1.2", "1.2.840.10008.1.2", "1.2.840.10008.1.2.1") _
        )


        'Receive the associate Ackknowledge 
        'Alternatively you could use ReceiveAssociateAc() method which will throw a 
        'HLIException if the received message is not an associate Ackknowledge
        Dim receivedMessage As DvtkHighLevelInterface.Dicom.Messages.DicomProtocolMessage = Nothing
        receivedMessage = ReceiveMessage()
        'Check wether the received response is indeed an associate ackknowledge
        If Not receivedMessage.IsAssociateAc Then
            If receivedMessage.IsAssociateRj Then
                Throw New System.Exception("Association Rejected.")
            ElseIf receivedMessage.IsAbort Then
                Throw New System.Exception("Abort Message.")
            Else
                'No idea what kind of message was sent back.
                Throw New System.Exception("Received unknown message.")
            End If
        End If


        'Sending a Message
        'We create a DicomMessage configured for C-Store Requests
        Dim aCTStoreRQMessage As DvtkHighLevelInterface.Dicom.Messages.DicomMessage = New DicomMessage(CSTORERQ)
        'Check the AttributeSet.read for documentation on reading files to handle exceptions
        aCTStoreRQMessage.DataSet.Read(ScriptContext._CTImageFullFileName)
        Try
            Send(aCTStoreRQMessage)
        Catch ex As DvtkHighLevelInterface.Common.Other.HliException
            'Error while sending. Handle as you please. 
            'ex.Message.ToString()
        End Try


        'The CStore Response
        Dim aCStoreRSPMessage As DvtkHighLevelInterface.Dicom.Messages.DicomMessage
        aCStoreRSPMessage = ReceiveDicomMessage()
        'make sure it really is a CSTORE Response
        If Not aCStoreRSPMessage.CommandSet.DimseCommand = DvtkData.Dimse.DimseCommand.CSTORERSP Then
            Throw New System.Exception("After a CSTORE Request the SCP returned an unexpected message.")
        End If


        'send a release request
        Try
            SendReleaseRq()
        Catch ex As DvtkHighLevelInterface.Common.Other.HliException
            'You error message. Handle as you please. 
            'ex.Message.ToString()
        End Try


        Dim aReleaseResponseMessage As DvtkHighLevelInterface.Dicom.Messages.ReleaseRp
        'receive the release response
        Try
            aReleaseResponseMessage = ReceiveReleaseRp()
        Catch ex As DvtkHighLevelInterface.Common.Other.HliException
            'You error message. Handle as you please. 
            'ex.Message.ToString()
        End Try

    End Sub

End Class
</Example>
            			<Example name="Main">
Class MainDicomThread
    Inherits DicomThreadScu

End Class 

Class ScriptContext

    ' Full session file name, only needed when not executing script under Dvt(Cmd).
    Public Const _SessionFullFileName As String = "C:\Program Files\DVT\example\scripts\storage\scu\Storage_SCU.ses"
    Public Const _CTImageFullFileName As String = "c:\YourCTImageFile.dcm"

End Class ' ScriptContext

Module DvtkScript

    Sub Main(ByVal CmdArgs() As String)

        Dim theExecutablePath As String = System.Windows.Forms.Application.ExecutablePath
        Dim theExecutableName As String = Path.GetFileName(theExecutablePath).ToLower()

        Dvtk.Setup.Initialize()

        Dim theDvtThreadManager As DvtkHighLevelInterface.Common.Threads.ThreadManager = New DvtkHighLevelInterface.Common.Threads.ThreadManager

        Dim theMainDicomThread As MainDicomThread = New MainDicomThread
        theMainDicomThread.Initialize(theDvtThreadManager)


        theMainDicomThread.Options.LoadFromFile(ScriptContext._SessionFullFileName)
        theMainDicomThread.Options.Identifier = "MainDicomThread"

        Dim theHliForm As HliForm = New HliForm
        theHliForm.AutoExit = False
        theHliForm.Attach(theMainDicomThread)

        theMainDicomThread.Start()

        theHliForm.WaitUntilClosed()

        Dvtk.Setup.Terminate()

    End Sub
</Example>		
            	</code>
            </example>		
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.Send(DvtkHighLevelInterface.Dicom.Messages.DicomMessage,System.Int32)">
            <summary>
            Sends a Dicom Message.
            </summary>
            <param name="dicomMessage">The DicomMessage.</param>
            <param name="presentationContextId">The ID of the presentation context to use.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.SendAbort(System.Byte,System.Byte)">
            <summary>
            Sends a Dicom A_ABORT.
            </summary>
            <param name="source">The Abort source.</param>
            <param name="reason">The Abort reason.</param>
            <returns>The sent A_ABORT.</returns>
            <exception cref="T:System.Exception">
            Sending of the A_ABORT fails.
            </exception> 
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.SendAssociateAc">
            <overloads>
            Sends an A-ASSOCIATE-AC.
            </overloads>
            <summary>
            Sends an A-ASSOCIATE-AC based on the previously received A-ASSOCIATE-RQ.
            </summary>
            <remarks>
            The following holds for the presentation contexts in the sent A-ASSOCIATE-AC:<br></br>
            - All requested presentation contexts will be accepted (have result field 0).<br></br>
            - For each requested presentation context, the first proposed transfer syntax will be used.<br></br><br></br>
            
            If an A-ASSOCIATE-RJ should be sent when none of the requested presentation contexts is accepted,
            use the SendAssociateRp method instead.	
            </remarks>
            <returns>The sent AssociateAc.</returns>
            <exception cref="T:System.Exception">
            Last received message is not an A-ASSOCIATE-RQ or no message has been received at all.
            </exception> 
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.SendAssociateAc(DvtkHighLevelInterface.Dicom.Other.PresentationContextCollection)">
            <summary>
            Sends an A-ASSOCIATE-AC based on the supplied presentation contexts.
            </summary>
            <remarks>
            Any requested presentation context that has no counterpart in the supplied presentation
            contexts will automaticaly be added to the A-ASSOCIATE-AC with the presentation context rejected.<br></br><br></br>
            
            If an A-ASSOCIATE-RJ should be sent when none of the requested presentation contexts is accepted,
            use the <see cref="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.SendAssociateRp(DvtkHighLevelInterface.Dicom.Other.PresentationContextCollection)"/> method instead.	
            </remarks>
            <param name="presentationContextCollection">The presentation contexts.</param>
            <returns>The sent AssociateAc.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.SendAssociateAc(DvtkHighLevelInterface.Dicom.Other.PresentationContext[])">
            <summary>
            Sends an A-ASSOCIATE-AC based on the supplied presentation contexts.
            </summary>
            <remarks>
            Any requested presentation context that has no counterpart in the supplied presentation
            contexts will automaticaly be added to the A-ASSOCIATE-AC with the presentation context rejected.<br></br><br></br>
            
            If an A-ASSOCIATE-RJ should be sent when none of the requested presentation contexts is accepted,
            use the <see cref="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.SendAssociateRp(DvtkHighLevelInterface.Dicom.Other.PresentationContext[])"/> method instead.	
            </remarks>
            <param name="presentationContexts">The presentation contexts.</param>
            <returns>The sent AssociateAc.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.SendAssociateAc(DvtkHighLevelInterface.Dicom.Other.SopClasses)">
            <summary>
            Sends an A-ASSOCIATE-AC based on the previously received A-ASSOCIATE-RQ.
            </summary>
            <remarks>
            The following holds for the presentation contexts in the sent A-ASSOCIATE-AC:<br></br>
            - All requested presentation contexts with an abstract syntax contained in the supplied
              SOP classes will be accepted (have result field 0). The rest will be rejected
              (have result field 3).<br></br>
            - For each accepted requested presentation context, the first proposed transfer syntax 
              will be used.<br></br><br></br>
            
            If an A-ASSOCIATE-RJ should be sent when none of the requested presentation contexts is accepted,
            use the <see cref="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.SendAssociateRp(DvtkHighLevelInterface.Dicom.Other.SopClasses)"/> method instead.	
            </remarks>
            <param name="sopClasses">The SOP Classes to accept.</param>
            <returns>The sent AssociateAc.</returns>
            <exception cref="T:System.Exception">
            Last received message is not an A-ASSOCIATE-RQ or no message has been received at all.
            </exception> 
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.SendAssociateAc(DvtkHighLevelInterface.Dicom.Other.SopClasses,DvtkHighLevelInterface.Dicom.Other.TransferSyntaxes[])">
            <summary>
            Sends an A-ASSOCIATE-AC based on the previously received A-ASSOCIATE-RQ.
            </summary>
            <remarks>
            The following holds for the presentation contexts in the sent A-ASSOCIATE-AC:<br></br>
            - All requested presentation contexts with an abstract syntax not contained in the supplied
              SOP classes will be rejected (have result field 3).<br></br>
            - For each other requested presentation contex that has an abstract syntax contained in
              the supplied SOP classes, do the following:<br></br>
              1)<br></br>
              Check if one or more of the requested transfer syntaxes is present in the first supplied
              TransferSyntaxes instance. If this is the case, use the requested transfer syntax that is
              requested before the other ones in the accepted presentation context counterpart (has
              result field 0).<br></br>
              2)<br></br>
              If no requested transfer syntaxes was present, try this with the second supplied
              TransferSyntaxes instance.<br></br>
              3) If no requested transfer syntaxes was present is in any supplied TransferSyntaxes
              instance, reject the presentation context with result 4.<br></br><br></br>
            
              Note that a difference exists between supplying one TransferSyntaxes instance with all
              transfer syntaxes to accept and supplying multiple TransferSyntaxes instances each containing
              only one transfer syntax. In the first case, the preference (order of proposed transfer
              syntaxes) of the SCU will be used, in the second case the preference of the caller of this
              method will be used.<br></br><br></br>
            
            If an A-ASSOCIATE-RJ should be sent when none of the requested presentation contexts is accepted,
            use the <see cref="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.SendAssociateRp(DvtkHighLevelInterface.Dicom.Other.SopClasses,DvtkHighLevelInterface.Dicom.Other.TransferSyntaxes[])"/> method instead.	
            </remarks>
            <param name="sopClasses">The SOP Classes to accept.</param>
            <param name="transferSyntaxesList">The transfer syntaxes to accept.</param>
            <returns>The sent AssociateAc.</returns>
            <exception cref="T:System.Exception">
            Last received message is not an A-ASSOCIATE-RQ or no message has been received at all.
            </exception> 
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.SendAssociateAc(DvtkHighLevelInterface.Dicom.Other.TransferSyntaxes[])">
            <summary>
            Sends an A-ASSOCIATE-AC based on the previously received A-ASSOCIATE-RQ.
            </summary>
            <remarks>
            The following holds for the presentation contexts in the sent A-ASSOCIATE-AC:<br></br>
            - For each requested presentation contex, do the following:<br></br>
              1)<br></br>
              Check if one or more of the requested transfer syntaxes is present in the first supplied
              TransferSyntaxes instance. If this is the case, use the requested transfer syntax that is
              requested before the other ones in the accepted presentation context counterpart (has
              result field 0).<br></br>
              2)<br></br>
              If no requested transfer syntaxes was present, try this with the second supplied
              TransferSyntaxes instance.<br></br>
              3) If no requested transfer syntaxes was present is in any supplied TransferSyntaxes
              instance, reject the presentation context with result 4.<br></br><br></br>
              
              Note that a difference exists between supplying one TransferSyntaxes instance with all
              transfer syntaxes to accept and supplying multiple TransferSyntaxes instances each containing
              only one transfer syntax. In the first case, the preference (order of proposed transfer
              syntaxes) of the SCU will be used, in the second case the preference of the caller of this
              method will be used.<br></br><br></br>
            
            If an A-ASSOCIATE-RJ should be sent when none of the requested presentation contexts is accepted,
            use the <see cref="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.SendAssociateRp(DvtkHighLevelInterface.Dicom.Other.TransferSyntaxes[])"/> method instead.	
            </remarks>
            <param name="transferSyntaxesList">The transfer syntaxes to accept.</param>
            <returns>The sent AssociateAc.</returns>
            <exception cref="T:System.Exception">
            Last received message is not an A-ASSOCIATE-RQ or no message has been received at all.
            </exception> 
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.SendAssociateRj">
            <summary>
            Sends a Dicom A_ASSOCIATE_RJ.
            </summary>
            <returns>The sent A_ASSOCIATE_RJ.</returns>
            <exception cref="T:System.Exception">
            Sending of the A_ASSOCIATE_RJ fails.
            </exception> 
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.SendAssociateRj(System.Byte,System.Byte,System.Byte)">
            <summary>
            Sends a Dicom A_ASSOCIATE_RJ.
            </summary>
            <param name="result">The result as defined in the Dicom standard.</param>
            <param name="source">The source as defined in the Dicom standard.</param>
            <param name="reason">The reason as defined in the Dicom standard.</param>
            <returns>The sent A_ASSOCIATE_RJ.</returns>
            <exception cref="T:System.Exception">
            Sending of the A_ASSOCIATE_RJ fails.
            </exception> 
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.SendAssociateRp">
            <overloads>
            Sends an A-ASSOCIATE-AC or A-ASSOCIATE-RJ.
            </overloads>
            <summary>
            Sends an A-ASSOCIATE-AC or A-ASSOCIATE-RJ based on the previously received A-ASSOCIATE-RQ.
            </summary>
            <remarks>
            This method will send an A-ASSOCIATE-AC if at least one presentation context will be accepted
            according to the rules specified below. Otherwise an A-ASSOCIATE-RJ will be sent. <br></br><br></br>
            
            The following holds for the presentation contexts in the A-ASSOCIATE-AC:<br></br>
            - All requested presentation contexts will be accepted (have result field 0).<br></br>
            - For each requested presentation context, the first proposed transfer syntax will be used.
            </remarks>
            <returns>The sent AssociateAc or AssociateRj.</returns>
            <exception cref="T:System.Exception">
            Last received message is not an A-ASSOCIATE-RQ or no message has been received at all.
            </exception> 
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.SendAssociateRp(DvtkHighLevelInterface.Dicom.Other.PresentationContextCollection)">
            <summary>
            Sends an A-ASSOCIATE-AC or A-ASSOCIATE-RJ based on the supplied presentation contexts.
            </summary>
            <remarks>
            This method will send an A-ASSOCIATE-AC if at least one presentation context will be accepted
            in the supplied presentation contexts. Otherwise an A-ASSOCIATE-RJ will be sent. <br></br><br></br>
            
            Any requested presentation context that has no counterpart in the supplied presentation
            contexts will automaticaly be added to the A-ASSOCIATE-AC with the presentation context rejected.<br></br><br></br>
            </remarks>
            <param name="presentationContextCollection">The presentation contexts.</param>
            <returns>The sent AssociateAc or AssociateRj.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.SendAssociateRp(DvtkHighLevelInterface.Dicom.Other.PresentationContext[])">
            <summary>
            Sends an A-ASSOCIATE-AC or A-ASSOCIATE-RJ based on the supplied presentation contexts.
            </summary>
            <remarks>
            This method will send an A-ASSOCIATE-AC if at least one presentation context will be accepted
            in the supplied presentation contexts. Otherwise an A-ASSOCIATE-RJ will be sent. <br></br><br></br>
            
            Any requested presentation context that has no counterpart in the supplied presentation
            contexts will automaticaly be added to the A-ASSOCIATE-AC with the presentation context rejected.<br></br><br></br>
            </remarks>
            <param name="presentationContexts">The presentation contexts.</param>
            <returns>The sent AssociateAc or AssociateRj.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.SendAssociateRp(DvtkHighLevelInterface.Dicom.Other.SopClasses)">
            <overloads>
            Sends an A-ASSOCIATE-AC or A-ASSOCIATE-RJ.
            </overloads>
            <summary>
            Sends an A-ASSOCIATE-AC or A-ASSOCIATE-RJ based on the previously received A-ASSOCIATE-RQ.
            </summary>
            <remarks>
            This method will send an A-ASSOCIATE-AC if at least one presentation context will be accepted
            according to the rules specified below. Otherwise an A-ASSOCIATE-RJ will be sent. <br></br><br></br>
            
            The following holds for the presentation contexts in the A-ASSOCIATE-AC:<br></br>
            - All requested presentation contexts with an abstract syntax contained in the supplied
              SOP classes will be accepted (have result field 0). The rest will be rejected
              (have result field 3).<br></br>
            - For each accepted requested presentation context, the first proposed transfer syntax 
              will be used.<br></br><br></br>
            </remarks>
            <param name="sopClasses">The SOP Classes to accept.</param>
            <returns>The sent AssociateAc or AssociateRj.</returns>
            <exception cref="T:System.Exception">
            Last received message is not an A-ASSOCIATE-RQ or no message has been received at all.
            </exception> 
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.SendAssociateRp(DvtkHighLevelInterface.Dicom.Other.SopClasses,DvtkHighLevelInterface.Dicom.Other.TransferSyntaxes[])">
            <overloads>
            Sends an A-ASSOCIATE-AC or A-ASSOCIATE-RJ.
            </overloads>
            <summary>
            Sends an A-ASSOCIATE-AC or A-ASSOCIATE-RJ based on the previously received A-ASSOCIATE-RQ.
            </summary>
            <remarks>
            This method will send an A-ASSOCIATE-AC if at least one presentation context will be accepted
            according to the rules specified below. Otherwise an A-ASSOCIATE-RJ will be sent. <br></br><br></br>
            
            The following holds for the presentation contexts in the A-ASSOCIATE-AC:<br></br>
            - All requested presentation contexts with an abstract syntax not contained in the supplied
              SOP classes will be rejected (have result field 3).<br></br>
            - For each other requested presentation contex that has an abstract syntax contained in
              the supplied SOP classes, do the following:<br></br>
              1)<br></br>
              Check if one or more of the requested transfer syntaxes is present in the first supplied
              TransferSyntaxes instance. If this is the case, use the requested transfer syntax that is
              requested before the other ones in the accepted presentation context counterpart (has
              result field 0).<br></br>
              2)<br></br>
              If no requested transfer syntaxes was present, try this with the second supplied
              TransferSyntaxes instance.<br></br>
              3) If no requested transfer syntaxes was present is in any supplied TransferSyntaxes
              instance, reject the presentation context with result 4.<br></br><br></br>
              
              Note that a difference exists between supplying one TransferSyntaxes instance with all
              transfer syntaxes to accept and supplying multiple TransferSyntaxes instances each containing
              only one transfer syntax. In the first case, the preference (order of proposed transfer
              syntaxes) of the SCU will be used, in the second case the preference of the caller of this
              method will be used.
            </remarks>
            <param name="sopClasses">The SOP Classes to accept.</param>
            <param name="transferSyntaxesList">The transfer syntaxes to accept.</param>
            <returns>The sent AssociateAc or AssociateRj.</returns>
            <exception cref="T:System.Exception">
            Last received message is not an A-ASSOCIATE-RQ or no message has been received at all.
            </exception> 
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.SendAssociateRp(DvtkHighLevelInterface.Dicom.Other.TransferSyntaxes[])">
            <summary>
            Sends an A-ASSOCIATE-AC or A-ASSOCIATE-RJ based on the previously received A-ASSOCIATE-RQ.
            </summary>
            <remarks>
            This method will send an A-ASSOCIATE-AC if at least one presentation context will be accepted
            according to the rules specified below. Otherwise an A-ASSOCIATE-RJ will be sent. <br></br><br></br>
            
            The following holds for the presentation contexts in the A-ASSOCIATE-AC:<br></br>
            - For each requested presentation contex, do the following:<br></br>
              1)<br></br>
              Check if one or more of the requested transfer syntaxes is present in the first supplied
              TransferSyntaxes instance. If this is the case, use the requested transfer syntax that is
              requested before the other ones in the accepted presentation context counterpart (has
              result field 0).<br></br>
              2)<br></br>
              If no requested transfer syntaxes was present, try this with the second supplied
              TransferSyntaxes instance.<br></br>
              3) If no requested transfer syntaxes was present is in any supplied TransferSyntaxes
              instance, reject the presentation context with result 4.<br></br><br></br>
              
              Note that a difference exists between supplying one TransferSyntaxes instance with all
              transfer syntaxes to accept and supplying multiple TransferSyntaxes instances each containing
              only one transfer syntax. In the first case, the preference (order of proposed transfer
              syntaxes) of the SCU will be used, in the second case the preference of the caller of this
              method will be used.
            </remarks>
            <param name="transferSyntaxesList">The transfer syntaxes to accept.</param>
            <returns>The sent AssociateAc or AssociateRj.</returns>
            <exception cref="T:System.Exception">
            Last received message is not an A-ASSOCIATE-RQ or no message has been received at all.
            </exception> 
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.SendAssociateRq(DvtkHighLevelInterface.Dicom.Other.PresentationContext[])">
            <summary>
            Sends an A-ASSOCIATE-RQ.
            </summary>
            <param name="presentationContexts">One or more PresentationContext objects.</param>
            <returns>The sent A-ASSOCIATE-RQ</returns>
            <exception cref="T:System.Exception">
            One or more of the supplied presentation contexts is an A_ASSOCIATE_AC presentation 
            context or sending of the A-ASSOCIATE-RQ fails.
            </exception> 
            <example>
            	<b>VB.NET</b>
            	<code>
            			<Example name="IncludesDicomThreadScu">
Imports System
Imports System.IO
Imports System.Windows.Forms
Imports DvtkData.Dimse.VR
Imports DvtkData.Dimse.DimseCommand
Imports DvtkHighLevelInterface
Imports DvtkHighLevelInterface.Dicom.Messages
Imports DvtkHighLevelInterface.Common.UserInterfaces
Imports DvtkHighLevelInterface.Dicom.Threads
</Example>
            			<Example name="DicomThreadScu">
Class DicomThreadScu
    Inherits DicomThread

    Protected Overrides Sub Execute()

        'Sending an association request
        SendAssociateRq _
        ( _
            New DvtkHighLevelInterface.Dicom.Other.PresentationContext("1.2.840.10008.5.1.4.1.1.2", "1.2.840.10008.1.2", "1.2.840.10008.1.2.1") _
        )


        'Receive the associate Ackknowledge 
        'Alternatively you could use ReceiveAssociateAc() method which will throw a 
        'HLIException if the received message is not an associate Ackknowledge
        Dim receivedMessage As DvtkHighLevelInterface.Dicom.Messages.DicomProtocolMessage = Nothing
        receivedMessage = ReceiveMessage()
        'Check wether the received response is indeed an associate ackknowledge
        If Not receivedMessage.IsAssociateAc Then
            If receivedMessage.IsAssociateRj Then
                Throw New System.Exception("Association Rejected.")
            ElseIf receivedMessage.IsAbort Then
                Throw New System.Exception("Abort Message.")
            Else
                'No idea what kind of message was sent back.
                Throw New System.Exception("Received unknown message.")
            End If
        End If


        'Sending a Message
        'We create a DicomMessage configured for C-Store Requests
        Dim aCTStoreRQMessage As DvtkHighLevelInterface.Dicom.Messages.DicomMessage = New DicomMessage(CSTORERQ)
        'Check the AttributeSet.read for documentation on reading files to handle exceptions
        aCTStoreRQMessage.DataSet.Read(ScriptContext._CTImageFullFileName)
        Try
            Send(aCTStoreRQMessage)
        Catch ex As DvtkHighLevelInterface.Common.Other.HliException
            'Error while sending. Handle as you please. 
            'ex.Message.ToString()
        End Try


        'The CStore Response
        Dim aCStoreRSPMessage As DvtkHighLevelInterface.Dicom.Messages.DicomMessage
        aCStoreRSPMessage = ReceiveDicomMessage()
        'make sure it really is a CSTORE Response
        If Not aCStoreRSPMessage.CommandSet.DimseCommand = DvtkData.Dimse.DimseCommand.CSTORERSP Then
            Throw New System.Exception("After a CSTORE Request the SCP returned an unexpected message.")
        End If


        'send a release request
        Try
            SendReleaseRq()
        Catch ex As DvtkHighLevelInterface.Common.Other.HliException
            'You error message. Handle as you please. 
            'ex.Message.ToString()
        End Try


        Dim aReleaseResponseMessage As DvtkHighLevelInterface.Dicom.Messages.ReleaseRp
        'receive the release response
        Try
            aReleaseResponseMessage = ReceiveReleaseRp()
        Catch ex As DvtkHighLevelInterface.Common.Other.HliException
            'You error message. Handle as you please. 
            'ex.Message.ToString()
        End Try

    End Sub

End Class
</Example>
            			<Example name="Main">
Class MainDicomThread
    Inherits DicomThreadScu

End Class 

Class ScriptContext

    ' Full session file name, only needed when not executing script under Dvt(Cmd).
    Public Const _SessionFullFileName As String = "C:\Program Files\DVT\example\scripts\storage\scu\Storage_SCU.ses"
    Public Const _CTImageFullFileName As String = "c:\YourCTImageFile.dcm"

End Class ' ScriptContext

Module DvtkScript

    Sub Main(ByVal CmdArgs() As String)

        Dim theExecutablePath As String = System.Windows.Forms.Application.ExecutablePath
        Dim theExecutableName As String = Path.GetFileName(theExecutablePath).ToLower()

        Dvtk.Setup.Initialize()

        Dim theDvtThreadManager As DvtkHighLevelInterface.Common.Threads.ThreadManager = New DvtkHighLevelInterface.Common.Threads.ThreadManager

        Dim theMainDicomThread As MainDicomThread = New MainDicomThread
        theMainDicomThread.Initialize(theDvtThreadManager)


        theMainDicomThread.Options.LoadFromFile(ScriptContext._SessionFullFileName)
        theMainDicomThread.Options.Identifier = "MainDicomThread"

        Dim theHliForm As HliForm = New HliForm
        theHliForm.AutoExit = False
        theHliForm.Attach(theMainDicomThread)

        theMainDicomThread.Start()

        theHliForm.WaitUntilClosed()

        Dvtk.Setup.Terminate()

    End Sub
</Example>		
            	</code>
            </example>		
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.SendAssociation(DvtkHighLevelInterface.Dicom.Messages.DicomMessage,DvtkHighLevelInterface.Dicom.Other.PresentationContext[])">
            <summary>
            Sends a single Dicom Message while taking care of setting up and releasing an
            association for it.
            </summary>
            <remarks>
            1. An A-ASSOCIATE-RQ is sent.<br></br>
            2. An A-ASSOCIATE-AC or A-ASSOCIATE-RJ is received.<br></br>
            Only when an A-ASSOCIATE-AC is received, steps 3, 4 and 5 are executed.<br></br>
            3. The Dicom Message is send and responses are received until the status is not pending anymore.<br></br>
            4. An A-RELEASE-RQ is sent.<br></br>
            5. An A-RELEASE-RP is received.<br></br>
            </remarks>
            <param name="dicomMessage">The Dicom Message to send.</param>
            <param name="presentationContexts">The presentation contexts to propose in the A-ASSOCIATE-RQ.</param>
            <returns>
            True indicates the other side has accepted the association, false indicates the other side
            has rejected the association.
            </returns>
            <exception cref="T:System.Exception">
            Sending or receiving of one of the Dul or Dicom messages fails or the flow of messages differs
            from the flow described.
            </exception> 
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.SendAssociation(DvtkHighLevelInterface.Dicom.Messages.DicomMessageCollection,DvtkHighLevelInterface.Dicom.Other.PresentationContext[])">
            <summary>
            Sends a Dicom Messages while taking care of setting up and releasing an
            association for it.
            </summary>
            <remarks>
            1. An A-ASSOCIATE-RQ is sent.<br></br>
            2. An A-ASSOCIATE-AC or A-ASSOCIATE-RJ is received.<br></br>
            Only when an A-ASSOCIATE-AC is received, steps 3, 4 and 5 are executed.<br></br>
            3. For each Dicom Message to send, it is sent and responses are received until the status is not pending anymore.<br></br>
            4. An A-RELEASE-RQ is sent.<br></br>
            5. An A-RELEASE-RP is received.<br></br>
            </remarks>
            <param name="dicomMessages">The Dicom Messages to send.</param>
            <param name="presentationContexts">The presentation contexts to propose in the A-ASSOCIATE-RQ.</param>
            <returns>
            True indicates the other side has accepted the association, false indicates the other side
            has rejected the association.
            </returns>
            <exception cref="T:System.Exception">
            Sending or receiving of one of the Dul or Dicom messages fails or the flow of messages differs
            from the flow described.
            </exception> 
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.SendReleaseRp">
            <summary>
            Sends a Dicom A_RELEASE_RP.
            </summary>
            <returns>The sent A_RELEASE_RP.</returns>
            <exception cref="T:System.Exception">
            Sending of the A_RELEASE_RP fails.
            </exception> 		
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.SendReleaseRq">
            <summary>
            Sends an A-RELEASE-RQ.
            </summary>
            <returns>The sent A-RELEASE-RQ.</returns>
            <exception cref="T:System.Exception">
            Sending of the A-RELEASE-RQ fails.
            </exception> 
            <example>
            	<b>VB.NET</b>
            	<code>
            			<Example name="IncludesDicomThreadScu">
Imports System
Imports System.IO
Imports System.Windows.Forms
Imports DvtkData.Dimse.VR
Imports DvtkData.Dimse.DimseCommand
Imports DvtkHighLevelInterface
Imports DvtkHighLevelInterface.Dicom.Messages
Imports DvtkHighLevelInterface.Common.UserInterfaces
Imports DvtkHighLevelInterface.Dicom.Threads
</Example>
            			<Example name="DicomThreadScu">
Class DicomThreadScu
    Inherits DicomThread

    Protected Overrides Sub Execute()

        'Sending an association request
        SendAssociateRq _
        ( _
            New DvtkHighLevelInterface.Dicom.Other.PresentationContext("1.2.840.10008.5.1.4.1.1.2", "1.2.840.10008.1.2", "1.2.840.10008.1.2.1") _
        )


        'Receive the associate Ackknowledge 
        'Alternatively you could use ReceiveAssociateAc() method which will throw a 
        'HLIException if the received message is not an associate Ackknowledge
        Dim receivedMessage As DvtkHighLevelInterface.Dicom.Messages.DicomProtocolMessage = Nothing
        receivedMessage = ReceiveMessage()
        'Check wether the received response is indeed an associate ackknowledge
        If Not receivedMessage.IsAssociateAc Then
            If receivedMessage.IsAssociateRj Then
                Throw New System.Exception("Association Rejected.")
            ElseIf receivedMessage.IsAbort Then
                Throw New System.Exception("Abort Message.")
            Else
                'No idea what kind of message was sent back.
                Throw New System.Exception("Received unknown message.")
            End If
        End If


        'Sending a Message
        'We create a DicomMessage configured for C-Store Requests
        Dim aCTStoreRQMessage As DvtkHighLevelInterface.Dicom.Messages.DicomMessage = New DicomMessage(CSTORERQ)
        'Check the AttributeSet.read for documentation on reading files to handle exceptions
        aCTStoreRQMessage.DataSet.Read(ScriptContext._CTImageFullFileName)
        Try
            Send(aCTStoreRQMessage)
        Catch ex As DvtkHighLevelInterface.Common.Other.HliException
            'Error while sending. Handle as you please. 
            'ex.Message.ToString()
        End Try


        'The CStore Response
        Dim aCStoreRSPMessage As DvtkHighLevelInterface.Dicom.Messages.DicomMessage
        aCStoreRSPMessage = ReceiveDicomMessage()
        'make sure it really is a CSTORE Response
        If Not aCStoreRSPMessage.CommandSet.DimseCommand = DvtkData.Dimse.DimseCommand.CSTORERSP Then
            Throw New System.Exception("After a CSTORE Request the SCP returned an unexpected message.")
        End If


        'send a release request
        Try
            SendReleaseRq()
        Catch ex As DvtkHighLevelInterface.Common.Other.HliException
            'You error message. Handle as you please. 
            'ex.Message.ToString()
        End Try


        Dim aReleaseResponseMessage As DvtkHighLevelInterface.Dicom.Messages.ReleaseRp
        'receive the release response
        Try
            aReleaseResponseMessage = ReceiveReleaseRp()
        Catch ex As DvtkHighLevelInterface.Common.Other.HliException
            'You error message. Handle as you please. 
            'ex.Message.ToString()
        End Try

    End Sub

End Class
</Example>
            			<Example name="Main">
Class MainDicomThread
    Inherits DicomThreadScu

End Class 

Class ScriptContext

    ' Full session file name, only needed when not executing script under Dvt(Cmd).
    Public Const _SessionFullFileName As String = "C:\Program Files\DVT\example\scripts\storage\scu\Storage_SCU.ses"
    Public Const _CTImageFullFileName As String = "c:\YourCTImageFile.dcm"

End Class ' ScriptContext

Module DvtkScript

    Sub Main(ByVal CmdArgs() As String)

        Dim theExecutablePath As String = System.Windows.Forms.Application.ExecutablePath
        Dim theExecutableName As String = Path.GetFileName(theExecutablePath).ToLower()

        Dvtk.Setup.Initialize()

        Dim theDvtThreadManager As DvtkHighLevelInterface.Common.Threads.ThreadManager = New DvtkHighLevelInterface.Common.Threads.ThreadManager

        Dim theMainDicomThread As MainDicomThread = New MainDicomThread
        theMainDicomThread.Initialize(theDvtThreadManager)


        theMainDicomThread.Options.LoadFromFile(ScriptContext._SessionFullFileName)
        theMainDicomThread.Options.Identifier = "MainDicomThread"

        Dim theHliForm As HliForm = New HliForm
        theHliForm.AutoExit = False
        theHliForm.Attach(theMainDicomThread)

        theMainDicomThread.Start()

        theHliForm.WaitUntilClosed()

        Dvtk.Setup.Terminate()

    End Sub
</Example>		
            	</code>
            </example>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.WaitForPendingDataInNetworkInputBuffer(System.Int32,System.Int32@)">
            <summary>
            Waits until pending data is available in the network input buffer.
            </summary>
            <param name="timeOut">The maximum amout of time in milliseconds to wait for pending data.</param>
            <param name="waitedTime">Return amout of time in milliseconds waited for pending data.</param>
            <returns>Returns a boolean indicating if pending data is available.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.WriteError(System.String)">
            <summary>
            Write an error to the results.
            </summary>
            <param name="text">The error text.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.WriteInformation(System.String)">
            <summary>
            Write information to the results.
            </summary>
            <param name="text">The information text.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.WriteWarning(System.String)">
            <summary>
            Write a warning to the results.
            </summary>
            <param name="text">The warning text.</param>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Threads.MessageHandler.DicomThread">
            <summary>
            The DicomThread this object operates on. It is the responsibility of the
            MessageIterator class to set this to the correct DicomThread before using
            this object.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Dicom.Messages.DicomProtocolMessageCollection">
            <summary>
            Collection of DicomProtocolMessages.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Messages.DicomProtocolMessageCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Messages.DicomProtocolMessageCollection.#ctor(DvtkHighLevelInterface.Dicom.Messages.DicomProtocolMessage[])">
            <summary>
            Constructor with initialization. Shallow copy.
            </summary>
            <param name="arrayOfValues">values to copy.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Messages.DicomProtocolMessageCollection.Add(DvtkHighLevelInterface.Dicom.Messages.DicomProtocolMessage)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The item to add to the <see cref="T:System.Collections.IList"/>. </param>
            <returns>The position into which the new element was inserted.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Messages.DicomProtocolMessageCollection.Contains(DvtkHighLevelInterface.Dicom.Messages.DicomProtocolMessage)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IList"/> contains a specific item.
            </summary>
            <param name="value">The item to locate in the <see cref="T:System.Collections.IList"/>.</param>
            <returns><see langword="true"/> if the item is found in the <see cref="T:System.Collections.IList"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Messages.DicomProtocolMessageCollection.IndexOf(DvtkHighLevelInterface.Dicom.Messages.DicomProtocolMessage)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The item to locate in the <see cref="T:System.Collections.IList"/>.</param>
            <returns>The index of <c>value</c> if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Messages.DicomProtocolMessageCollection.Insert(System.Int32,DvtkHighLevelInterface.Dicom.Messages.DicomProtocolMessage)">
            <summary>
            Inserts an item to the IList at the specified position.
            </summary>
            <param name="index">The zero-based index at which <c>value</c> should be inserted. </param>
            <param name="value">The item to insert into the <see cref="T:System.Collections.IList"/>.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Messages.DicomProtocolMessageCollection.Remove(DvtkHighLevelInterface.Dicom.Messages.DicomProtocolMessage)">
            <summary>
            Removes the first occurrence of a specific item from the IList.
            </summary>
            <param name="value">The item to remove from the <see cref="T:System.Collections.IList"/>.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Messages.DicomProtocolMessageCollection.ToString">
            <summary>
            Returns a String that represents this instance.
            </summary>
            <returns>A String that represents this instance.</returns>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Messages.DicomProtocolMessageCollection.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index.
            </summary>
            <value>The item at the specified <c>index</c>.</value>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Messages.DicomProtocolMessageCollection.DicomMessages">
            <summary>
            The DicomMessages in this collection.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Messages.DicomProtocolMessageCollection.DulMessages">
            <summary>
            The DulMessages in this collection.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Messages.DicomProtocolMessageCollection.ReceivedMessages">
            <summary>
            The received messages in this collection.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Messages.DicomProtocolMessageCollection.SendMessages">
            <summary>
            The send messages in this collection.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Messages.DicomProtocolMessageCollection.LastReceivedMessage">
            <summary>
            Gets the last received messages that is part of this collection.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Dicom.Messages.AssociateRj">
            <summary>
            Represents a Dicom A_ASSOCIATE_RJ.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Dicom.Messages.DulMessage">
            <summary>
            An object of this class represents a Dul message.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Dicom.Messages.DicomProtocolMessage">
            <summary>
            Abstract base class for all Dicom protocol messages.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Messages.Message">
            <summary>
            Abstract base class for all types of messages.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Messages.Message.isReceived">
            <summary>
            See property IsReceived.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Messages.Message.isSend">
            <summary>
            See property IsSend.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Messages.Message.isProcessed">
            <summary>
            See property IsProcessed.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Messages.Message.Abort">
            <summary>
            Gets the Abort message (use the property IsAbort to check if this message is really an Abort).
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Messages.Message.AssociateAc">
            <summary>
            Gets the AssociateAc message (use the property IsAssociateAc to check if this message is really an AssociateAc).
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Messages.Message.AssociateRj">
            <summary>
            Gets the AssociateRj message (use the property IsAssociateRj to check if this message is really an AssociateRj).
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Messages.Message.AssociateRq">
            <summary>
            Gets the AssociateRq message (use the property IsAssociateRq to check if this message is really an AssociateRq).
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Messages.Message.DicomMessage">
            <summary>
            Gets the DICOM message (use the property IsDicomMessage to check if this message is really an DicomMessage).
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Messages.Message.IsAbort">
            <summary>
            Indicates if the message is an Abort.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Messages.Message.IsAssociateAc">
            <summary>
            Indicates if the message is an AssociateAc.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Messages.Message.IsAssociateRj">
            <summary>
            Indicates if the message is an AssociateRj.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Messages.Message.IsAssociateRq">
            <summary>
            Indicates if the message is an AssociateRq.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Messages.Message.IsDicomMessage">
            <summary>
            Indicates if the message is a DicomMessage.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Messages.Message.IsProcessed">
            <summary>
            Indicates if this message has been processed.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Messages.Message.IsReceived">
            <summary>
            Indicates if this message has been received.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Messages.Message.IsReleaseRp">
            <summary>
            Indicates if the message is a ReleaseRp.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Messages.Message.IsReleaseRq">
            <summary>
            Indicates if the message is a ReleaseRq.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Messages.Message.IsSend">
            <summary>
            Indicates if this message has been send.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Messages.Message.ReleaseRp">
            <summary>
            Gets the ReleaseRp message (use the property IsDicomMessage to check if this message is really an DicomMessage).
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Messages.Message.ReleaseRq">
            <summary>
            Gets the ReleaseRp message (use the property IsDicomMessage to check if this message is really an DicomMessage).
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.Messages.DulMessage.dvtkDataDulMessage">
            <summary>
            See property DvtkDataDulMessage.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Messages.DulMessage.#ctor(DvtkData.Dul.DulMessage)">
            <summary>
            Constructor.
            </summary>
            <param name="dvtkDataDulMessage">The encapsulated DvtkData DulMessage.</param>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Messages.DulMessage.DvtkDataDulMessage">
            <summary>
            The encapsulated DvtkData DulMessage.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Messages.AssociateRj.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Messages.AssociateRj.#ctor(DvtkData.Dul.A_ASSOCIATE_RJ)">
            <summary>
            Constructor to encapsulate an existing DvtkData A_ASSOCIATE_RJ.
            </summary>
            <param name="dvtkDataAssociateRj">The encapsulated DvtkData A_ASSOCIATE_RJ</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Messages.AssociateRj.ToString">
            <summary>
            Returns a String that represents this instance.
            </summary>
            <returns>A String that represents this instance.</returns>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Messages.AssociateRj.DvtkDataAssociateRj">
            <summary>
            Gets the encapsulated DvtkData Associate Reject.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Messages.AssociateRj.Reason">
            <summary>
            Gets the DICOM reject reason containing an integer value encoded as an unsigned binary number.
            </summary>
            <remarks>
            If the Source field has the value (1) “DICOM UL service-user”, 
            it shall take one of the following:<br></br>
            1 - no-reason-given<br></br>
            2 - application-context-name-not-supported<br></br>
            3 - calling-AE-title-not-recognized<br></br>
            4-6 - reserved<br></br>
            7 - called-AE-title-not-recognized<br></br>
            8-10 - reserved<br></br>
            </remarks>
            <remarks>
            If the Source field has the value (2) “DICOM UL service provided (ACSE related function),” 
            it shall take one of the following:<br></br>
            1 - no-reason-given<br></br>
            2 - protocol-version-not-supported<br></br>
            </remarks>
            <remarks>
            If the Source field has the value (3) “DICOM UL service provided (Presentation related function),” 
            it shall take one of the following:<br></br>
            0 - reserved<br></br>
            1 - temporary-congestion<br></br>
            2 - local-limit-exceeded<br></br>
            3-7 - reserved
            </remarks>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Messages.AssociateRj.Result">
            <summary>
            Gets the DICOM reject result containing an integer value encoded as an unsigned binary number.
            </summary>
            <remarks>
            One of the following values shall be used:<br></br>
            1 - rejected-permanent<br></br>
            2 - rejected-transient
            </remarks>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Messages.AssociateRj.Source">
            <summary>
            Gets the DICOM reject source containing an integer value encoded as an unsigned binary number.
            </summary>
            <remarks>
            One of the following values shall be used:<br></br>
            1 - DICOM UL service-user<br></br>
            2 - DICOM UL service-provider (ACSE related function)<br></br>
            3 - DICOM UL service-provider (Presentation related function)
            </remarks>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Other.DicomAttributesToValidate">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            <br></br>
            Collection of DicomAttributeToValidate instances.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.DicomAttributesToValidate.containsComparePresentErrors">
            <summary>
            See property ContainsComparePresentErrors.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.DicomAttributesToValidate.containsCompareSequenceItemsErrors">
            <summary>
            See property ContainsCompareSequenceItemsErrors
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.DicomAttributesToValidate.containsCompareValuesErrors">
            <summary>
            See property ContainsCompareValuesErrors.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.DicomAttributesToValidate.containsCompareVRErrors">
            <summary>
            See property ContainsCompareVRErrors.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.DicomAttributesToValidate.isContainsCompareSequenceItemsErrorsDetermined">
            <summary>
            Used to make sure that the logic for determining the ContainsCompareSequenceItemsErrors
            is only performed once.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.DicomAttributesToValidate.isContainsComparePresentErrorsDetermined">
            <summary>
            Used to make sure that the logic for determining the ContainsComparePresentErrors
            is only performed once.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.DicomAttributesToValidate.isContainsCompareValuesErrorsDetermined">
            <summary>
            Used to make sure that the logic for determining the ContainsCompareValuesErrors
            is only performed once.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.DicomAttributesToValidate.isContainsCompareVRErrorsDetermined">
            <summary>
            Used to make sure that the logic for determining the ContainsCompareVRErrors
            is only performed once.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.DicomAttributesToValidate.ContainsCompareSequenceItemsErrors(System.Int32)">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            </summary>
            <param name="oneBasedSequenceItemIndex">-</param>
            <returns>-</returns>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Other.DicomAttributesToValidate.ContainsComparePresentErrors">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            <br></br>
            Indicates if a difference exists in existence (yes or no) for all attributes that have
            the flag Compare_present enabled.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Other.DicomAttributesToValidate.ContainsCompareValuesErrors">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            <br></br>
            For all attributes present that have the Compare_values flag, find out if differences
            exist for their values.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Other.DicomAttributesToValidate.ContainsCompareVRErrors">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            <br></br>
            For all attributes present that have the Compare_VR flag, find out if differences
            exist for their VR.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Other.DicomAttributesToValidate.ContainsSequenceAttribute">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            <br></br>
            Indicates if this collection contains at least one sequence attribute.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Other.DicomAttributesToValidate.LeadingAttribute">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            <br></br>
            The first DicomAttributeToValidate instance in this collection with a ValidAttributes
            contained. If no ValidAttribute is contained in this collection, return a newly created
            DicomAttributeToValidate instance containng a InvalidAttribute.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Other.DicomAttributesToValidate.MaxItemCount">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Other.DicomAttributesToValidate.ValidAttributes">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            <br></br>
            Returns the collection of ValidAttribute instances (i.e. those attributes that are present)
            contained in this collection.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Other.CompareFlags">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.CompareFlags.None">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.CompareFlags.Compare_present">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.CompareFlags.Compare_values">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.CompareFlags.Compare_VR">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Compare.Hl7AttributeCollection">
            <summary>
            Summary description for Hl7AttributeCollection.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Compare.AttributeCollectionBase">
            <summary>
            Abstract base class representing a collection of attributes (Dicom or HL7)
            in combination with some possible validation flags.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.AttributeCollectionBase.flags">
            <summary>
            See property Flags.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Compare.AttributeCollectionBase.Flags">
            <summary>
            The flags sepcified for the collection of attributes.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.Hl7AttributeCollection.empty">
            <summary>
            See static property Empty.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.Hl7AttributeCollection.hl7MessageOnly">
            <summary>
            See property AttributeSetOnly.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.Hl7AttributeCollection.#ctor">
            <summary>
            Hide default constructor.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Compare.Hl7AttributeCollection.Hl7MessageOnly">
            <summary>
            Property to get the actual Dicom Attribute Set.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Dicom.Threads.SCP">
            <summary>
            Summary description for SCP.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.SCP.AfterHandlingAssociateRequest(DvtkHighLevelInterface.Dicom.Messages.AssociateRq)">
            <summary>
            This class was only intended as an example of a MessageIterator derived class. Please use the MessageIterator class instead.
            </summary>
            <param name="associateRq">-</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.SCP.AfterHandlingReleaseRequest(DvtkHighLevelInterface.Dicom.Messages.ReleaseRq)">
            <summary>
            This class was only intended as an example of a MessageIterator derived class. Please use the MessageIterator class instead.
            </summary>
            <param name="releaseRq">-</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.SCP.AfterHandlingCEchoRequest(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            This class was only intended as an example of a MessageIterator derived class. Please use the MessageIterator class instead.
            </summary>
            <param name="dicomMessage">-</param>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Threads.SCP.ResultsFilePerAssociation">
            <summary>
            This class was only intended as an example of a MessageIterator derived class. Please use the MessageIterator class instead.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Threads.SCP.HandleCEchoRequest">
            <summary>
            This class was only intended as an example of a MessageIterator derived class. Please use the MessageIterator class instead.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Dicom.Threads.OutboundDicomMessageFilter">
            <summary>
            A filter to change outbound DICOM messages on the fly.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.OutboundDicomMessageFilter.Apply(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            Override to implement how to change an outbound DICOM message.
            </summary>
            <param name="dicomMessage">The outbound DICOM message.</param>
        </member>
        <member name="T:DvtkHighLevelInterface.Dicom.Other.DataSetCollection">
            <summary>
            Summary description for DataSetCollection.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Other.GenericCollection`1">
            <summary>
            Generic collection.
            <br></br><br></br>
            STILL WORK IN PROGRESS!
            <br></br><br></br>
            Still to add: implementation to check for null and duplicates.
            </summary>
            <typeparam name="T">The type of instances stored in this collection.</typeparam>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.DataSetCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.DataSetCollection.Read(System.String,System.String,DvtkHighLevelInterface.Dicom.Threads.DicomThread)">
            <summary>
            Clear this collections, read in all DataSet files in the specified path and add them to this collection.
            </summary>
            <param name="path">The path.</param>
            <param name="searchPattern">The search pattern to use.</param>
            <param name="dicomThread">The DicomThread instance to use.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.DataSetCollection.Read(System.String,System.String,System.String[])">
            <summary>
            Clear this collections, read in all DataSet files in the specified path and add them to this collection.
            </summary>
            <param name="path">The path.</param>
            <param name="searchPattern">The search pattern to use.</param>
            <param name="definitionFilesFullName">The definition files to use.</param>
        </member>
        <member name="T:DvtkHighLevelInterface.Dicom.Messages.DulMessageCollection">
            <summary>
            Collection of DulMessages.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Messages.DulMessageCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Messages.DulMessageCollection.#ctor(DvtkHighLevelInterface.Dicom.Messages.DulMessage[])">
            <summary>
            Constructor with initialization. Shallow copy.
            </summary>
            <param name="arrayOfValues">values to copy.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Messages.DulMessageCollection.Add(DvtkHighLevelInterface.Dicom.Messages.DulMessage)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The item to add to the <see cref="T:System.Collections.IList"/>. </param>
            <returns>The position into which the new element was inserted.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Messages.DulMessageCollection.Contains(DvtkHighLevelInterface.Dicom.Messages.DulMessage)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IList"/> contains a specific item.
            </summary>
            <param name="value">The item to locate in the <see cref="T:System.Collections.IList"/>.</param>
            <returns><see langword="true"/> if the item is found in the <see cref="T:System.Collections.IList"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Messages.DulMessageCollection.IndexOf(DvtkHighLevelInterface.Dicom.Messages.DulMessage)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The item to locate in the <see cref="T:System.Collections.IList"/>.</param>
            <returns>The index of <c>value</c> if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Messages.DulMessageCollection.Insert(System.Int32,DvtkHighLevelInterface.Dicom.Messages.DulMessage)">
            <summary>
            Inserts an item to the IList at the specified position.
            </summary>
            <param name="index">The zero-based index at which <c>value</c> should be inserted. </param>
            <param name="value">The item to insert into the <see cref="T:System.Collections.IList"/>.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Messages.DulMessageCollection.Remove(DvtkHighLevelInterface.Dicom.Messages.DulMessage)">
            <summary>
            Removes the first occurrence of a specific item from the IList.
            </summary>
            <param name="value">The item to remove from the <see cref="T:System.Collections.IList"/>.</param>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Messages.DulMessageCollection.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index.
            </summary>
            <value>The item at the specified <c>index</c>.</value>
        </member>
        <member name="T:DvtkHighLevelInterface.Dicom.Files.FileMetaInformation">
            <summary>
            Represents Dicom File Meta Information.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Dicom.Other.AttributeSet">
            <summary>
            Represents a set of Dicom Attributes.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.Other.AttributeSet.dvtkDataAttributeSet">
            <summary>
            The encapsulated AttributeSet from the DvtkData librbary.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.Other.AttributeSet.tagSequence">
            <summary>
            See property TagSequence.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.AttributeSet.#ctor(DvtkData.Dimse.AttributeSet)">
            <summary>
            Constructor for a root AttributeSet (like a Command Set, Data Set or File Meta information).
            </summary>
            <param name="dvtkDataAttributeSet">The encapsulated DvtkData Attribute Set.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.AttributeSet.#ctor(DvtkHighLevelInterface.Dicom.Other.TagSequence,DvtkData.Dimse.AttributeSet)">
            <summary>
            Constructor.
            </summary>
            <param name="dvtkDataAttributeSet">The encapsulated DvtkData Attribute Set.</param>
            <param name="tagSequence">The TagSequence (see property TagSequence).</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.AttributeSet.Add(DvtkHighLevelInterface.Dicom.Other.Attribute)">
            <summary>
            Adds (using deep copy) an Attribute.
            </summary>
            <param name="attribute">The Attribute to add.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.AttributeSet.AddItem(System.String,DvtkHighLevelInterface.Dicom.Other.SequenceItem)">
            <summary>
            Adds (using deep copy) the <paramref name="sequenceItem"/> to all Sequence Attributes
            indicated by <paramref name="tagSequence"/>.
            </summary>
            <param name="tagSequence">The tag sequence.</param>
            <param name="sequenceItem">The Sequence Item to add.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.AttributeSet.AddValues(System.String,DvtkHighLevelInterface.Dicom.Other.Values)">
            <summary>
            
            </summary>
            <param name="tagSequence"></param>
            <param name="values"></param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.AttributeSet.AddValues(System.String,System.Object[])">
            <summary>
            Adds values to all attributes that are refered to by the supplied tag sequence.
            </summary>
            <param name="tagSequence">The tag sequence.</param>
            <param name="parameters">The values to add.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.AttributeSet.Append(System.String,DvtkData.Dimse.VR,System.Object[])">
            <summary>
            When the tag sequence is single attribute specifying, this method does the following:
            - When the attribute already exists and also has VR SQ, the values or sequence items
              are appended to the already existing values or sequence items.
            - When the attribute already exists but has a different VR, an error is displayed and
              nothing is appended.
            - When the attribute does not already exists, it is created and the values or sequence
              items are added.
            
            When the tag sequence contains wildcards, the rules above are applied to each existing attribute
            specified by the tag sequence.
            
            Whenever the VR specified is SQ and the parameters supplied contain non sequence
            item(s), and exception is thrown.
            Whenever the VR specified is unequal SQ and the parameters contain sequence item(s),
            and exception is thrown.
            </summary>
            <param name="tagSequence">The tag sequence.</param>
            <param name="vR">The VR.</param>
            <param name="parameters">The parameters to append.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.AttributeSet.CheckParameters(DvtkData.Dimse.VR,System.Collections.ICollection)">
            <summary>
            Check if the supplied parameters correspond with the supplied VR.
            This functionality is used in e.g. the Append method.
            If the check fails, an exception is thrown.
            
            For now, the only check performed is looking if the supplied parameters
            are SequenceItems or not.
            </summary>
            <param name="vR">The VR.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.AttributeSet.Clear">
            <summary>
            Remove all attributes from the AttributeSet.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.AttributeSet.ClearValues(System.String)">
            <summary>
            Clear all values that are refered to by the supplied tag sequence.
            </summary>
            <param name="tagSequence">The tag sequence.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.AttributeSet.DumpUsingVisualBasicNotation(System.String)">
            <summary>
            Dumps the content of this instance to text.
            </summary>
            <param name="objectName">The name of the AttributeSet variable to use in the dump.</param>
            <returns>The content of this instance as text.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.AttributeSet.Dump(System.String)">
            <summary>
            Dumps the content of this instance to text
            </summary>
            <param name="appendString">Custom string to appent infront of the dump strings</param>
            <returns></returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.AttributeSet.Create(System.UInt32,DvtkData.Dimse.VR)">
            <summary>
            Create a new Attribute in this AttributeSet containing no values.
            
            Precondition: this Attribute may not exist in the AttributeSet.
            </summary>
            <param name="tagAsUInt32"></param>
            <param name="vR"></param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.AttributeSet.Delete(System.String)">
            <summary>
            Delete Attributes.
            
            The tag sequence supplied can be both single attribute matching and
            wildcard attribute matching.
            </summary>
            <param name="tagSequence"></param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.AttributeSet.Exists(System.String)">
            <summary>
            Indicates if the attribute with the supplied tag sequence exists.
            </summary>
            <param name="tagSequence">The tag sequence.</param>
            <returns>Indicates if the attribute exists.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.AttributeSet.Exists(DvtkHighLevelInterface.Dicom.Other.TagSequence)">
            <summary>
            Indicates if the attribute with the supplied tag sequence exists.
            </summary>
            <param name="tagSequence">The tag sequence.</param>
            <returns>Indicates if the attribute exists.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.AttributeSet.GetAttribute(System.UInt32)">
            <summary>
            Get an attribute given the tag as UInt32.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.AttributeSet.GetAttributes(DvtkHighLevelInterface.Dicom.Other.TagSequence)">
            <summary>
            Get all attributes that are refered to by this tag sequence.
            
            Precondition for the supplied TagSequence:
            All but the last tag contains an index.
            The last tag doesn't contain an index.
            </summary>
            <param name="tagSequence">The tag sequence.</param>
            <returns>The attributes.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.AttributeSet.Getitem(System.String,System.Int32)">
             <summary>
            		Get a SequenceItem by specifying a tagSequence
            		<paramref name="tagSequence">tagSequence</paramref>.
             </summary>
             <param name="tagSequence">
            		The (tag)Sequence of which you want a SequenceItem.
             </param>
             <param name="oneBasedIndex">
            		Specify which SequenceItem is requested. (1 for the first SequenceItem in the sequence)
             </param>
             <example>
            		<b>VB .NET</b>
            		<code>
            			'Get a SequenceItem by specifying a tagSequence
            			
            			'DataSet is inherited from AttributeSet
            			Dim myDataSet As DvtkHighLevelInterface.Dicom.Other.DataSet
            
            			myDataSet.Read("c:\Somefile.dcm")	
            	        		
            			'Get the first Sequence item from the specified Sequence
            			Dim mySequenceItem As DvtkHighLevelInterface.Dicom.Other.SequenceItem 
            
                    		If myDataSet.Exists("0x00080096") Then
               	 			If myDataSet.GetitemCount("0x00080096") &gt; 0 Then
            					mySequenceItem = myDataSet.Getitem("0x00080096", 1)
            				End If
            			End If
            		</code>
             </example>
             <returns>
            		A Values Object containing a list of all values the attribute contains.
             </returns>
             <exception cref="T:DvtkHighLevelInterface.Common.Other.HliException">
            		Tag sequence supplied invalid for this operation.
             </exception>
            <remarks>
            	If the attribute requested by the tagSequence is non existent or invalid an empty SequenceItem will be returned.
            </remarks>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.AttributeSet.GetitemCount(System.String)">
             <summary>
            		Get the number of SequenceItems by specifying a tagSequence
            		<paramref name="tagSequence">tagSequence</paramref>.
             </summary>
             <param name="tagSequence">
            		The (tag)Sequence of which you want a SequenceItem.
             </param>
             <example>
            		<b>VB .NET</b>
            		<code>
            			'Get a SequenceItem by specifying a tagSequence
            			
            			'DataSet is inherited from AttributeSet
            			Dim myDataSet As DvtkHighLevelInterface.Dicom.Other.DataSet
            
            			myDataSet.Read("c:\Somefile.dcm")
            	        		
            			'Get the number of sequence items 
            			Dim nrOfSequenceItems as integer
            			If myDataSet.Exists(("0x00080096")) Then
            	 	  	 	nrOfSequenceItems = myDataSet.GetitemCount("0x00080096")
            			End If		
            		</code>
             </example>
             <returns>
            		A Values Object containing a list of all values the attribute contains.
             </returns>
             <exception cref="T:DvtkHighLevelInterface.Common.Other.HliException">
            		Tag sequence supplied invalid for this operation..
             </exception>
            <remarks>
            	If the attribute requested by the tagSequence is non existent or invalid 0 will be returned.
            </remarks>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.AttributeSet.GetValues(System.String)">
             <summary>
            		Get the Values of the attribute	specified in the 
            		<paramref name="tagSequence">tagSequence</paramref>.
             </summary>
             <param name="tagSequence">
            		The tagsequence of the attribute of which you want the values.
             </param>
             <example>
            		<b>VB .NET</b>
            		<code>
            			' Example: Get the Values of the attribute with a 
            			' specified tagSequence
            			
            			'DataSet is inherited from AttributeSet
            			Dim myDataSet As DvtkHighLevelInterface.Dicom.Other.DataSet
            			myDataSet.Read("c:\Somefile.dcm")		
            
            			Dim myValues As DvtkHighLevelInterface.Dicom.Other.Values
            
            			If mydataset.Exists(("0x00100010")) Then
               	 			myValues = myDataSet.GetValues("0x00100010")
            				'Now we have a Values object which contains all the values of the specified attribute
            			End If				
            			
            
            			'To get the first value from the list (use this also when the attribute can only contain 1 value)
            			Dim firstValue As String 
            			If mydataset.Exists(("0x00100010")) Then
            				if mydataset("0x00100010").Values.Count &gt;0 then
            					firstValue = myValues(0)
            				End If
            			End If
            		</code>
             </example>
             <returns>
            		A Values Object containing a list of all values the attribute contains.
             </returns>
             <exception cref="T:DvtkHighLevelInterface.Common.Other.HliException">
            		Tag sequence supplied invalid for this operation..
             </exception>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.AttributeSet.GetVM(System.String)">
             <summary>
            		Get the Value Multiplicity of the attribute specified in the 
            		<paramref name="tagSequence">tagSequence</paramref>.
             </summary>
             <param name="tagSequence">
            		The tagsequence of the attribute of which you want the Value Multiplicity.
             </param>
             <example>
            		<b>VB .NET</b>
            		<code>
            			' Example: Get the Value Multiplicity of an attribute with a 
            			'specified tagSequence
            			
            			'DataSet is inherited from AttributeSet
            			Dim myDataSet As DvtkHighLevelInterface.Dicom.Other.DataSet
            			myDataSet.Read("c:\Somefile.dcm")
            
                  		Dim myVM As Integer
                    		If myDataSet.Exists("0x00100010") Then
                  	 		myVM = myDataSet.GetVM("0x00100010")
            			End If
                    		'alternatively you can use
            			If myDataSet.Exists("0x00100010") Then
                    			myVM = myDataSet("0x00100010").VM
            			End If
            		</code>
             </example>
             <returns>
            		The Value Multiplicty.
             </returns>
             <exception cref="T:DvtkHighLevelInterface.Common.Other.HliException">
            		Tag sequence supplied invalid for this operation..
             </exception>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.AttributeSet.GetVR(System.String)">
             <summary>
            		Get the Value Representation of the attribute specified in the 
            		<paramref name="tagSequence">tagSequence</paramref>.
             </summary>
             <param name="tagSequence">
            		The tagsequence of the attribute of which you want the Value Representation.
             </param>
             <example>
            		<b>VB .NET</b>
            		<code>
            			' Example: Get the Value Representation of an attribute with a 
            			' specified tagSequence
            			
            			'DataSet is inherited from AttributeSet
            			Dim myDataSet As DvtkHighLevelInterface.Dicom.Other.DataSet
            			myDataSet.Read("c:\Somefile.dcm")
            			
            			Dim myVR As DvtkData.Dimse.VR
            			If myDataSet.Exists("0x00100010") Then
            				myVR = myDataSet.GetVR("0x00100010")
            			End If
            
            			'alternatively you can use
            			If myDataSet.Exists("0x00100010") Then
            				myVR = myDataSet("0x00100010").VR
            			End If
            
            		</code>
             </example>
             <returns>
            		The Value Representation.
             </returns>
             <exception cref="T:DvtkHighLevelInterface.Common.Other.HliException">
            		Tag sequence supplied invalid for this operation..
             </exception>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.AttributeSet.InsertValues(System.String,System.Int32,DvtkHighLevelInterface.Dicom.Other.Values)">
            <summary>
            Inserts values for all attributes that are refered to by the supplied taf sequence.
            </summary>
            <param name="tagSequence">The tag sequence.</param>
            <param name="zeroBasedIndex">The zero-based index to insert the values at.</param>
            <param name="values">The values to insert.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.AttributeSet.InsertValues(System.String,System.Int32,System.Object[])">
            <summary>
            Inserts values for all attributes that are refered to by the supplied taf sequence.
            </summary>
            <param name="tagSequence">The tag sequence.</param>
            <param name="zeroBasedIndex">The zero-based index to insert the values at.</param>
            <param name="parameters">The values to insert.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.AttributeSet.MakeAscending(System.Boolean)">
            <summary>
            Make attributes in this AttributeSet ascending (Dicom compliant).
            </summary>
            <param name="recursive">
            When this is true, all attributes are made ascending resursively,
            i.e. all contained sequence items are also sorted.
            </param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.AttributeSet.Randomize(System.String)">
            <summary>
            Randomizes all attributes contained in this instance.
            </summary>
            <remarks>
            Randomization is performed by replacing each <paramref name="stringToReplace"/> in the values of the attributes contained
            with a random digit between 0 and 9.
            </remarks>
            <param name="stringToReplace">The String to replace (may not be empty).</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.AttributeSet.Randomize(System.String,System.Random)">
            <summary>
            Randomizes all attributes contained in this instance.
            </summary>
            <remarks>
            Randomization is performed by replacing each <paramref name="stringToReplace"/> in the values of the attributes contained
            with a random digit between 0 and 9.
            </remarks>
            <param name="stringToReplace">The String to replace (may not be empty).</param>
            <param name="random">A Random instance.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.AttributeSet.RemoveValueAt(System.String,System.Int32)">
            <summary>
            Remove values for all attributes that are refered to by the supplied tag sequence.
            </summary>
            <param name="tagSequence">The tag sequence.</param>
            <param name="zeroBasedIndex">The zero-based index to remove the value.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.AttributeSet.Set(DvtkData.Dimse.Tag,DvtkData.Dimse.VR,System.Byte[])">
            <summary>
            See comments for this overridden method in the classes CommandSet, DataSet, SequenceItem and FileMetaInformation.
            </summary>
            <param name="dvtkDataTag">-</param>
            <param name="vR">-</param>
            <param name="value">-</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.AttributeSet.Set(DvtkData.Dimse.Tag,DvtkData.Dimse.VR,System.Object[])">
            <summary>
            See comments for this overridden method in the classes CommandSet, DataSet, SequenceItem and FileMetaInformation.
            </summary>
            <param name="dvtkDataTag">-</param>
            <param name="vR">-</param>
            <param name="values">-</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.AttributeSet.Set(DvtkData.Dimse.Tag,DvtkData.Dimse.VR,DvtkHighLevelInterface.Dicom.Other.Values)">
            <summary>
            See comments for this overridden method in the classes CommandSet, DataSet, SequenceItem and FileMetaInformation.
            </summary>
            <param name="dvtkDataTag">-</param>
            <param name="vR">-</param>
            <param name="values">-</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.AttributeSet.Set(System.String,DvtkData.Dimse.VR,System.Byte[])">
            <summary>
            See comments for this overridden method in the classes CommandSet, DataSet, SequenceItem and FileMetaInformation.
            </summary>
            <param name="tagSequence">-</param>
            <param name="vR">-</param>
            <param name="value">-</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.AttributeSet.Set(System.String,DvtkData.Dimse.VR,System.Object[])">
            <summary>
            See comments for this overridden method in the classes CommandSet, DataSet, SequenceItem and FileMetaInformation.
            </summary>
            <param name="tagSequence">-</param>
            <param name="vR">-</param>
            <param name="values">-</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.AttributeSet.Set(System.String,DvtkData.Dimse.VR,DvtkHighLevelInterface.Dicom.Other.Values)">
            <summary>
            See comments for this overridden method in the classes CommandSet, DataSet, SequenceItem and FileMetaInformation.
            </summary>
            <param name="tagSequence">-</param>
            <param name="vR">-</param>
            <param name="values">-</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.AttributeSet.SetSequenceAttribute(DvtkHighLevelInterface.Dicom.Other.Tag)">
            <summary>
            Private method used by the Set method. This methods sets an attribute
            to a Sequence Attribute and makes sure it contains enough sequence items.
            </summary>
            <param name="tag">The tag of the Attribute.</param>
            <returns>The already existing or newly created sequence item.</returns>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.AttributeSet.Count">
            <summary>
            Gets the number of attributes.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.AttributeSet.DvtkDataAttributeSet">
            <summary>
            Gets the encapsulated DvtkData AttributeSet.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.AttributeSet.TagSequence">
            <summary>
            Gets the TagSequence of this AttributeSet.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.AttributeSet.Item(DvtkHighLevelInterface.Dicom.Other.TagSequence)">
            <summary>
            Get an attribute given the TagSequence.
            
            The TagSequence supplied must be single attribute matching.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.AttributeSet.Item(System.String)">
            <summary>
            Get an attribute given the TagSequence.
            
            The TagSequence supplied must be single attribute matching.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.AttributeSet.Item(System.Int32)">
            <summary>
            Get an attribute given the zero based index for this AttributeSet.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.Files.FileMetaInformation.dvtkDataFileHead">
            <summary>
            See property DvtkDataFileHead.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Files.FileMetaInformation.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Files.FileMetaInformation.#ctor(DvtkData.Media.FileMetaInformation,DvtkData.Media.FileHead)">
            <summary>
            Constructor. Encapsulated existing DvtkData FileMetaInformation instance and DvtkData FileHead instance.
            </summary>
            <param name="dvtkDataFileMetaInformation">The encapsulated DvtkData FileMetaInformation instance.</param>
            <param name="dvtkDataFileHead">The encapsulated FileHead instance.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Files.FileMetaInformation.Set(DvtkData.Dimse.Tag,DvtkData.Dimse.VR,System.Byte[])">
            <summary>
            Adds a single attribute with the tag, VR and value specified.
            </summary>
            <remarks>
            Only use this method for setting an attribute with VR OB, OF or OW.
            <br></br><br></br>
            If an attribute already exists with this tag, it is removed first before it is again
            added.
            </remarks>
            <param name="dvtkDataTag">The tag of the attribute.</param>
            <param name="vR">The VR (may only be OB, OF or OW) of the attribute.</param>
            <param name="value">The value of the attribute.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="dvtkDataTag"/> is not valid for setting a FileMetaInformation attribute.<br></br>
            -or-<br></br>
            <paramref name="vR"/> is unequal to OB, OF or OW.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is a null reference.
            </exception>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Files.FileMetaInformation.Set(DvtkData.Dimse.Tag,DvtkData.Dimse.VR,System.Object[])">
            <summary>
            Adds a single attribute with the tag, VR and values specified.
            </summary>
            <remarks>
            If an attribute already exists with this tag, it is removed first before it is again
            added.
            </remarks>
            <param name="dvtkDataTag">The tag of the attribute.</param>
            <param name="vR">The VR of the attribute.</param>
            <param name="values">
            The values of the attribute. Do not use the DICOM delimeter '\' directly. Instead supply
            multiple values arguments for this method when adding a single attribute with multiple values.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="dvtkDataTag"/> is not valid for setting a FileMetaInformation attribute.<br></br>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="values"/> is a null reference.
            </exception>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Files.FileMetaInformation.Set(DvtkData.Dimse.Tag,DvtkData.Dimse.VR,DvtkHighLevelInterface.Dicom.Other.Values)">
            <summary>
            Adds a single attribute with the tag, VR and values specified.
            </summary>
            <remarks>
            If an attribute already exists with this tag, it is removed first before it is again
            added.
            </remarks>
            <param name="dvtkDataTag">The tag of the attribute.</param>
            <param name="vR">The VR of the attribute.</param>
            <param name="values">The values, which will be copied from another attribute, for this attribute.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="dvtkDataTag"/> is not valid for setting a FileMetaInformation attribute.<br></br>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="values"/> is a null reference.
            </exception>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Files.FileMetaInformation.Set(System.String,DvtkData.Dimse.VR,System.Byte[])">
            <summary>
            Adds a single attribute with the tag sequence, VR and value specified.
            </summary>
            <remarks>
            Only use this method for setting an attribute with VR OB, OF or OW.
            <br></br><br></br>
            If an attribute already exists with this tag, it is removed first before it is again
            added.
            <br></br><br></br>
            If sequence items (each with a sequence item index) are specified in the tag sequence,
            empty sequence items will be added automatically to avoid gaps in the sequence items of sequence
            attributes.
            </remarks>
            <param name="tagSequence">The tag sequence of the attribute.</param>
            <param name="vR">The VR (may only be OB, OF or OW) of the attribute.</param>
            <param name="value">The value of the attribute.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="dvtkDataTag"/> is not valid for setting an attribute.<br></br>
            -or-<br></br>
            <paramref name="dvtkDataTag"/> is not valid for setting a FileMetaInformation attribute.<br></br>
            -or-<br></br>
            <paramref name="vR"/> is unequal to OB, OF or OW.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is a null reference.
            </exception>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Files.FileMetaInformation.Set(System.String,DvtkData.Dimse.VR,System.Object[])">
            <summary>
            Adds a single attribute with the tag sequence, VR and values specified.
            </summary>
            <remarks>
            If an attribute already exists with this tag, it is removed first before it is again
            added.
            <br></br><br></br>
            If sequence items (each with a sequence item index) are specified in the tag sequence,
            empty sequence items will be added automatically to avoid gaps in the sequence items of sequence
            attributes.
            </remarks>
            <param name="tagSequence">The tag sequence of the attribute.</param>
            <param name="vR">The VR of the attribute.</param>
            <param name="values">
            The values of the attribute. Do not use the DICOM delimeter '\' directly. Instead supply
            multiple values arguments for this method when adding a single attribute with multiple values.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="dvtkDataTag"/> is not valid for setting an attribute.<br></br>
            -or-<br></br>
            <paramref name="dvtkDataTag"/> is not valid for setting a FileMetaInformation attribute.<br></br>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="values"/> is a null reference.
            </exception>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Files.FileMetaInformation.Set(System.String,DvtkData.Dimse.VR,DvtkHighLevelInterface.Dicom.Other.Values)">
            <summary>
            Adds a single attribute with the tag sequence, VR and values specified.
            </summary>
            <remarks>
            If an attribute already exists with this tag, it is removed first before it is again
            added.
            <br></br>
            If sequence items (each with a sequence item index) are specified in the tag sequence,
            empty sequence items will be added automatically to avoid gaps in the sequence items of sequence
            attributes.
            </remarks>
            <param name="tagSequence">The tag sequence of the attribute.</param>
            <param name="vR">The VR of the attribute.</param>
            <param name="values">The values, which will be copied from another attribute, for this attribute.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="dvtkDataTag"/> is not valid for setting an attribute.<br></br>
            -or-<br></br>
            <paramref name="dvtkDataTag"/> is not valid for setting a FileMetaInformation attribute.<br></br>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="values"/> is a null reference.
            </exception>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Files.FileMetaInformation.DicomPrefix">
            <summary>
            Get or set the file prefix.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Files.FileMetaInformation.DvtkDataFileHead">
            <summary>
            The internal available encapsulated DvtkData FileHead object.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Files.FileMetaInformation.DvtkDataFileMetaInformation">
            <summary>
            The internal available encapsulated DvtkData FileMetaInformation object.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Files.FileMetaInformation.FilePreamble">
            <summary>
            Get or set the file preamble.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Files.FileMetaInformation.MediaStorageSOPClassUID">
            <summary>
            Get or set the Media Storage SOP Class UID ((0002,0002)).
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Files.FileMetaInformation.MediaStorageSOPInstanceUID">
            <summary>
            Get or set the Media Storage SOP Instance UID ((0002,0003)).
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Files.FileMetaInformation.TransferSyntax">
            <summary>
            Get or set the transfer syntax.
            
            Default is 1.2.840.10008.1.2.1 (Explict Little Endian).
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Comparator.Comparator">
            <summary>
            Class that encapsulate the Dvtk.Comparator.DicomComparator and Dvtk.Comparator.Hl7Comparator classes.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Comparator.Comparator.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Name to supply to the encapsulated Dvtk.Comparator.DicomComparator and Dvtk.Comparator.Hl7Comparator classes.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Comparator.Comparator.InitializeDicomComparator(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            Initializes the encapsulated Dvtk.Comparator.DicomComparator class with the supplied DICOM message.
            </summary>
            <param name="dicomMessage">The DICOM message.</param>
            <returns>The encapsulated Dvtk.Comparator.DicomComparator instance.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Comparator.Comparator.InitializeHl7Comparator(Dvtk.Hl7.Messages.Hl7Message)">
            <summary>
            Initializes the encapsulated Dvtk.Comparator.Hl7Comparator class with the supplied HL7 message.
            </summary>
            <param name="hl7Message">The HL7 message.</param>
            <returns>The encapsulated Dvtk.Comparator.Hl7Comparator instance.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Comparator.Comparator.PopulateDicomMessage(DvtkHighLevelInterface.Dicom.Messages.DicomMessage,Dvtk.Comparator.DicomComparator)">
            <summary>
            See the Dvtk.Comparator.DicomComparator.PopulateMessage method.
            </summary>
            <param name="dicomMessage">See the Dvtk.Comparator.DicomComparator.PopulateMessage method.</param>
            <param name="dicomSourceComparator">See the Dvtk.Comparator.DicomComparator.PopulateMessage method.</param>
            <returns>See the Dvtk.Comparator.DicomComparator.PopulateMessage method.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Comparator.Comparator.PopulateHl7Message(Dvtk.Hl7.Messages.Hl7Message,Dvtk.Comparator.Hl7Comparator)">
            <summary>
            See the Dvtk.Comparator.Hl7Comparator.PopulateMessage method.
            </summary>
            <param name="hl7Message">See the Dvtk.Comparator.Hl7Comparator.PopulateMessage method.</param>
            <param name="hl7SourceComparator">See the Dvtk.Comparator.Hl7Comparator.PopulateMessage method.</param>
            <returns>See the Dvtk.Comparator.Hl7Comparator.PopulateMessage method.</returns>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Compare.FlagsBase">
            <summary>
            Union of all possible flags defined in the other Flags enumerates.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.FlagsBase.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.FlagsBase.Compare_present">
            <summary>
            Check if all attributes with this flag are either all present or are all not present.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.FlagsBase.Compare_values">
            <summary>
            Check if all attributes with this flag have the same values.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.FlagsBase.Present">
            <summary>
            Check if an attribute with this flag is present.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.FlagsBase.Not_present">
            <summary>
            Check if an attribute with this flag is not present.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.FlagsBase.Compare_VR">
            <summary>
            Check if all attributes with this flag have the same VR.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.FlagsBase.Values">
            <summary>
            Check if an attribute with this flag has values.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.FlagsBase.No_values">
            <summary>
            Check if an attribute with this flag has no values.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.FlagsBase.Include_sequence_items">
            <summary>
            Also do a compare for all attributes contained in a sequence attribute.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Compare.AttributeCollections">
            <summary>
            Summary description for AttributeCollections.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.AttributeCollections.attributeCollections">
            <summary>
            The internal hidden non-type-safe list of AttributeCollections implemented as an ArrayList.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.AttributeCollections.#ctor">
            <summary>
            Constructor to create an empty instances.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.AttributeCollections.Clear">
            <summary>
            Clear this collection.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.AttributeCollections.Add(DvtkHighLevelInterface.Dicom.Other.AttributeSet)">
            <summary>
            Add an AttributeSet instance to this collection.
            </summary>
            <param name="attributeSet">The attribute set.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.AttributeCollections.Add(DvtkHighLevelInterface.Dicom.Other.AttributeSet,DvtkHighLevelInterface.Common.Compare.FlagsDicomAttribute)">
            <summary>
            Add an AttributeSet instance with specified flags to this collection.
            </summary>
            <param name="attributeSet">The attribute set.</param>
            <param name="flags">The flags.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.AttributeCollections.AddNull">
            <summary>
            Add a non-existing attribute colection.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.AttributeCollections.Add(Dvtk.Hl7.Messages.Hl7Message)">
            <summary>
            Add a HL7 message to this collection.
            </summary>
            <param name="hl7Message">The HL7 message.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.AttributeCollections.Add(Dvtk.Hl7.Messages.Hl7Message,DvtkHighLevelInterface.Common.Compare.FlagsHl7Attribute)">
            <summary>
            Add an HL7 message with specified flags to this collection.
            </summary>
            <param name="hl7Message">The HL7 message.</param>
            <param name="flags">The flags.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.AttributeCollections.DicomMakeAscending">
            <summary>
            Make all DICOM attributes within a DICOM attribute sets ascending.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.AttributeCollections.RemoveAt(System.Int32)">
            <summary>
            Remove an attribute collection at a specified indix.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.AttributeCollections.IsHl7Message(System.Int32)">
            <summary>
            Indicates if the attribute collection at the spefified index is a HL7 message.
            </summary>
            <param name="index">The index.</param>
            <returns>Boolean indicating if the attribute collection at the spefified index is a HL7 message.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.AttributeCollections.IsAttributeSet(System.Int32)">
            <summary>
            Returns a boolean given an index indicating if the !!!
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.AttributeCollections.IsNull(System.Int32)">
            <summary>
            Gets a boolean indicating a attribute collection is present at a specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>A boolean indicating a attribute collection is present at a specified index.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.AttributeCollections.GetHl7Message(System.Int32)">
            <summary>
            Get a HL7 message at a specific index.
            </summary>
            <param name="index">The index/</param>
            <returns>The HL7 message at a specific index.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.AttributeCollections.GetAttributeSet(System.Int32)">
            <summary>
            Gets an attribute set at a specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The attribute set at a specified index.</returns>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Compare.AttributeCollections.Count">
            <summary>
            Number of AttributeCollections.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Compare.AttributeCollections.Item(System.Int32)">
            <summary>
            Property to get a specific AttributeCollection.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Compare.AttributeCollections.NotNullCount">
            <summary>
            Gets the number of actual attribute sets, omitting the null (not present) attributesets.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.InformationModel.QueryRetrievePatientStudyOnlyInformationModel">
            <summary>
            Summary description for QueryRetrievePatientStudyOnlyInformationModel.
            Provides a wrapper class around the Dvtk.Dicom.InformationEntity.QueryRetrieve.PatientStudyOnlyInformationModel class.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.InformationModel.BaseInformationModel">
            <summary>
            Summary description for BaseInformationModel.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.BaseInformationModel.#ctor(Dvtk.Dicom.InformationEntity.BaseInformationModel)">
            <summary>
            Constructor.
            </summary>
            <param name="root">The encapsulated Dvtk.Dicom.InformationEntity information model.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.BaseInformationModel.Dump">
            <summary>
            Dumps to information model to text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.BaseInformationModel.GetCompositeDataModel">
            <summary>
            Gets the Composite Information Data model from the root.
            </summary>
            <returns>Returns collection of Composite datas</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.BaseInformationModel.LoadInformationModel(System.String)">
            <summary>
            Loads the Information Model with the appropriate data from .DCM and .RAW
            files found in the given dataDirectory.
            </summary>
            <param name="dataDirectory">Location of the .DCM and .RAW files used to populate the Information Model.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.BaseInformationModel.RefreshInformationModel">
            <summary>
            Refresh the Information Model contents.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.BaseInformationModel.AddDefaultAttributeToInformationModel(System.Boolean,System.String,DvtkData.Dimse.VR,System.Object[])">
            <summary>
            Copy the default dataset attributes to the Information Entities in the Information
            Models that define them.
            </summary>
            <param name="overWriteExistingValue">Boolean to indicate whether any already existing value should be overwritten or not.</param>
            <param name="tagSequence">The tag sequence.</param>
            <param name="vR">The VR.</param>
            <param name="parameters">The value(s).</param>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.BaseInformationModel.AddAdditionalAttributeToInformationModel(System.Boolean,System.String,DvtkData.Dimse.VR,System.Object[])">
            <summary>
            Add the attributes in this additional dataset to all Information Entities in the Information
            Models.
            </summary>
            <param name="overWriteExistingValue">Boolean to indicate whether any already existing value should be overwritten or not.</param>
            <param name="tagSequence">The tag sequence.</param>
            <param name="vR">The VR.</param>
            <param name="parameters">The value(s).</param>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.BaseInformationModel.QueryInformationModel(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            Query the Information Model using the given query message.
            </summary>
            <param name="queryMessage">Message used to query the Information Model.</param>
            <returns>DicomMessageCollection - containing the query responses. The final query response (without a dataset) is also included.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.BaseInformationModel.PatientRegistration(DvtkData.Dimse.DataSet)">
            <summary>
            Patient Registration request - update modality worklist information model.
            </summary>
            <param name="dataset">Dataset containing patient registration attributes.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.BaseInformationModel.PatientUpdate(DvtkData.Dimse.DataSet)">
            <summary>
            Patient Update request - update modality worklist information model.
            </summary>
            <param name="dataset">Dataset containing patient update attributes.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.BaseInformationModel.PatientMerge(DvtkData.Dimse.DataSet)">
            <summary>
            Patient merge request - update modality worklist information model.
            </summary>
            <param name="dataset">Dataset containing patient merge attributes.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.BaseInformationModel.PlacerOrderManagement(DvtkData.Dimse.DataSet)">
            <summary>
            Placer order management request - update modality worklist information model.
            </summary>
            <param name="dataset">Dataset containing placer order management attributes.</param>
        </member>
        <member name="P:DvtkHighLevelInterface.InformationModel.BaseInformationModel.Root">
            <summary>
            Gets the encapsulated Dvtk.Dicom.InformationEntity information model.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.InformationModel.BaseInformationModel.DataDirectory">
            <summary>
            Property - DataDirectory
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.QueryRetrieveInformationModel.AddToInformationModel(DvtkHighLevelInterface.Dicom.Files.DicomFile)">
            <summary>
            Add data to the Information Model from the given dicomFile.
            </summary>
            <param name="dicomFile">Dicom File containing the dataset used to populate the Information Model.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.QueryRetrieveInformationModel.AddToInformationModel(DvtkHighLevelInterface.Dicom.Files.DicomFile,System.Boolean)">
            <summary>
            Add data to the Information Model from the given dicom File with Storage option.
            </summary>
            <param name="dicomFile">Dicom File containing the dataset used to populate the Information Model.</param>
            <param name="storeDataset">Boolean indicating whether or not the dataset should also be stored to file for possible retrieval.</param>
        </member>
        <member name="T:DvtkHighLevelInterface.InformationModel.ICommitInformationModel">
            <summary>
            Summary description for ICommitInformationModel.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.ICommitInformationModel.IsInstanceInInformationModel(System.String,System.String)">
            <summary>
            Check if the given instance is present in the Information Model. The instance will be at the leaf nodes of the Information Model.
            </summary>
            <param name="sopClassUid">SOP Class UID to search for.</param>
            <param name="sopInstanceUid">SOP Instance UID to search for.</param>
            <returns>Boolean - true if instance found in the Information Model, otherwise false.</returns>
        </member>
        <member name="T:DvtkHighLevelInterface.InformationModel.IRetrieveInformationModel">
            <summary>
            Summary description for IRetrieveInformationModel.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.IRetrieveInformationModel.RetrieveInformationModel(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            Retrieve data from the Information Model using the given retrieve message.
            </summary>
            <param name="retrieveMessage">Message used to retrieve the Information Model.</param>
            <returns>File list - containing the filenames of all instances matching the retrieve dataset attributes.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.QueryRetrievePatientStudyOnlyInformationModel.#ctor">
            <summary>
            Class constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.QueryRetrievePatientStudyOnlyInformationModel.IsInstanceInInformationModel(System.String,System.String)">
            <summary>
            Check if the given instance is present in the Information Model. The instance will be at the leaf nodes of the Information Model.
            </summary>
            <param name="sopClassUid">SOP Class UID to search for.</param>
            <param name="sopInstanceUid">SOP Instance UID to search for.</param>
            <returns>Boolean - true if instance found in the Information Model, otherwise false.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.QueryRetrievePatientStudyOnlyInformationModel.RetrieveInformationModel(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            Retrieve data from the Information Model using the given retrieve message.
            </summary>
            <param name="retrieveMessage">Message used to retrieve the Information Model.</param>
            <returns>File list - containing the filenames of all instances matching the retrieve dataset attributes.</returns>
        </member>
        <member name="T:DvtkHighLevelInterface.Hl7.Threads.Hl7ThreadOptions">
            <summary>
            Summary description for Hl7ThreadOptions.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Threads.ThreadOptions">
            <summary>
            The options for the abstract Thread class.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Threads.ThreadOptions.attachChildsToUserInterfaces">
            <summary>
            See property AttachChildsToUserInterfaces.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Threads.ThreadOptions.identifier">
            <summary>
            See property Identifier.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Threads.ThreadOptions.name">
            <summary>
            See property Name.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Threads.ThreadOptions.resultsFileNameExtension">
            <summary>
            See property ResultsFileName.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Threads.ThreadOptions.resultsFileNameIndex">
            <summary>
            See property ResultsFileNameIndex.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Threads.ThreadOptions.resultsFileNameOnlyWithoutExtension">
            <summary>
            See property ResultsFileNameWithoutExtension.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Threads.ThreadOptions.showResults">
            <summary>
            See property ShowResults.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Threads.ThreadOptions.startAndStopResultsGatheringEnabled">
            <summary>
            See property StartAndStopResultsGatheringEnabled.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Threads.ThreadOptions.useResultsFileNameIndex">
            <summary>
            See property UseResultsFileNameIndex.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Threads.ThreadOptions.CopyFrom(DvtkHighLevelInterface.Common.Threads.ThreadOptions)">
            <summary>
            Copies all options from another ThreadOptions instance.
            </summary>
            <param name="threadOptions"></param>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Threads.ThreadOptions.AttachChildsToUserInterfaces">
            <summary>
            Gets or sets a boolean indicating if childs of a thread will automatically be attached
            to a user interface to which the thread itself is already attachted.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Threads.ThreadOptions.Identifier">
            <summary>
            The unique identifier of this object.
            It is used to set the name of the underlying .Net thread.
            When displaying activity logging (if enabled) for this thread in a dialog,
            the Identifier property is also used to uniquely identify logging from this
            thread. Besides this, in a DicomThread, the Identifier may also be used
            to create a unique results file name.
            
            If this property is set, the calling code has to make sure that this Identifier
            is unique.
            If not set, the Name property is appended with a number to create a unique identifier.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Threads.ThreadOptions.Name">
            <summary>
            The (possible not unique) name of this object.
            If this property is not set, the Class name will be used as the name.
            
            See also the property Identifier for the usage of this property.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Threads.ThreadOptions.ResultsDirectory">
            <summary>
            gets or sets the directory in which the results file(s) will be written.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Threads.ThreadOptions.ResultsFileNameOnly">
            <summary>
            Gets the file name only of the results files.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Threads.ThreadOptions.ResultsFullFileName">
            <summary>
            Gets the full file name of the results files.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Threads.ThreadOptions.ResultsFileNameExtension">
            <summary>
            Gets or sets the results file name extension.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Threads.ThreadOptions.ResultsFileNameIndex">
            <summary>
            Gets or sets the results file name index.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Threads.ThreadOptions.ResultsFileNameOnlyWithoutExtension">
            <summary>
            Gets or sets the results file name without extension.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Threads.ThreadOptions.SessionId">
            <summary>
            Gets or sets the session ID.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Threads.ThreadOptions.ShowResults">
            <summary>
            Gets or sets a boolean indicating if the results should be displayed after the thread
            has stopped and closed the results files.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Threads.ThreadOptions.StartAndStopResultsGatheringEnabled">
            <summary>
            Gets or sets a boolean indicating if the thread will automatically start results gathering when started and
            stop results gathering when stopped.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Threads.ThreadOptions.UseResultsFileNameIndex">
            <summary>
            Gets or sets a boolean indicating if an index should be used as part of a results file name.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Threads.ThreadOptions.DetailResultsFullFileName">
            <summary>
            Gets the full file name of the detailed results file.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Threads.ThreadOptions.DetailResultsFileNameOnly">
            <summary>
            Gets the file name of the detailed results file.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Threads.ThreadOptions.SummaryResultsFullFileName">
            <summary>
            Gets the full file name of the detailed results file.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Threads.ThreadOptions.SummaryResultsFileNameOnly">
            <summary>
            Gets the file name of the detailed results file.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Hl7.Threads.Hl7ThreadOptions.ResultsDirectory">
            <summary>
            Gets or sets the results directory.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Hl7.Threads.Hl7ThreadOptions.SessionId">
            <summary>
            Gets or sets the session ID.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Hl7.Threads.Hl7ThreadOptions.ShowResults">
            <summary>
            Gets or sets a boolean indicating if results should be displayed.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Dicom.UserInterfaces.AERegistrationControl">
            <summary>
            Generic AE title registration control. This will give u a list of AE titles and It will store it in a xml file in the given location.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.UserInterfaces.AERegistrationControl.Initialize(System.String)">
            <summary>
            Initialize the Control with settings file path
            </summary>
            <param name="FilePath"></param>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.UserInterfaces.AERegistrationControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.UserInterfaces.AERegistrationControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.UserInterfaces.AERegistrationControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Dicom.Threads.ConcurrentSCP">
            <summary>
            This class implements a MessageIterator descendant that handles each association in
            a different sub DicomThread. Multiple associations may be handled concurrently: when
            a sub DicomThread accepts an association, this object almost immediately starts
            a new sub DicomThread that starts listening to the same port.
            
            An instance of this class constructed from outside the HLI interface only contains an
            overview of all started sub DicomThreads in the corresponding results files.
            
            A user of this class outside the HLI interface is only concerned with creating an object
            of this class, calling the correct Initialize method, set the correct options, add MessageHandlers
            and calling the Start method.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.Threads.ConcurrentSCP.subDicomThreadNumber">
            <summary>
            Number used to determine the results files name of a sub DicomThread.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.Threads.ConcurrentSCP.lockObject">
            <summary>
            Used to lock the subDicomThreadNumber field.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.Threads.ConcurrentSCP.overviewThread">
            <summary>
            The DicomThread (that may be constructed from outside the HLI interface) that contains 
            the sub DicomThreads that handle the actual associations.
            
            If this object is the overview Thread, this field is null.
            If this object is a sub DicomThread, this field contains the overview Thread.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.ConcurrentSCP.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.ConcurrentSCP.AfterHandlingReleaseRequest(DvtkHighLevelInterface.Dicom.Messages.ReleaseRq)">
            <summary>
            This override makes sure that this SCP object only nadles one association and
            exists after that.
            </summary>
            <param name="releaseRq">The received A-RELEASE-RQ.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.ConcurrentSCP.BeforeHandlingAssociateRequest(DvtkHighLevelInterface.Dicom.Messages.AssociateRq)">
            <summary>
            This method is called after an A-ASSOCIATE-RQ has been received but before it
            (possibly) will be handled by the (zero or more) MessageHandler objects that
            are attached to this object.
            
            This implementation makes sure that before the A-ASSOCIATE-RQ is handled, a new
            sub DicomThread is started that listens to the same port as the current object.
            This method will only be called by a sub DicomThread.
            </summary>
            <param name="associateRq">The received A-ASSOCIATE-RQ</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.ConcurrentSCP.CreateAndStartChildDicomThread(DvtkHighLevelInterface.Dicom.Threads.ConcurrentSCP)">
            <summary>
            Create and start a sub DicomThread.
            </summary>
            <param name="overviewThread">The overview Thread.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.ConcurrentSCP.InitialAction">
            <summary>
            The following implementation makes sure that a new sub DicomThread is created and started by
            the overview Thread. After doing this, this objects waits until all subthreads are stopped.
            
            When this object is a sub DicomThread, nothing is done.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.UserInterfaces.IThreadUserInterface">
            <summary>
            Interface describing how a HLI Thread may attach itself to a User Interface.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.UserInterfaces.IThreadUserInterface.Attach(DvtkHighLevelInterface.Common.Threads.Thread)">
            <summary>
            Attach a thread to this user interface.
            </summary>
            <param name="thread"></param>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.UserInterfaces.HliConsole">
            <summary>
            Represents a HLI User Interface that shows output events, from Threads attached to,
            on the console.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.UserInterfaces.HliConsole.errorOutputEventHandler">
            <summary>
            Event handler that can handle an error output event from a Thread.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.UserInterfaces.HliConsole.identifierLastHandledThread">
            <summary>
            The identifier of the Thread, which output event has been handled the last time.
            If no output event has been handled yet, this contains String.Empty.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.UserInterfaces.HliConsole.informationOutputEventHandler">
            <summary>
            Event handler that can handle an information output event from a Thread.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.UserInterfaces.HliConsole.warningOutputEventHandler">
            <summary>
            Event handler that can handle a warning output event from a Thread.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.UserInterfaces.HliConsole.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.UserInterfaces.HliConsole.Attach(DvtkHighLevelInterface.Common.Threads.Thread)">
            <summary>
            Attach to a Thread.
            <br></br><br></br>
            By doing so, this object may react to information, warning and error output events
            from the Thread.
            </summary>
            <param name="thread">The Thread to attach to.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.UserInterfaces.HliConsole.HandleErrorOutputEvent(DvtkHighLevelInterface.Common.Threads.Thread,System.String)">
            <summary>
            Handle an error output event from a Thread by writing it to the console.
            </summary>
            <param name="thread">The Thread that generated the output event.</param>
            <param name="text">The text from the output event.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.UserInterfaces.HliConsole.HandleInformationOutputEvent(DvtkHighLevelInterface.Common.Threads.Thread,System.String)">
            <summary>
            Handle an information output event from a Thread by writing it to the console.
            </summary>
            <param name="thread">The Thread that generated the output event.</param>
            <param name="text">The text from the output event.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.UserInterfaces.HliConsole.HandleWarningOutputEvent(DvtkHighLevelInterface.Common.Threads.Thread,System.String)">
            <summary>
            Handle a warning output event from a Thread by writing it to the console.
            </summary>
            <param name="thread">The Thread that generated the output event.</param>
            <param name="text">The text from the output event.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.UserInterfaces.HliConsole.Write(DvtkHighLevelInterface.Common.Threads.Thread,System.String,System.String)">
            <summary>
            Write text, from a Thread output event, to the console.
            </summary>
            <param name="thread">The Thread that generated the output event.</param>
            <param name="text">The text from the output event.</param>
            <param name="type">
            String that indicates if the is information, a warning or an error.
            </param>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Other.ConditionFalse">
            <summary>
            Represents a boolean expression that evaluates to false.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Other.Condition">
            <summary>
            Represents a boolean expression that can evaluate another instance.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.Condition.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.Condition.And(DvtkHighLevelInterface.Common.Other.Condition,DvtkHighLevelInterface.Common.Other.Condition)">
            <summary>
            Returns a boolean expression which is the logical AND operation performed on the two supplied boolean expressions.
            </summary>
            <param name="condition1">The first boolean expression.</param>
            <param name="condition2">The second boolean expression.</param>
            <returns>The boolean expression which is the logical AND operation performed on the two supplied boolean expressions.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.Condition.Evaluate(System.Object)">
            <summary>
            Evaluates the boolean expression using the supplied instance.
            </summary>
            <param name="theObject">The supplied instance to evaluate the boolean expression with.</param>
            <returns>The result of evaluating the boolean expression with the supplied instance.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.Condition.Not(DvtkHighLevelInterface.Common.Other.Condition)">
            <summary>
            Returns a boolean expression which is the logical NOT operation performed on the supplied boolean expression.
            </summary>
            <param name="condition">The first boolean expression.</param>
            <returns>The boolean expression which is the logical NOT operation performed on the supplied boolean expression.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.Condition.Or(DvtkHighLevelInterface.Common.Other.Condition,DvtkHighLevelInterface.Common.Other.Condition)">
            <summary>
            Returns a boolean expression which is the logical OR operation performed on the two supplied boolean expressions.
            </summary>
            <param name="condition1">The first boolean expression.</param>
            <param name="condition2">The second boolean expression.</param>
            <returns>The boolean expression which is the logical OR operation performed on the two supplied boolean expressions.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.Condition.Filter(System.Collections.ICollection)">
            <summary>
            Evaluates all instances that are present in the supplied collection with this boolean
            expression and returns those instances that evaluate to true.
            </summary>
            <param name="theCollection">The instances to evaluate with this boolean expression.</param>
            <returns>All instances that evaluate to true with this boolean expression.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.ConditionFalse.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.ConditionFalse.Evaluate(System.Object)">
            <summary>
            Evaluates this boolean expression to false.
            </summary>
            <param name="theObject">The supplied instance to evaluate the boolean expression with.</param>
            <returns>False.</returns>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Compare.ValidationRuleBase">
            <summary>
            Abstract base class. 
            Specifies for an attribute in some protocol how it should be validated.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.ValidationRuleBase.flags">
            <summary>
            See property Flags.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Compare.ValidationRuleBase.Flags">
            <summary>
            The flags sepcified for this validation rule.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Compare.ValidationRuleBase.FlagsString">
            <summary>
            Gets a string collection representing a collection of flags or sets a collection of flags given a string collection.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Compare.StaticDicomCompare">
            <summary>
            Summary description for StaticDicomCompare.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Compare.CompareBase">
            <summary>
            This class contains the shared functionality for doing a static and dynamic compare of
            multiple datasets.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.CompareBase.BACKGROUND_GREY">
            <summary>
            Grey color.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.CompareBase.BACKGROUND_RED">
            <summary>
            Red color.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.CompareBase.PIXEL_WIDTH_NAME">
            <summary>
            Width of a name column in pixels.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.CompareBase.PIXEL_WIDTH_PRESENT">
            <summary>
            Width of a present column in pixels.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.CompareBase.PIXEL_WIDTH_TAG">
            <summary>
            Width of a tag column in pixels.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.CompareBase.PIXEL_WIDTH_VALUES">
            <summary>
            Width of a values column in pixels.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.CompareBase.PIXEL_WIDTH_VR">
            <summary>
            Width of a VR column in pixels.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.CompareBase.PIXEL_WIDTH_COMMENTS">
            <summary>
            Width of a comments column in pixels.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.CompareBase.columnIndexAttributeName">
            <summary>
            If displayed, contains the table column index of the name column for an attribute.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.CompareBase.columnIndexAttributePresent">
            <summary>
            If displayed, contains the table column index of the present column for an attribute.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.CompareBase.columnIndexAttributeTag">
            <summary>
            If displayed, contains the table column index of the tag column for an attribute.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.CompareBase.columnIndexAttributeValues">
            <summary>
            If displayed, contains the table column index of the values column for an attribute.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.CompareBase.columnIndexAttributeVR">
            <summary>
            If displayed, contains the table column index of the VR column for an attribute.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.CompareBase.columnIndexComments">
            <summary>
            If displayed, contains the table column index of the comments column.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.CompareBase.columnIndexCommonName">
            <summary>
            If displayed, contains the table column index of the common name column.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.CompareBase.columnIndexCommonTag">
            <summary>
            If displayed, contains the table column index of the common tag column.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.CompareBase.differenceFound">
            <summary>
            Indicates if a difference has been found that has not been added to the difference total.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.CompareBase.displayAttributeName">
            <summary>
            See property DisplayAttributeName.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.CompareBase.displayAttributePresent">
            <summary>
            See property DisplayAttributePresent.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.CompareBase.displayAttributeTag">
            <summary>
            See property DisplayAttributeTag.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.CompareBase.displayAttributeValues">
            <summary>
            See property DisplayAttributeValues.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.CompareBase.displayAttributeVR">
            <summary>
            See property DisplayAttributeVR.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.CompareBase.displayComments">
            <summary>
            See property DisplayComments.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.CompareBase.displayCommonName">
            <summary>
            See property DisplayCommonName.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.CompareBase.displayCommonTag">
            <summary>
            See property DisplayCommonTag.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.CompareBase.displayCompareValueType">
            <summary>
            See property DisplayCompareValueType.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.CompareBase.displayFlags">
            <summary>
            See property DisplayFlags.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.CompareBase.numberOfColumns">
            <summary>
            Number of columns.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.CompareBase.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.CompareBase.NewRow">
            <summary>
            Add a new row to the CompareResults table and check if the DifferenceCount needs
            to be increased.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.CompareBase.AddAttributeCollectionsInformationUsingStaticDicomCompare(DvtkHighLevelInterface.Common.Compare.AttributeCollections)">
            <summary>
            Add rows to the tables in which the results are displayed for comparing attribute collections
            using static compare.
            </summary>
            <param name="attributeCollections">The attribute collections.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.CompareBase.SetCellError(System.Int32,System.String)">
            <summary>
            Fill the cell with text indicating error.
            </summary>
            <param name="column">The column.</param>
            <param name="text">The text.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.CompareBase.SetCellOK(System.Int32,System.String)">
            <summary>
            Fill the cell with text indicating no error.
            </summary>
            <param name="column">The column.</param>
            <param name="text">The text.</param>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.CompareBase.compareResults">
            <summary>
            The field used to store the table that is the result of comparing.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Compare.CompareBase.DisplayAttributeName">
            <summary>
            Property indicating whether the attribute name column should be displayed.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Compare.CompareBase.DisplayAttributePresent">
            <summary>
            Property indicating whether the attribute present column should be displayed.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Compare.CompareBase.DisplayAttributeTag">
            <summary>
            Property indicating whether the attribute tag column should be displayed.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Compare.CompareBase.DisplayAttributeValues">
            <summary>
            Property indicating whether the attribute values column should be displayed.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Compare.CompareBase.DisplayAttributeVR">
            <summary>
            Property indicating whether the attribute VR column should be displayed.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Compare.CompareBase.DisplayComments">
            <summary>
            Property indicating whether the comments column should be displayed.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Compare.CompareBase.DisplayCommonName">
            <summary>
            Property indicating whether the common name column should be displayed.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Compare.CompareBase.DisplayCommonTag">
            <summary>
            Gets or sets a boolean indicating whether the common tag column should be displayed.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Compare.CompareBase.DisplayCompareValueType">
            <summary>
            Gets or sets a boolean indicating whether the compare value type should be displayed.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Compare.CompareBase.DisplayFlags">
            <summary>
            Gets or sets a boolean indicating whether the flags should be displayed.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Compare.CompareBase.DisplayGroupLength">
            <summary>
            Gets or sets a boolean indicating whether the group length should be displayed.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Compare.CompareBase.AddEmptyRowAfterEachDynamicComparedList">
            <summary>
            Sets a boolean indicating if an empty row should be added after each compared list.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.StaticDicomCompare.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.StaticDicomCompare.CompareAttributeSets(System.String,DvtkHighLevelInterface.Common.Compare.AttributeCollections,System.Collections.Specialized.StringCollection,DvtkHighLevelInterface.Common.Compare.FlagsDicomAttribute)">
            <summary>
            Do a static compare for the attribute sets supplied.
            
            Note that the parameters attributeSets, attributeSetDescriptions and compareFlagsForAttributeSets
            must have the same size and must be at least size 2.
            </summary>
            <param name="tableDescription">Description of the table.</param>
            <param name="attributeCollections">The attribute sets to compare with each other.</param>
            <param name="attributeCollectionDescriptions">The descriptions of the attribute sets.</param>
            <param name="flags">
            The compare flags that may be supplied. The following combination of flags may be supplied (using bitwise Or):
            - CompareFlags.None: when only supplying this flag, the attributes are only displayed and no compare is performed.
            - CompareFlags.Compare_present: a check is performed if all attributes with the same tag are present.
            - CompareFlags.Compare_values: a check is performed if all attributes with the same tag have the same values.
            - CompareFlags.Compare_VR: a check is performed if all attributes with the same tag have the same VR.
            </param>
            <returns>The results of the static compare presented as a table (that may be converted to HTML).</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.StaticDicomCompare.CompareAttributeSets(System.String,DvtkHighLevelInterface.Common.Compare.AttributeCollections,System.Collections.Specialized.StringCollection)">
            <summary>
            Compare the supplied attribute sets.
            </summary>
            <param name="tableDescription">The table description.</param>
            <param name="attributeCollections">The attribute collections.</param>
            <param name="attributeCollectionDescriptions">The description of the attribute collections.</param>
            <returns></returns>
        </member>
        <member name="T:DvtkHighLevelInterface.Hl7.Threads.Hl7Thread">
            <summary>
            This class represents a single thread in which Hl7 communication may be tested.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Hl7.Threads.Hl7Thread.hl7Logger">
            <summary>
            The HL7 logger.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Hl7.Threads.Hl7Thread.AfterChildThreadsFinished">
            <summary>
            This method is called after all child threads are stopped.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Hl7.Threads.Hl7Thread.StartResultsGathering">
            <summary>
            Start the results gathering.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Hl7.Threads.Hl7Thread.StopCurrentThread">
            <summary>
            Stop the current thread only:
            - Terminate any open connection
            - If that doesn't work, Abort the .netThread associated with this object.
            
            This method will be called in a seperate .Net thread (not in the .Net thread of this object).
            A seperate thread is used to make sure other threads are not waiting while this code is executed.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Hl7.Threads.Hl7Thread.Stopping">
            <summary>
            This method is called when this object is stopping.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Hl7.Threads.Hl7Thread.StopResultsGathering">
            <summary>
            Stop the results gathering.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Hl7.Threads.Hl7Thread.WriteError(System.String)">
            <summary>
            Write an error to the results.
            </summary>
            <param name="text">The error text.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Hl7.Threads.Hl7Thread.LogError(System.String)">
            <summary>
            Log error to the results.
            </summary>
            <param name="text">The error text.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Hl7.Threads.Hl7Thread.WriteInformation(System.String)">
            <summary>
            Write information to the results.
            </summary>
            <param name="text">The information text.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Hl7.Threads.Hl7Thread.LogInformation(System.String)">
            <summary>
            Log information to the results.
            </summary>
            <param name="text">The information text.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Hl7.Threads.Hl7Thread.WriteWarning(System.String)">
            <summary>
            Write a warning to the results.
            </summary>
            <param name="text">The warning text.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Hl7.Threads.Hl7Thread.LogWarning(System.String)">
            <summary>
            Log warning to the results.
            </summary>
            <param name="text">The warning text.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Hl7.Threads.Hl7Thread.WriteXmlStringToResults(System.String)">
            <summary>
            Write the given XML string to the results file without further interpretation.
            </summary>
            <param name="xmlString">XML string to be written to file.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Hl7.Threads.Hl7Thread.UpdateValidationErrorCount(System.Int32)">
            <summary>
            Update the Validation Error count by the errorCount given.
            </summary>
            <param name="errorCount">Error count.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Hl7.Threads.Hl7Thread.UpdateValidationWarningCount(System.Int32)">
            <summary>
            Update the Validation Warning count by the warningCount given.
            </summary>
            <param name="warningCount">Warning count.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Hl7.Threads.Hl7Thread.Initialize(DvtkHighLevelInterface.Common.Threads.ThreadManager)">
            <summary>
            Initialize this object as a DicomThread with no parent thread.
            </summary>
            <param name="threadManager">The threadManager.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Hl7.Threads.Hl7Thread.Initialize(DvtkHighLevelInterface.Common.Threads.Thread)">
            <summary>
            Initialize this object as a DicomThread with a parent thread.
            </summary>
            <param name="parent">The parent thread.</param>
        </member>
        <member name="P:DvtkHighLevelInterface.Hl7.Threads.Hl7Thread.NrErrors">
            <summary>
            Property - get the total number of errors reported to this thread.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Hl7.Threads.Hl7Thread.NrWarnings">
            <summary>
            Property - get the total number of warnings reported to this thread.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Hl7.Threads.Hl7Thread.Options">
            <summary>
            Gets the HL7 thread options.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Dicom.Other.CommandSet">
            <summary>
            Represents a Dicom Command Set.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.CommandSet.#ctor">
            <summary>
            Hide default constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.CommandSet.#ctor(DvtkData.Dimse.DimseCommand)">
            <summary>
            Constructor. Creates an empty Command Set.
            </summary>
            <param name="dimseCommand">The Dimse Command.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.CommandSet.#ctor(DvtkData.Dimse.CommandSet)">
            <summary>
            Constructor. Encapsulates a DvtkData.Dimse.CommandSet instance.
            </summary>
            <param name="dvtkDataCommandSet">The DvtkData.Dimse.CommandSet instance to encapsulate.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.CommandSet.Clone">
            <summary>
            Creates a deep copy of this instance.
            </summary>
            <returns>A deep copy of this instance.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.CommandSet.CloneFrom(DvtkHighLevelInterface.Dicom.Other.CommandSet)">
            <summary>
            Makes this instance a deep copy of <paramref name="commandSet"/>.
            </summary>
            <param name="commandSet">The Command Set to copy from.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.CommandSet.GetSopClassUid">
            <summary>
            Returns the SOP Class UID.
            </summary>
            <remarks>
            Returns empty string if SOP Class UID not found. 
            </remarks>
            <returns>The SOP Class UID.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.CommandSet.Set(DvtkData.Dimse.Tag,DvtkData.Dimse.VR,System.Byte[])">
            <summary>
            Adds a single attribute with the tag, VR and value specified.
            </summary>
            <remarks>
            Only use this method for setting an attribute with VR OB, OF or OW.
            <br></br><br></br>
            If an attribute already exists with this tag, it is removed first before it is again
            added.
            </remarks>
            <param name="dvtkDataTag">The tag of the attribute.</param>
            <param name="vR">The VR (may only be OB, OF or OW) of the attribute.</param>
            <param name="value">The value of the attribute.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="dvtkDataTag"/> is not valid for setting a CommandSet attribute.<br></br>
            -or-<br></br>
            <paramref name="vR"/> is unequal to OB, OF or OW.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is a null reference.
            </exception>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.CommandSet.Set(DvtkData.Dimse.Tag,DvtkData.Dimse.VR,System.Object[])">
            <summary>
            Adds a single attribute with the tag, VR and values specified.
            </summary>
            <remarks>
            If an attribute already exists with this tag, it is removed first before it is again
            added.
            </remarks>
            <param name="dvtkDataTag">The tag of the attribute.</param>
            <param name="vR">The VR of the attribute.</param>
            <param name="values">
            The values of the attribute. Do not use the DICOM delimeter '\' directly. Instead supply
            multiple values arguments for this method when adding a single attribute with multiple values.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="dvtkDataTag"/> is not valid for setting a CommandSet attribute.<br></br>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="values"/> is a null reference.
            </exception>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.CommandSet.Set(DvtkData.Dimse.Tag,DvtkData.Dimse.VR,DvtkHighLevelInterface.Dicom.Other.Values)">
            <summary>
            Adds a single attribute with the tag, VR and values specified.
            </summary>
            <remarks>
            If an attribute already exists with this tag, it is removed first before it is again
            added.
            </remarks>
            <param name="dvtkDataTag">The tag of the attribute.</param>
            <param name="vR">The VR of the attribute.</param>
            <param name="values">The values, which will be copied from another attribute, for this attribute.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="dvtkDataTag"/> is not valid for setting a CommandSet attribute.<br></br>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="values"/> is a null reference.
            </exception>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.CommandSet.Set(System.String,DvtkData.Dimse.VR,System.Byte[])">
            <summary>
            Adds a single attribute with the tag sequence, VR and value specified.
            </summary>
            <remarks>
            Only use this method for setting an attribute with VR OB, OF or OW.
            <br></br><br></br>
            If an attribute already exists with this tag, it is removed first before it is again
            added.
            <br></br><br></br>
            If sequence items (each with a sequence item index) are specified in the tag sequence,
            empty sequence items will be added automatically to avoid gaps in the sequence items of sequence
            attributes.
            </remarks>
            <param name="tagSequence">The tag sequence of the attribute.</param>
            <param name="vR">The VR (may only be OB, OF or OW) of the attribute.</param>
            <param name="value">The value of the attribute.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="dvtkDataTag"/> is not valid for setting an attribute.<br></br>
            -or-<br></br>
            <paramref name="dvtkDataTag"/> is not valid for setting a CommandSet attribute.<br></br>
            -or-<br></br>
            <paramref name="vR"/> is unequal to OB, OF or OW.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is a null reference.
            </exception>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.CommandSet.Set(System.String,DvtkData.Dimse.VR,System.Object[])">
            <summary>
            Adds a single attribute with the tag sequence, VR and values specified.
            </summary>
            <remarks>
            If an attribute already exists with this tag, it is removed first before it is again
            added.
            <br></br><br></br>
            If sequence items (each with a sequence item index) are specified in the tag sequence,
            empty sequence items will be added automatically to avoid gaps in the sequence items of sequence
            attributes.
            </remarks>
            <param name="tagSequence">The tag sequence of the attribute.</param>
            <param name="vR">The VR of the attribute.</param>
            <param name="values">
            The values of the attribute. Do not use the DICOM delimeter '\' directly. Instead supply
            multiple values arguments for this method when adding a single attribute with multiple values.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="dvtkDataTag"/> is not valid for setting an attribute.<br></br>
            -or-<br></br>
            <paramref name="dvtkDataTag"/> is not valid for setting a CommandSet attribute.<br></br>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="values"/> is a null reference.
            </exception>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.CommandSet.Set(System.String,DvtkData.Dimse.VR,DvtkHighLevelInterface.Dicom.Other.Values)">
            <summary>
            Adds a single attribute with the tag sequence, VR and values specified.
            </summary>
            <remarks>
            If an attribute already exists with this tag, it is removed first before it is again
            added.
            <br></br><br></br>
            If sequence items (each with a sequence item index) are specified in the tag sequence,
            empty sequence items will be added automatically to avoid gaps in the sequence items of sequence
            attributes.
            </remarks>
            <param name="tagSequence">The tag sequence of the attribute.</param>
            <param name="vR">The VR of the attribute.</param>
            <param name="values">The values, which will be copied from another attribute, for this attribute.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="dvtkDataTag"/> is not valid for setting an attribute.<br></br>
            -or-<br></br>
            <paramref name="dvtkDataTag"/> is not valid for setting a CommandSet attribute.<br></br>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="values"/> is a null reference.
            </exception>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.CommandSet.DimseCommand">
            <summary>
            Gets the Dimse Command.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.CommandSet.DimseCommandName">
            <summary>
            Gets the Dimse Command as a readable string.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.CommandSet.DvtkDataCommandSet">
            <summary>
            Gets the encapsulated DvtkData.Dimse.CommandSet instance.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Dicom.Other.BooleanExpressionDataSet">
            <summary>
            Represents a boolean expression that can evaluate one data sets.
            <br></br><br></br>
            STILL WORK IN PROGRESS!
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Other.GenericBooleanExpression`2">
            <summary>
            Represents a boolean expression that can evaluate another instance.
            <br></br><br></br>
            STILL WORK IN PROGRESS!
            </summary>
            <typeparam name="T">The type of the instance to evaluate.</typeparam>
            <typeparam name="TCollection">A collection of the type specified.</typeparam>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.GenericBooleanExpression`2.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.GenericBooleanExpression`2.op_BitwiseAnd(DvtkHighLevelInterface.Common.Other.GenericBooleanExpression{`0,`1},DvtkHighLevelInterface.Common.Other.GenericBooleanExpression{`0,`1})">
            <summary>
            Returns a boolean expression which is the logical AND operation performed on the two supplied boolean expressions.
            </summary>
            <param name="booleanExpression1">The first boolean expression.</param>
            <param name="booleanExpression2">The second boolean expression.</param>
            <returns>The boolean expression which is the logical AND operation performed on the two supplied boolean expressions.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.GenericBooleanExpression`2.op_LogicalNot(DvtkHighLevelInterface.Common.Other.GenericBooleanExpression{`0,`1})">
            <summary>
            Returns a boolean expression which is the logical NOT operation performed on the supplied boolean expression.
            </summary>
            <param name="booleanExpression">The boolean expression.</param>
            <returns>The boolean expression which is the logical NOT operation performed on the supplied boolean expression.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.GenericBooleanExpression`2.op_BitwiseOr(DvtkHighLevelInterface.Common.Other.GenericBooleanExpression{`0,`1},DvtkHighLevelInterface.Common.Other.GenericBooleanExpression{`0,`1})">
            <summary>
            Returns a boolean expression which is the logical OR operation performed on the two supplied boolean expressions.
            </summary>
            <param name="booleanExpression1">The first boolean expression.</param>
            <param name="booleanExpression2">The second boolean expression.</param>
            <returns>The boolean expression which is the logical OR operation performed on the two supplied boolean expressions.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.GenericBooleanExpression`2.Evaluate(`0)">
            <summary>
            Evaluates the boolean expression using the supplied instance.
            </summary>
            <param name="t">The supplied instance to evaluate the boolean expression with.</param>
            <returns>The result of evaluating the boolean expression with the supplied instance.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.GenericBooleanExpression`2.Evaluate(`1)">
            <summary>
            Returns a subset of the supplied collection containing those elements that evaluate to true.
            </summary>
            <param name="collection">The collection.</param>
            <returns>The subset of the supplied collection.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.BooleanExpressionDataSet.ContainsAttribute(System.String)">
            <summary>
            Return an instance of the a class that is able to evaluate if a dataset contains a specific attribute.
            </summary>
            <param name="tagSequence">The tag sequence of the attribute to check for.</param>
            <returns>A BooleanExpressionDataSet instance.</returns>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Compare.AttributeTypes">
            <summary>
            Summary description for AttributeTypes.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.AttributeTypes.DicomAttribute">
            <summary>
            Attribute is a DICOM attribute.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.AttributeTypes.Hl7Attribute">
            <summary>
            Attribute is a HL7 attribute.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Dicom.Files.DicomFile">
            <summary>
            Represents a Dicom File.
            </summary>
            <remarks>
            An instance of this class contains both File Meta Information and a Data Set.
            </remarks>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.Files.DicomFile.addGroupLength">
            <summary>
            See property AddGroupLength.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.Files.DicomFile.createNewDataSetObjectWhenReading">
            <summary>
            See property CreateNewDataSetObjectWhenReading.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.Files.DicomFile.dataSet">
            <summary>
            See property DataSet.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.Files.DicomFile.fileMetaInformation">
            <summary>
            See property FileMetaInformation.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.Files.DicomFile.storeOBOFOWValuesWhenReading">
            <summary>
            See property StoreOBOFOWValuesWhenReading
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.Files.DicomFile.unVrDefinitionLookUpWhenReading">
            <summary>
            See property UnVrDefinitionLookUpWhenReading.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Files.DicomFile.#ctor">
            <summary>
            Default constructor. Creates an empty Dicom File.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Files.DicomFile.CreateEmptyDvtkScriptSession">
            <summary>
            Creates an Dvtk.Sessions.ScriptSession instance in which no definiton files are loaded.
            </summary>
            <returns>An Dvtk.Sessions.ScriptSession instance.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Files.DicomFile.DumpUsingVisualBasicNotation(System.String)">
            <summary>
            Returns the content of this instance as a String using Visual Basic notation.
            </summary>
            <param name="objectName">Name of the DicomFile variable to display.</param>
            <returns>The content of this instance as a String using Visual Basic notation.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Files.DicomFile.Read(System.String,System.String[])">
            <summary>
            Reads a file.
            </summary>
            <remarks>
            A new FileMetaInformation and DataSet object will be created inside this object. They will be
            filled with the content of the specified file.
            The FileMetaInformation and DataSet object previously used will not change (they will not be
            used anymore by this object) and can still be used outside this object if needed.
            <br></br><br></br>
            NOTE:
            The intention of this method is to use only the supplied definition files.
            The current implementation however uses all already loaded definition files outside this 
            method and the supplied definition files!
            <br></br><br></br>
            Also see properties UnVrDefinitionLookUpWhenReading and StoreOBOFOWValuesWhenReading.
            <br></br><br></br>
            If something goes wrong while reading the file, an exception is thrown.
            </remarks>
            <param name="fullFileName">The full file name.</param>
            <param name="definitionFilesFullName">The definition files to use for determining the attribute names.</param>
            <example>
            	<b>VB .NET</b>
            	<code>
            		'Example: Read a specified DICOM file
            		
            		Dim myDicomFile As DvtkHighLevelInterface.Dicom.Files.DicomFile 
            		
            		If File.Exists("") Then
            			Try
            				myDicomFile.Read("c:\Somefile.dcm")
              			 	Catch ex As DvtkHighLevelInterface.Common.Other.HliException
            				' Error reading the file, Maybe the file format is wrong?
               			End Try
            		End If
            	</code>
            </example>	
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Files.DicomFile.Read(System.String,DvtkHighLevelInterface.Dicom.Threads.DicomThread)">
            <summary>
            Reads a file.
            </summary>
            <remarks>
            A new FileMetaInformation and DataSet object will be created inside this object. They will be
            filled with the content of the specified file.
            The FileMetaInformation and DataSet object previously used will not change (they will not be
            used anymore by this object) and can still be used outside this object if needed.
            <br></br><br></br>
            NOTE:<br></br>
            The intention of this method is to use only the definition files loaded in the supplied
            DicomThread.
            The current implementation however uses all already loaded definition files outside this 
            method!
            <br></br><br></br>
            Also see properties UnVrDefinitionLookUpWhenReading and StoreOBOFOWValuesWhenReading.
            <br></br><br></br>
            If something goes wrong while reading the file, an exception is thrown.
            </remarks>
            <param name="fullFileName">The full file name.</param>
            <param name="dicomThread">The DicomThread, from which the definition files to use for determining the attribute names are used.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Files.DicomFile.Read(System.String,Dvtk.Sessions.ScriptSession)">
            <summary>
            Reads a file.
            </summary>
            <remarks>
            A new FileMetaInformation and DataSet object will be created inside this object. They will be
            filled with the content of the specified file.
            The FileMetaInformation and DataSet object previously used will not change (they will not be
            used anymore by this object) and can still be used outside this object if needed.
            
            Also see properties UnVrDefinitionLookUpWhenReading and StoreOBOFOWValuesWhenReading.
            
            If something goes wrong while reading the file, an exception is thrown.
            </remarks>
            <param name="fullFileName">The full file name.</param>
            <param name="dvtkScriptSession">The dvtk ScriptSession, from which the definition files to use for determining the attribute names are used.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Files.DicomFile.Set(DvtkData.Dimse.Tag,DvtkData.Dimse.VR,System.Object[])">
            <summary>
            Adds a single attribute with the tag, VR and values specified.
            </summary>
            <remarks>
            Depending on the group number of the tag, the attribute
            is set in the FileMetaInformation or DataSet of this instance.
            <br></br><br></br>
            If an attribute already exists with this tag, it is removed first before it is 
            again set.
            </remarks>
            <param name="dvtkDataTag">The tag that uniquely identifies the attribute.</param>
            <param name="vR">The VR of the attribute.</param>
            <param name="parameters">
            The values of the attribute. Do not use the DICOM delimeter '\' directly. Instead use
            multiple parameter arguments for this method when adding a single attribute with multiple values.
            </param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Files.DicomFile.Set(System.String,DvtkData.Dimse.VR,System.Object[])">
            <summary>
            Adds a single attribute with the tag sequence string, VR and values specified.
            </summary>
            <remarks>
            Depending on the group number of the last tag in the tag sequence string, the attribute
            is set in the FileMetaInformation or DataSet of this instance.
            <br></br><br></br>
            If an attribute already exists with this tag sequence string, it is removed first before it is 
            again set.
            <br></br><br></br>
            If sequence items (each with a sequence item index) are specified in the tag sequence string,
            empty sequence items will be added automatically to avoid gaps in the sequence items of sequence
            attributes.
            </remarks>
            <param name="tagSequenceString">The tag sequence string that uniquely identifies the attribute.</param>
            <param name="vR">The VR of the attribute.</param>
            <param name="parameters">
            The values of the attribute. Do not use the DICOM delimeter '\' directly. Instead use
            multiple parameter arguments for this method when adding a single attribute with multiple values.
            </param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Files.DicomFile.Set(DvtkHighLevelInterface.Dicom.Other.TagSequence,DvtkData.Dimse.VR,System.Object[])">
            <summary>
            Adds a single attribute with the tag sequence, VR and values specified.
            </summary>
            <remarks>
            Depending on the group number of the last tag in the tag sequence, the attribute
            is set in the FileMetaInformation or DataSet of this instance.
            <br></br><br></br>
            If an attribute already exists with this tag sequence, it is removed first before it is 
            again set.
            <br></br><br></br>
            If sequence items (each with a sequence item index) are specified in the tag sequence,
            empty sequence items will be added automatically to avoid gaps in the sequence items of sequence
            attributes.
            </remarks>
            <param name="tagSequence">The tag sequence that uniquely identifies the attribute.</param>
            <param name="vR">The VR of the attribute.</param>
            <param name="parameters">
            The values of the attribute. Do not use the DICOM delimeter '\' directly. Instead use
            multiple parameter arguments for this method when adding a single attribute with multiple values.
            </param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Files.DicomFile.Write(System.String)">
            <summary>
            Writes a Dicom file.
            </summary>
            <remarks>
            The group length attribute (0002,0000) will be set with the correct value
            automatically before writing to file begins.
            </remarks>
            <exception cref="T:DvtkHighLevelInterface.Common.Other.HliException">
            Writing to the file fails.
            </exception> 
            <param name="fullFileName">The full file name.</param>
            <example>
            	<b>VB .NET</b>
            	<code>
            		' Example: Read a specified DICOM file and 
            		'write it to back to a DICOM file 
            		
            		Dim myDicomFile As DvtkHighLevelInterface.Dicom.Files.DicomFile
            		
            		If File.Exists("c:\somefile.dcm") Then
            			Try
            				myDicomFile.Read("c:\Somefile.dcm")
              			 	Catch ex As DvtkHighLevelInterface.Common.Other.HliException
            				' Error reading the file, Maybe the file format is wrong?
               			End Try
            			'here is where you can manipulate the file
            			'write the dataset to a file
            			myDicomFile.Write("c:\newfile.dcm")
            		End If
            	</code>
            </example>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Files.DicomFile.AddGroupLength">
            <summary>
            Gets or sets a boolean indicating if group length attributes will be added to the 
            dataset when calling the Write method.
            </summary>
            <remarks>
            Default value is false.
            </remarks>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Files.DicomFile.CreateNewDataSetObjectWhenReading">
            <summary>
            Gets or sets a boolean indicating if a new DataSet instance is created when calling the
            Read method.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Files.DicomFile.DataSet">
            <summary>
            Gets or sets the Data Set.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Files.DicomFile.DvtkDataDicomFile">
            <summary>
            Gets a DvtkData DicomFile instance containing the same Attributes as this instance.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Files.DicomFile.FileMetaInformation">
            <summary>
            Gets or sets the File Meta Information.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Files.DicomFile.StoreOBOFOWValuesWhenReading">
            <summary>
            Gets or sets a boolean indicating if OB, OF and OW values will be available after
            calling the Read method.
            </summary>
            <remarks>
            Default value is true.
            <br></br><br></br>
            Only when set to true, OB, OF and OW values will be stored in .pix files after calling
            the read method.
            </remarks>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Files.DicomFile.Summary">
            <summary>
            Gets a summary of the DicomFile.
            </summary>
            <returns>The summary.</returns>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Files.DicomFile.UnVrDefinitionLookUpWhenReading">
            <summary>
            Gets or sets a boolean indicating if information from loaded definition files will be 
            used to replace VR's UN when calling the Read method.
            </summary>
            <remarks>
            Default value is true.
            </remarks>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.UserInterfaces.HliInternalForm">
            <summary>
            The actual .Net form that is displayed by the HLIForm class.
            <br></br><br></br>
            The form contains two tabs:
            - Activity logging tab.
            - Instructions tab.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.UserInterfaces.HliInternalForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.UserInterfaces.HliInternalForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.UserInterfaces.HliInternalForm.actionQueue">
            <summary>
            A thread-safe queue, for storing the actions until they are performed when the
            timer raises an event.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.UserInterfaces.HliInternalForm.hliForm">
            <summary>
            The HliForm instance that uses this object.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.UserInterfaces.HliInternalForm.threadStateChangeEventHandler">
            <summary>
            Handles the ThreadStateChangeEvent.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.UserInterfaces.HliInternalForm.threadsInThreadState">
            <summary>
            Holds the count of the different ThreadStates of the attached Threads.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.UserInterfaces.HliInternalForm.text">
            <summary>
            When this field is null, the Text property (caption) of this form will display threading information.
            When this field is unequal to null, the text of this field will be displayed.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.UserInterfaces.HliInternalForm.timer">
            <summary>
            Timer that will trigger the actual performing of the actions present in the action queue.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.UserInterfaces.HliInternalForm.#ctor">
            <summary>
            Hide default constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.UserInterfaces.HliInternalForm.#ctor(DvtkHighLevelInterface.Common.UserInterfaces.HliForm)">
            <summary>
            Constructor.
            </summary>
            <param name="hliForm">The HLIForm instance that uses this internal form.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.UserInterfaces.HliInternalForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.UserInterfaces.HliInternalForm.Attach(DvtkHighLevelInterface.Common.Threads.Thread)">
            <summary>
            Attach to a Thread.
            <br></br><br></br>
            By doing so, this object may react to information, warning and error output events
            from the Thread.
            <br></br><br></br>
            Threads may not be already started when attaching.
            </summary>
            <param name="thread">The Thread to attach to.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.UserInterfaces.HliInternalForm.buttonStop_Click(System.Object,System.EventArgs)">
            <summary>
            Method is called when the Stop button is pressed.
            <br></br><br></br>
            When attached Threads are still running, these Threads are stopped.
            When no attached Threads are running, the form is closed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.UserInterfaces.HliInternalForm.HandleThreadStateChangeEvent(DvtkHighLevelInterface.Common.Threads.Thread,DvtkHighLevelInterface.Common.Threads.ThreadState,DvtkHighLevelInterface.Common.Threads.ThreadState)">
            <summary>
            Handles the ThreadStateChangeEvent by adding a ThreadStateChangeAction to the action queue.
            Wheneven the timer triggeres an event, the action will actually be handled by updating the caption of this Form.
            </summary>
            <param name="thread">The Thread.</param>
            <param name="oldThreadState">The old ThreadState.</param>
            <param name="newThreadState">The new ThreadState.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.UserInterfaces.HliInternalForm.PerformActions(System.Object,System.EventArgs)">
            <summary>
            Perform the actions that are stored in the action stack.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.UserInterfaces.HliInternalForm.ActionQueue">
            <summary>
            Get the queue in which actions may be stored that will be executed at certain intervals. 
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.UserInterfaces.HliInternalForm.Interval">
            <summary>
            The time to wait before performing all the newly added actions in the action queue after
            the previously performed actions.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.UserInterfaces.HliInternalForm.UserControlActivityLogging">
            <summary>
            Gets the activity logging user control.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Other.CompareResults">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.CompareResults.#ctor(System.Int32)">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            </summary>
            <param name="numberOfColumns">-</param>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Other.CompareResults.DifferencesCount">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Other.CompareResults.Table">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Compare.DicomAttributeCollection">
            <summary>
            Class representing a collection of Dicom attributes
            in combination with some possible validation flags.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.DicomAttributeCollection.attributeSetOnly">
            <summary>
            See property AttributeSetOnly.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.DicomAttributeCollection.#ctor">
            <summary>
            Hide default constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.DicomAttributeCollection.#ctor(DvtkHighLevelInterface.Dicom.Other.AttributeSet)">
            <summary>
            Constructor.
            </summary>
            <param name="attributeSetOnly">The actual collection of Dicom Attributes.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.DicomAttributeCollection.#ctor(DvtkHighLevelInterface.Dicom.Other.AttributeSet,DvtkHighLevelInterface.Common.Compare.FlagsDicomAttribute)">
            <summary>
            Constructor.
            </summary>
            <param name="attributeSetOnly">The actual collection of Dicom Attributes.</param>
            <param name="flagsDicomAttribute">The flags used for this collection.</param>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Compare.DicomAttributeCollection.AttributeSetOnly">
            <summary>
            Property to get the actual Dicom Attribute Set.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Other.DicomAttributeToValidate">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            <br></br>
            Summary description for DicomAttributeToCompare.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Other.DicomAttributeToValidate.ValidationRuleDicomAttribute">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Other.DicomAttributeToValidate.Attribute">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Other.DicomAttributeToValidate.Display">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            <br></br>
            Indicates if the information for this attribute should be displayed.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Other.GenericPair`2">
            <summary>
            Represents an ordered pair of elements.
            </summary>
            <typeparam name="T1">The type of the first element of this pair.</typeparam>
            <typeparam name="T2">The type of the second element of this pair.</typeparam>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.GenericPair`2.element1">
            <summary>
            See property Element1.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.GenericPair`2.element2">
            <summary>
            See property Element2.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.GenericPair`2.#ctor">
            <summary>
            Hide default constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.GenericPair`2.#ctor(`0,`1)">
            <summary>
            Constructor.
            </summary>
            <param name="element1">The first element of this pair.</param>
            <param name="element2">The second element of this pair.</param>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Other.GenericPair`2.Element1">
            <summary>
            The first element of this pair.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Other.GenericPair`2.Element2">
            <summary>
            The second element of this pair.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Compare.ValidationRuleDicomAttribute">
            <summary>
            Specifies how a Dicom attribute should be validated.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.ValidationRuleDicomAttribute.displayFullTagSequenceString">
            <summary>
            See property DisplayFullTagSequenceString.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.ValidationRuleDicomAttribute.empty">
            <summary>
            See static property Empty.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.ValidationRuleDicomAttribute.tagSequenceString">
            <summary>
            See property TagSequenceString.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.ValidationRuleDicomAttribute.#ctor">
            <summary>
            Default constructor.
            </summary>
            <remarks><b>Do not use this constructor. It may only be used indirectly for serialization purposes.</b></remarks>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.ValidationRuleDicomAttribute.#ctor(System.String,DvtkHighLevelInterface.Common.Compare.FlagsDicomAttribute)">
            <summary>
            Constructor.
            </summary>
            <param name="tagSequenceString">TagSequenceString indicating the Dicom attribute to validate.</param>
            <param name="flagsDicomAttribute">The flag(s) indicating how to validate this Dicom Attribute.</param>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Compare.ValidationRuleDicomAttribute.DisplayFullTagSequenceString">
            <summary>
            Indicates if the full TagSequence String should be displayed or only the tag.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Compare.ValidationRuleDicomAttribute.TagSequenceString">
            <summary>
            The TagSequence String 
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.InformationModel.QueryRetrieveStudyRootInformationModel">
            <summary>
            Summary description for QueryRetrieveStudyRootInformationModel.
            Provides a wrapper class around the Dvtk.Dicom.InformationEntity.QueryRetrieve.StudyRootInformationModel class.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.QueryRetrieveStudyRootInformationModel.#ctor">
            <summary>
            Class constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.QueryRetrieveStudyRootInformationModel.IsInstanceInInformationModel(System.String,System.String)">
            <summary>
            Check if the given instance is present in the Information Model. The instance will be at the leaf nodes of the Information Model.
            </summary>
            <param name="sopClassUid">SOP Class UID to search for.</param>
            <param name="sopInstanceUid">SOP Instance UID to search for.</param>
            <returns>Boolean - true if instance found in the Information Model, otherwise false.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.QueryRetrieveStudyRootInformationModel.RetrieveInformationModel(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            Retrieve data from the Information Model using the given retrieve message.
            </summary>
            <param name="retrieveMessage">Message used to retrieve the Information Model.</param>
            <returns>File list - containing the filenames of all instances matching the retrieve dataset attributes.</returns>
        </member>
        <member name="T:DvtkHighLevelInterface.InformationModel.QueryRetrieveInformationModelEnum">
            <summary>
            All possible query retrieve information models.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.InformationModel.QueryRetrieveInformationModelEnum.PatientRootQueryRetrieveInformationModel">
            <summary>
            Patient Root Query Retrieve Information Model.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.InformationModel.QueryRetrieveInformationModelEnum.StudyRootQueryRetrieveInformationModel">
            <summary>
            Study Root Query Retrieve Information Model.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.InformationModel.QueryRetrieveInformationModelEnum.PatientStudyOnlyQueryRetrieveInformationModel">
            <summary>
            Patient Study Only Query Retrieve Information Model.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.InformationModel.QueryRetrieveInformationModelEnum.Unknown">
            <summary>
            Unknown Information Model.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.InformationModel.QueryRetrieveLevelEnum">
            <summary>
            Enumerates all different query retrieve levels.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.InformationModel.QueryRetrieveLevelEnum.PatientQueryRetrieveLevel">
            <summary>
            Patient Query Retrieve Level.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.InformationModel.QueryRetrieveLevelEnum.StudyQueryRetrieveLevel">
            <summary>
            Study Query Retrieve Level.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.InformationModel.QueryRetrieveLevelEnum.SeriesQueryRetrieveLevel">
            <summary>
            Series Query Retrieve Level.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.InformationModel.QueryRetrieveLevelEnum.InstanceQueryRetrieveLevel">
            <summary>
            Instance Query Retrieve Level.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.InformationModel.QueryRetrieveLevelEnum.Unknown">
            <summary>
            Unknown Query Retrieve Level.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.InformationModel.GenerateTriggers">
            <summary>
            Summary description for GenerateTriggers.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.GenerateTriggers.MakeModalityWorklistItem(Dvtk.Dicom.InformationEntity.DefaultValues.DefaultValueManager,DvtkData.Dimse.TagValueCollection)">
            <summary>
            Generate a Modality Worklist Item from the user defined tags provided and
            the Default Value Manager.
            </summary>
            <param name="defaultValueManager">Default Value Manager.</param>
            <param name="userDefinedTags">User defined Tags.</param>
            <returns>CFind Modality Worklist Response message.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.GenerateTriggers.MakeCFindModalityWorklist(DvtkData.Dimse.TagValueCollection)">
            <summary>
            Generate a CFind Modality Worklist Query trigger from the given queryTags.
            All other return keys are taken from the supported return key attributes
            in the Worklist Information Model.
            </summary>
            <param name="queryTags">List of Query Tags.</param>
            <returns>CFind Modality Worklist Query trigger.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.GenerateTriggers.MakeCFindModalityWorklist(System.String,System.String)">
            <summary>
            Generate a CFind Modality Worklist Query trigger by reading the query
            dataset from the given mwlQueryDcmFilename. If the scheduledProcedureStepStartDate
            is defined (not string empty) then if a value for this attribute is present in the
            read datset it will be overwritten by the scheduledProcedureStepStartDate value.
            </summary>
            <param name="mwlQueryDcmFilename">DCM file containing the MWL Query Dataset.</param>
            <param name="scheduledProcedureStepStartDate">Optional (not sting empty) start date to overwrite dataset value.</param>
            <returns>CFind Modality Worklist Query trigger.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.GenerateTriggers.MakeMppsInProgress(Dvtk.Dicom.InformationEntity.DefaultValues.DefaultValueManager,DvtkHighLevelInterface.Dicom.Messages.DicomMessage,System.String)">
            <summary>
            Generate an N-CREATE/N-SET MPPS IN-PROGRESS trigger from the default value manager.
            Use the given mppsInstanceUid.
            </summary>
            <param name="defaultValueManager">Default Value Manager.</param>
            <param name="mppsInProgressMessage">Mpps In-Progress message.</param>
            <param name="mppsInstanceUid">Mpps Instance UID.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.GenerateTriggers.MakeMppsInProgress(System.String,Dvtk.Dicom.InformationEntity.DefaultValues.DefaultValueManager,DvtkHighLevelInterface.Dicom.Messages.DicomMessage,System.String)">
            <summary>
            Generate an N-CREATE/N-SET MPPS IN-PROGRESS trigger from the given mppsInProgressDcmFilename.
            Use the given mppsInstanceUid.
            </summary>
            <param name="mppsInProgressDcmFilename"></param>
            <param name="defaultValueManager">Default Value Manager.</param>
            <param name="mppsInProgressMessage">Mpps In-Progress message.</param>
            <param name="mppsInstanceUid">Mpps Instance UID.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.GenerateTriggers.MakeNSetMppsCompletedDiscontinued(Dvtk.Dicom.InformationEntity.DefaultValues.DefaultValueManager,DvtkHighLevelInterface.InformationModel.ReferencedSopItemCollection,DvtkHighLevelInterface.Dicom.Messages.DicomMessage,System.String,System.String)">
            <summary>
            Generate an NSet MPPS Completed/Discontinued by taking the default values from the Default
            Value Manager.
            </summary>
            <param name="defaultValueManager">Used to get the default values.</param>
            <param name="storageCommitItems">Corresponding Storage Commitment items.</param>
            <param name="mppsCompletedDiscontinuedMessage">MPPS Completed/Discontinued message being populated.</param>
            <param name="mppsInstanceUid">MPPS Instance UID.</param>
            <param name="mppsStatus"></param>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.GenerateTriggers.MakeNSetMppsCompletedDiscontinued(System.String,Dvtk.Dicom.InformationEntity.DefaultValues.DefaultValueManager,DvtkHighLevelInterface.InformationModel.ReferencedSopItemCollection,DvtkHighLevelInterface.Dicom.Messages.DicomMessage,System.String)">
            <summary>
            Generate an NSet MPPS Completed/Discontinued by taking the default values from the given
            DCM file. The default manager is required to get the appropriate Series Instance UID.
            </summary>
            <param name="mppsCompletedDiscontinuedDcmFilename">Used to get the dataset default values.</param>
            <param name="defaultValueManager">For the Series Instance UID.</param>
            <param name="storageCommitItems">Corresponding Storage Commitment items.</param>
            <param name="mppsCompletedDiscontinuedMessage">MPPS Completed/Discontinued message being populated.</param>
            <param name="mppsInstanceUid">MPPS Instance UID.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.GenerateTriggers.MakeCStoreInstance(Dvtk.Dicom.InformationEntity.DefaultValues.DefaultValueManager,DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            Make a C-STORE instance.
            </summary>
            <param name="defaultValueManager">The default value manager.</param>
            <param name="storeInstanceMessage">The C-STORE message instance.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.GenerateTriggers.MakeCStoreInstance(Dvtk.Dicom.InformationEntity.DefaultValues.DefaultValueManager,DvtkHighLevelInterface.Dicom.Messages.DicomMessage,DvtkData.Dimse.DataSet)">
            <summary>
            Make a C-STORE instance.
            </summary>
            <param name="defaultValueManager">The default value manager.</param>
            <param name="storeInstanceMessage">The C-STORE message instance.</param>
            <param name="dataset">The dataset.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.GenerateTriggers.HandleCStoreResponses(DvtkHighLevelInterface.InformationModel.ReferencedSopItemCollection,DvtkHighLevelInterface.Dicom.Messages.DicomMessageCollection)">
            <summary>
            Handle C-STORE responses.
            </summary>
            <param name="storageCommitItems">The storage commitment items.</param>
            <param name="cStoreResponses">The C-STORE responses.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.GenerateTriggers.MakeStorageCommitEvent(DvtkHighLevelInterface.InformationModel.QueryRetrieveInformationModels,DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            Cretae a storage commitment event.
            </summary>
            <param name="informationModels">The information models.</param>
            <param name="actionMessage">The action message.</param>
            <returns>The created event.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.GenerateTriggers.HandleNEventReportStorageCommitment(DvtkHighLevelInterface.InformationModel.ReferencedSopItemCollection,DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            Handle N-EVENT-REPORT for storage commitment.
            </summary>
            <param name="storageCommitItems">The storage commitment items.</param>
            <param name="storageCommitmentMessage">The storage commitment message.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.GenerateTriggers.MakeNActionStorageCommitment(DvtkHighLevelInterface.InformationModel.ReferencedSopItemCollection,DvtkHighLevelInterface.Dicom.Messages.DicomMessage,System.String,System.String)">
            <summary>
            Make a N-ACTION storage commitment.
            </summary>
            <param name="storageCommitItems">The storage commitment items.</param>
            <param name="storageCommitmentMessage">The storage commitment message.</param>
            <param name="storageCommitTransactionUid">The storage commitment transaction UID.</param>
            <param name="mppsInstanceUid">The MPPS instance UID.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.GenerateTriggers.MakeCFindQuery(DvtkHighLevelInterface.InformationModel.QueryRetrieveInformationModelEnum,DvtkData.Dimse.TagValueCollection)">
            <summary>
            Make C-FIND query.
            </summary>
            <param name="informationModel">The information model.</param>
            <param name="queryTags">The query tags.</param>
            <returns>The create C-FIND message.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.GenerateTriggers.MakeCMoveRetrieve(DvtkHighLevelInterface.InformationModel.QueryRetrieveInformationModelEnum,System.String,DvtkData.Dimse.TagValueCollection)">
            <summary>
            Create C-Move retrieve.
            </summary>
            <param name="informationModel">The information model.</param>
            <param name="moveDestination">The move destination.</param>
            <param name="retrieveTags">The retrieve tags.</param>
            <returns>teh C-MOVE message.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.GenerateTriggers.GetValueFromMessageUsingTag(DvtkHighLevelInterface.Dicom.Messages.DicomMessage,DvtkData.Dimse.Tag,DvtkData.Dimse.Tag)">
            <summary>
            Get the value from the message.
            </summary>
            <param name="dicomMessage">The DICOM message.</param>
            <param name="sequenceTag">The sequence tag.</param>
            <param name="tag">The tag.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.GenerateTriggers.GetValueFromMessageUsingTag(DvtkHighLevelInterface.Dicom.Messages.DicomMessage,DvtkData.Dimse.Tag)">
            <summary>
            Get value from a DICOM message.
            </summary>
            <param name="dicomMessage">The DICOM message.</param>
            <param name="tag">The tag.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:DvtkHighLevelInterface.Dicom.Other.DicomProtocolMessageSendException">
            <summary>
            The exception that is thrown when sending of a Dicom protocol message fails.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.Other.DicomProtocolMessageSendException.sendReturnCode">
            <summary>
            See property SendReturnCode.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.DicomProtocolMessageSendException.#ctor(System.String,Dvtk.Sessions.SendReturnCode)">
            <summary>
            Constructor.
            </summary>
            <param name="exceptionText">The exception text.</param>
            <param name="sendReturnCode">The send return code indicating the reason for the exception.</param>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.DicomProtocolMessageSendException.SendReturnCode">
            <summary>
            Gets the send return code indicating the reason for the exception.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Dicom.Other.DataSet">
            <summary>
            Represents a Dicom Data Set.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.Other.DataSet.storeOBOFOWValuesWhenReading">
            <summary>
            See property StoreOBOFOWValuesWhenReading
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.Other.DataSet.unVrDefinitionLookUpWhenReading">
            <summary>
            See property UnVrDefinitionLookUpWhenReading.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.DataSet.#ctor">
            <summary>
            Default Constructor. Creates an empty Data Set.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.DataSet.#ctor(DvtkData.Dimse.DataSet)">
            <summary>
            Constructor. Encapsulates a DvtkData.Dimse.AttributeSet instance.
            </summary>
            <param name="dvtkDataDataSet">The DvtkData.Dimse.DataSet instance to encapsulate.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.DataSet.Clone">
            <summary>
            Creates a deep copy of this instance.
            </summary>
            <returns>A deep copy of this instance.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.DataSet.CloneFrom(DvtkHighLevelInterface.Dicom.Other.DataSet)">
            <summary>
            Makes this instance a deep copy of <paramref name="dataSet"/>.
            </summary>
            <param name="dataSet">The Data Set to copy from.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.DataSet.Read(System.String,System.String[])">
            <summary>
            Reads a Dicom File or Data Set file.
            </summary>
            <remarks>
            The previous attributes of this instance will be removed.
            <br></br><br></br>
            NOTE:
            The intention of this method is to use only the supplied definition files.
            The current implementation however uses all already loaded definition files outside this 
            method and the supplied definition files!<br></br><br></br>
            <br></br><br></br>
            Also see properties UnVrDefinitionLookUpWhenReading and StoreOBOFOWValuesWhenReading.
            <br></br><br></br>
            If something goes wrong while reading the file, an exception is thrown.
            </remarks>
            <param name="fullFileName">The full file name.</param>
            <param name="definitionFilesFullName">The definition files to use for determining the attribute names.</param>
            <example>
            	<b>VB .NET</b>
            	<code>
            		'Example: Read the dataset from a specified DICOM file
            		
            		Dim myDataSet As DvtkHighLevelInterface.Dicom.Other.DataSet
            		
            		If File.Exists("") Then
            			Try
            				myDataSet.Read("c:\Somefile.dcm")
              			 	Catch ex As DvtkHighLevelInterface.Common.Other.HliException
            				' Error reading the file, Maybe the file format is wrong?
               			End Try
            		End If
            	</code>
            </example>		
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.DataSet.Read(System.String,DvtkHighLevelInterface.Dicom.Threads.DicomThread)">
            <summary>
            Reads a Dicom File or Data Set file.
            </summary>
            <remarks>
            The previous attributes of this instance will be removed.
            <br></br><br></br>
            NOTE:<br></br>
            The intention of this method is to use only the definition files loaded in the supplied
            DicomThread. The current implementation however uses all already loaded definition files outside this 
            method!
            <br></br><br></br>
            Also see properties UnVrDefinitionLookUpWhenReading and StoreOBOFOWValuesWhenReading.
            <br></br><br></br>
            If something goes wrong while reading the file, an exception is thrown.
            </remarks>
            <param name="fullFileName">The full file name.</param>
            <param name="dicomThread">The DicomThread, from which the definition files to use for determining the attribute names are used.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.DataSet.Set(DvtkData.Dimse.Tag,DvtkData.Dimse.VR,System.Byte[])">
            <summary>
            Adds a single attribute with the tag, VR and value specified.
            </summary>
            <remarks>
            Only use this method for setting an attribute with VR OB, OF or OW.
            <br></br><br></br>
            If an attribute already exists with this tag, it is removed first before it is again
            added.
            </remarks>
            <param name="dvtkDataTag">The tag of the attribute.</param>
            <param name="vR">The VR (may only be OB, OF or OW) of the attribute.</param>
            <param name="value">The value of the attribute.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="dvtkDataTag"/> is not valid for setting a DataSet attribute.<br></br>
            -or-<br></br>
            <paramref name="vR"/> is unequal to OB, OF or OW.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is a null reference.
            </exception>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.DataSet.Set(DvtkData.Dimse.Tag,DvtkData.Dimse.VR,System.Object[])">
            <summary>
            Adds a single attribute with the tag, VR and values specified.
            </summary>
            <remarks>
            If an attribute already exists with this tag, it is removed first before it is again
            added.
            </remarks>
            <param name="dvtkDataTag">The tag of the attribute.</param>
            <param name="vR">The VR of the attribute.</param>
            <param name="values">
            The values of the attribute. Do not use the DICOM delimeter '\' directly. Instead supply
            multiple values arguments for this method when adding a single attribute with multiple values.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="dvtkDataTag"/> is not valid for setting a DataSet attribute.<br></br>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="values"/> is a null reference.
            </exception>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.DataSet.Set(DvtkData.Dimse.Tag,DvtkData.Dimse.VR,DvtkHighLevelInterface.Dicom.Other.Values)">
            <summary>
            Adds a single attribute with the tag, VR and values specified.
            </summary>
            <remarks>
            If an attribute already exists with this tag, it is removed first before it is again
            added.
            </remarks>
            <param name="dvtkDataTag">The tag of the attribute.</param>
            <param name="vR">The VR of the attribute.</param>
            <param name="values">The values, which will be copied from another attribute, for this attribute.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="dvtkDataTag"/> is not valid for setting a DataSet attribute.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="values"/> is a null reference.
            </exception>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.DataSet.Set(System.String,DvtkData.Dimse.VR,System.Byte[])">
            <summary>
            Adds a single attribute with the tag sequence, VR and value specified.
            </summary>
            <remarks>
            Only use this method for setting an attribute with VR OB, OF or OW.
            <br></br><br></br>
            If an attribute already exists with this tag, it is removed first before it is again
            added.
            <br></br><br></br>
            If sequence items (each with a sequence item index) are specified in the tag sequence,
            empty sequence items will be added automatically to avoid gaps in the sequence items of sequence
            attributes.
            </remarks>
            <param name="tagSequence">The tag sequence of the attribute.</param>
            <param name="vR">The VR (may only be OB, OF or OW) of the attribute.</param>
            <param name="value">The value of the attribute.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="dvtkDataTag"/> is not valid for setting an attribute.<br></br>
            -or-<br></br>
            <paramref name="dvtkDataTag"/> is not valid for setting a DataSet attribute.<br></br>
            -or-<br></br>
            <paramref name="vR"/> is unequal to OB, OF or OW.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is a null reference.
            </exception>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.DataSet.Set(System.String,DvtkData.Dimse.VR,System.Object[])">
            <summary>
            Adds a single attribute with the tag sequence, VR and values specified.
            </summary>
            <remarks>
            If an attribute already exists with this tag, it is removed first before it is again
            added.
            <br></br><br></br>
            If sequence items (each with a sequence item index) are specified in the tag sequence,
            empty sequence items will be added automatically to avoid gaps in the sequence items of sequence
            attributes.
            </remarks>
            <param name="tagSequence">The tag sequence of the attribute.</param>
            <param name="vR">The VR of the attribute.</param>
            <param name="values">
            The values of the attribute. Do not use the DICOM delimeter '\' directly. Instead supply
            multiple values arguments for this method when adding a single attribute with multiple values.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="dvtkDataTag"/> is not valid for setting an attribute.<br></br>
            -or-<br></br>
            <paramref name="dvtkDataTag"/> is not valid for setting a DataSet attribute.<br></br>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="values"/> is a null reference.
            </exception>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.DataSet.Set(System.String,DvtkData.Dimse.VR,DvtkHighLevelInterface.Dicom.Other.Values)">
            <summary>
            Adds a single attribute with the tag sequence, VR and values specified.
            </summary>
            <remarks>
            If an attribute already exists with this tag, it is removed first before it is again
            added.
            <br></br><br></br>
            If sequence items (each with a sequence item index) are specified in the tag sequence,
            empty sequence items will be added automatically to avoid gaps in the sequence items of sequence
            attributes.
            </remarks>
            <param name="tagSequence">The tag sequence of the attribute.</param>
            <param name="vR">The VR of the attribute.</param>
            <param name="values">The values, which will be copied from another attribute, for this attribute.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="dvtkDataTag"/> is not valid for setting an attribute.<br></br>
            -or-<br></br>
            <paramref name="dvtkDataTag"/> is not valid for setting a DataSet attribute.<br></br>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="values"/> is a null reference.
            </exception>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.DataSet.Write(System.String)">
            <summary>
            Writes all attributes of this instance to a Data Set file. 
            </summary>
            <param name="fullFileName">The full file name.</param>
            <example>
            	<b>VB .NET</b>
            	<code>
            		' Example: Read the dataset from a specified DICOM file and 
            		'write it to a DataSet file (no FileMetaInformation written).
            		
            		Dim myDataSet As DvtkHighLevelInterface.Dicom.Other.DataSet
            		
            		If File.Exists("c:\somefile.dcm") Then
            			Try
            				myDataSet.Read("c:\Somefile.dcm")
              			 	Catch ex As DvtkHighLevelInterface.Common.Other.HliException
            				' Error reading the file, Maybe the file format is wrong?
               			End Try
            			'here is where you can manipulate the dataset
            			'write the dataset to a file
            			myDataSet.Write("c:\newfile.dcm")
            		End If
            	</code>
            </example>
            <remarks>
            No File Meta Information will be written. If this is needed, consider using the class
            DicomFile.<br></br><br></br>
            
            If something goes wrong while writing the file, an exception is thrown.<br></br><br></br>
            
            The following transfer syntax will be used: "1.2.840.10008.1.2.1" (Explicit VR Little Endian).
            I you want to use another transfer syntax then use the Write(fullFileName as String, transferSyntax as String)
            method.
            </remarks>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.DataSet.Write(System.String,System.String)">
            <summary>
            Writes all attributes of this instance to a Data Set file.
            </summary>
            <param name="fullFileName">The full file name.</param>
            <param name="transferSyntax">The transfer syntax.</param>
            <example>
            	<b>VB .NET</b>
            	<code>
            		' Example: Read the dataset from a specified DICOM file and 
            		'write it to a DataSet file (no FileMetaInformation written) 
            		'with a specified transfersyntax.
            		
            		Dim myDataSet As DvtkHighLevelInterface.Dicom.Other.DataSet
            		
            		If File.Exists("c:\somefile.dcm") Then
            			Try
            				myDataSet.Read("c:\Somefile.dcm")
              			 	Catch ex As DvtkHighLevelInterface.Common.Other.HliException
            				' Error reading the file, Maybe the file format is wrong?
               			End Try
            			'here is where you can manipulate the dataset
            			'write the dataset to a file
            			myDataSet.Write("c:\newfile.dcm","1.2.840.10008.1.2.1")
            		End If
            	</code>
            </example>
            <remarks>
            No File Meta Information will be written. If this is needed, consider using the class
            DicomFile.<br></br><br></br>
            
            If something goes wrong while writing the file, an exception is thrown.
            </remarks>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.DataSet.DvtkDataDataSet">
            <summary>
            Gets or sets the encapsulated DvtkData.Dimse.DataSet instance.
            </summary>
            <remarks>
            <b>Avoid using this property if possible because it reveals the
            internal structure of this class!</b>
            </remarks>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.DataSet.IodId">
            <summary>
            Gets the IOD of this instance.
            </summary>
            <remarks>
            This property may be used in combination with the DVTk Validation functionality.
            </remarks>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.DataSet.StoreOBOFOWValuesWhenReading">
            <summary>
            Gets or sets a boolean indicating if OB, OF and OW values will be available after
            calling the Read method.
            </summary>
            <remarks>
            Default value is true.<br></br><br></br>
            
            Only when set to true, OB, OF and OW values will be stored in .pix files after calling
            the read method.
            </remarks>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.DataSet.UnVrDefinitionLookUpWhenReading">
            <summary>
            Gets or sets a boolean indicating if information from loaded definition files will be 
            used to replace VR's UN when calling the Read method.
            </summary>
            <remarks>
            Default value is true.
            </remarks>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Threads.ThreadManager">
            <summary>
            The ThreadManager holds the overview of a collection of Threads, some of which are directly
            linked to the ThreadManager as the childThreads, other that are indirectly linked. Each Thread
            must directly or indirectly be linked to an instance of a ThreadManager.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Threads.ThreadManager.childThreads">
            <summary>
            See property ChildThreads.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Threads.ThreadManager.messages">
            <summary>
            All messages that have been send or received by the Threads contained in this ThreadManager. 
            When needed, messages may be removed using the RemoveMessage or ClearMessages methods.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Threads.ThreadManager.messageLock">
            <summary>
            See property MessageLock.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Threads.ThreadManager.threadManagerLock">
            <summary>
            See property ThreadManagerLock.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Threads.ThreadManager.threads">
            <summary>
            See property Threads.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Threads.ThreadManager.threadStatesCount">
            <summary>
            Contains for each ThreadState the number of Threads in that state.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Threads.ThreadManager.#ctor">
            <summary>
            Default coonstructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Threads.ThreadManager.AddChildThread(DvtkHighLevelInterface.Common.Threads.Thread)">
            <summary>
            Add a child Thread to this ThreadManager.
            May only be called from one of the Thread.Initialize methods.
            </summary>
            <param name="thread">The Thread to add.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Threads.ThreadManager.AddMessage(DvtkHighLevelInterface.Common.Messages.Message)">
            <summary>
            This method must be called when a message is received or send by a Thread contained
            in this ThreadManager.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Threads.ThreadManager.AddThread(DvtkHighLevelInterface.Common.Threads.Thread)">
            <summary>
            Add a Thread to this ThreadManager.
            May only be called from one of the Thread.Initialize methods.
            </summary>
            <param name="thread">The Thread to add.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Threads.ThreadManager.GetUniqueIdentifier(DvtkHighLevelInterface.Common.Threads.Thread)">
            <summary>
            Use this method to determine a unique Identifier for a Thread, when the
            Identifier has not been explicitly set. Uniqueness can only be guaranteed
            for the Identifier returned for the Threads managed by this ThreadManager.
            </summary>
            <param name="thread">The Thread for which to create a unique identifier.</param>
            <returns>The unique identifier.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Threads.ThreadManager.IdentifierExists(System.String)">
            <summary>
            Returns a boolean indicating if the supplied Identifier is unique.
            </summary>
            <param name="identifier">The Identifier.</param>
            <returns>Indicates if it is unique.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Threads.ThreadManager.RemoveMessage(DvtkHighLevelInterface.Common.Messages.Message)">
            <summary>
            Remove a message fro the list maintained by the ThreadManager. This method may only
            be called from a Thread (descendant) class.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Threads.ThreadManager.Stop">
            <summary>
            Stop all Threads that are managed by this ThreadManager.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Threads.ThreadManager.ThreadStateChanged(DvtkHighLevelInterface.Common.Threads.ThreadState,DvtkHighLevelInterface.Common.Threads.ThreadState)">
            <summary>
            This method may only be called from the Thread class. It method call
            signals that the ThreadState of the supplied Thread has changed.
            </summary>
            <param name="oldThreadState">The old ThreadState.</param>
            <param name="newThreadState">The new ThreadState.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Threads.ThreadManager.WaitForCompletionThreads">
            <summary>
            Wait until all child Threads are either unstarted or stopped.
            </summary>
        </member>
        <member name="E:DvtkHighLevelInterface.Common.Threads.ThreadManager.ThreadsStateChangeEvent">
            <summary>
            Event is fired when the state of one of the Threads managed by this ThreadManager changes.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Threads.ThreadManager.ChildThreads">
            <summary>
            Get the collection of child Threads.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Threads.ThreadManager.MessageLock">
            <summary>
            Use this lock when accessing the messages of the ThreadManager and Thread.
            Do this access in one step.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Threads.ThreadManager.Messages">
            <summary>
            Get a copy of the list of received and send messages of the contained Threads. 
            Note that received and send messages may have been removed from this list using the
            RemoveMessage or ClearMessages methods of the contained Threads.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Threads.ThreadManager.ThreadManagerLock">
            <summary>
            Always use this lock in the ThreadManager and Thread (descendant) classes
            for the complete set of access to:
            - Thread State changes of Threads of this ThreadManager.
            - Childs of a Thread.
            - Childs of the ThreadManager.
            - Threads of the ThreadManager.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Threads.ThreadManager.Threads">
            <summary>
            Get the collection of all Threads managed by this ThreadManager.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Threads.ThreadManager.ThreadsStateChangeEventHandler">
            <summary>
            The delegate used for the ThreadsStateChangeEvent.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Other.ValidationRuleList">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.ValidationRuleList.#ctor">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Other.DicomAttributeFlags">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.DicomAttributeFlags.None">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.DicomAttributeFlags.Present">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.DicomAttributeFlags.Not_present">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.DicomAttributeFlags.Values">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.DicomAttributeFlags.No_values">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.DicomAttributeFlags.Include_sequence_items">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Other.CompareBase">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            <br></br>
            This class contains the shared functionality for doing a static and dynamic compare of
            multiple datasets.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.CompareBase.BACKGROUND_GREY">
            <summary>
            Grey color.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.CompareBase.BACKGROUND_RED">
            <summary>
            Red color.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.CompareBase.PIXEL_WIDTH_NAME">
            <summary>
            Width of a name column in pixels.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.CompareBase.PIXEL_WIDTH_PRESENT">
            <summary>
            Width of a present column in pixels.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.CompareBase.PIXEL_WIDTH_TAG">
            <summary>
            Width of a tag column in pixels.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.CompareBase.PIXEL_WIDTH_VALUES">
            <summary>
            Width of a values column in pixels.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.CompareBase.PIXEL_WIDTH_VR">
            <summary>
            Width of a VR column in pixels.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.CompareBase.columnIndexAttributeName">
            <summary>
            If displayed, contains the table column index of the name column for an attribute.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.CompareBase.columnIndexAttributePresent">
            <summary>
            If displayed, contains the table column index of the present column for an attribute.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.CompareBase.columnIndexAttributeTag">
            <summary>
            If displayed, contains the table column index of the tag column for an attribute.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.CompareBase.columnIndexAttributeValues">
            <summary>
            If displayed, contains the table column index of the values column for an attribute.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.CompareBase.columnIndexAttributeVR">
            <summary>
            If displayed, contains the table column index of the VR column for an attribute.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.CompareBase.columnIndexCommonName">
            <summary>
            If displayed, contains the table column index of the common name column.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.CompareBase.columnIndexCommonTag">
            <summary>
            If displayed, contains the table column index of the common tag column.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.CompareBase.columnIndexCommonVR">
            <summary>
            If displayed, contains the table column index of the common VR column.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.CompareBase.differenceFound">
            <summary>
            Indicates if a difference has been found that has not been added to the difference total.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.CompareBase.#ctor">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            <br></br>
            Default constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.CompareBase.AddCommonInformationForBeginOrEndSequenceItems(System.Int32,System.Boolean,System.Int32)">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            <br></br>
            Add the common information for the begin or end of a sequence item.
            Do this only for those columns that should be displayed.
            </summary>
            <param name="oneBasedLevel">The nested level.</param>
            <param name="isBeginItem">If true, this is the begin item. If false, this is the end item.</param>
            <param name="oneBasedSequenceItemIndex">The sequence item index.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.CompareBase.GetNameCellTextForBeginOrEndItem(System.Int32)">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            <br></br>
            Get the text for the name cell for a begin or end item.
            </summary>
            <param name="oneBasedSequenceItemIndex">One based seuqnece item index.</param>
            <returns>The text for the name cell.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.CompareBase.GetTagCellTextForBeginOrEndItem(System.Int32,System.Boolean)">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            <br></br>
            Get the text for the tag cell for a begin or end item.
            </summary>
            <param name="oneBasedLevel">The zero based nested level.</param>
            <param name="isBeginItem">Indicates if this is the begin or end of an item.</param>
            <returns>The text for the tag cell.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.CompareBase.AddAttributeInformationForAttribute(DvtkHighLevelInterface.Common.Other.DicomAttributesToValidate,System.Int32)">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            </summary>
            <param name="dicomAttributesToValidate">-</param>
            <param name="zeroBasedIndex">-</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.CompareBase.NewRow">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            <br></br>
            Add a new row to the CompareResults table and check if the DifferenceCount needs
            to be increased.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.CompareBase.AddAttributeInformationForBeginOrEndSequenceItem(DvtkHighLevelInterface.Common.Other.DicomAttributesToValidate,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.CompareBase.AddAttributeSetsInformationUsingDynamicCompare(System.Collections.ArrayList,System.Collections.ArrayList)">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            </summary>
            <param name="attributeSets">-</param>
            <param name="validationRuleLists">-</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.CompareBase.AddAttributeSetsInformationUsingStaticCompare(System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList)">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            </summary>
            <param name="attributeSets">-</param>
            <param name="compareFlagsForAttributeSets">-</param>
            <param name="dicomAttributeFlagsForAttributeSets">-</param>
            <param name="displayAttributeSets">-</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.CompareBase.AddAttributesInformation(DvtkHighLevelInterface.Common.Other.DicomAttributesToValidate)">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            </summary>
            <param name="dicomAttributesToValidate">-</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.CompareBase.AddCommonInformationForAttributes(DvtkHighLevelInterface.Common.Other.DicomAttributesToValidate)">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            </summary>
            <param name="dicomAttributesToValidate">-</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.CompareBase.CreateCompareResults(System.Int32,System.Int32,System.String,System.Collections.Specialized.StringCollection)">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            </summary>
            <param name="numberOfColumns">-</param>
            <param name="numberOfAttributeSets">-</param>
            <param name="tableDescription">-</param>
            <param name="attributeSetDescriptions">-</param>
            <returns>-</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.CompareBase.DetermineColumnIndices(System.Int32)">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            </summary>
            <param name="numberOfAttributeSets">-</param>
            <returns>-</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.CompareBase.GetAttributeName(DvtkHighLevelInterface.Dicom.Other.Attribute)">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            </summary>
            <param name="attribute">-</param>
            <returns>-</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.CompareBase.SetCellError(System.Int32,System.String)">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            <br></br>
            Fill the cell with text indicating error.
            </summary>
            <param name="column">The column.</param>
            <param name="text">The text.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.CompareBase.SetCellNotApplicable(System.Int32)">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            <br></br>
            Set the cell content to indicate that it is not relevant.
            </summary>
            <param name="column">The column.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.CompareBase.SetCellOK(System.Int32,System.String)">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            <br></br>
            Fill the cell with text indicating no error.
            </summary>
            <param name="column">The column.</param>
            <param name="text">The text.</param>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.CompareBase.displayAttributeName">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.CompareBase.displayAttributePresent">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.CompareBase.displayAttributeTag">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.CompareBase.displayAttributeValues">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.CompareBase.displayAttributeVR">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.CompareBase.displayCommonName">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.CompareBase.displayCommonTag">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.CompareBase.displayCommonVR">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.CompareBase.NAME_STRING">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.CompareBase.TAG_STRING">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.CompareBase.PRESENT_STRING">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.CompareBase.VALUES_STRING">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.CompareBase.VR_STRING">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.CompareBase.compareResults">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            <br></br>
            The field used to store the table that is the result of comparing.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Other.CompareBase.AddEmptyRowAfterEachDynamicComparedList">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Other.CompareBase.DisplayAttributeVR">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            <br></br>
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Other.Compare">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            <br></br>
            For now, this class contains one method to compare two attribute sets. The result is a Table
            in which for all attributes in the two datasets, one row is present describing if they are equal
            with respect to the attribute or not.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.Compare.columnIndexName">
            <summary>
            Column index to use for the attribute name.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.Compare.columnIndexPresent1">
            <summary>
            Column index to use for the attribute1 presence.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.Compare.columnIndexPresent2">
            <summary>
            Column index to use for the attribute2 presence.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.Compare.columnIndexTag">
            <summary>
            Column index to use for the attribute tag.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.Compare.columnIndexValues1">
            <summary>
            Column index to use for the attribute1 values.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.Compare.columnIndexValues2">
            <summary>
            Column index to use for the attribute2 values .
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.Compare.columnIndexVr1">
            <summary>
            Column index to use for the attribute1 VR.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.Compare.columnIndexVr2">
            <summary>
            Column index to use for the attribute2 VR.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.Compare.differencesCount">
            <summary>
            See property differencesCount.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.Compare.displayVR">
            <summary>
            See property DisplayVR.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.Compare.dummyDataSet">
            <summary>
            Dummy data set containing only the dummyEmptySequenceAttribute.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.Compare.dummyEmptySequenceAttribute">
            <summary>
            Dummy sequence attribute containing no sequence items.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.Compare.table">
            <summary>
            The field used to store the table that is the result of comparing.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.Compare.#ctor">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            <br></br>
            Default constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.Compare.AddAttributeInformation(DvtkHighLevelInterface.Dicom.Other.ValidAttribute,DvtkHighLevelInterface.Dicom.Other.ValidAttribute,System.Boolean)">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            <br></br>
            Add attribute information for one attribute in the current row.
            </summary>
            <param name="sourceAttribute">The attribute for which the information needs to be displayed.</param>
            <param name="referenceAttribute">The attribute to compare with.</param>
            <param name="isFromFirstAttributeSet">Indicates if the attribute is from the first attribute set.</param>
            <returns>Indicates if an compare error was encountered.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.Compare.AddAttributesComparison(DvtkHighLevelInterface.Dicom.Other.ValidAttribute,DvtkHighLevelInterface.Dicom.Other.ValidAttribute,System.Int32)">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            <br></br>
            Add a row containing the result of comparing the two supplied attributes.
            </summary>
            <param name="attribute1">Attribute 1.</param>
            <param name="attribute2">Attribute 2.</param>
            <param name="level">-</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.Compare.AddAttributeSetsComparison(DvtkHighLevelInterface.Dicom.Other.AttributeSet,DvtkHighLevelInterface.Dicom.Other.AttributeSet,System.Int32)">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            <br></br>
            Add the results of comparing the two AttributeSets (possibly within multiple nested Sequence Attributes)
            to the the already filled table.
            </summary>
            <param name="attributeSet1">The first AttributeSet.</param>
            <param name="attributeSet2">The second AttributeSet.</param> 
            <param name="level">-</param>  
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.Compare.AddSequenceAttributesContentComparison(DvtkHighLevelInterface.Dicom.Other.Attribute,DvtkHighLevelInterface.Dicom.Other.Attribute,System.Int32)">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            </summary>
            <param name="sequenceAttribute1">-</param>
            <param name="sequenceAttribute2">-</param>
            <param name="level">-</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.Compare.CompareAttributeSets(System.String,DvtkHighLevelInterface.Dicom.Other.AttributeSet,System.String,DvtkHighLevelInterface.Dicom.Other.AttributeSet,System.String)">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            <br></br>
            Compare two attributeSets by putting the compare results in a Table.
            </summary>
            <param name="tableDescription">The description of the complete table (put in the first table header).</param>
            <param name="attributeSet1">The first AttributeSet.</param>
            <param name="attributeSet1Description">Description of the first AttributeSet (put in the second table header).</param>
            <param name="attributeSet2">The second AttributeSet.</param>
            <param name="attributeSet2Description">Description of the second AttributeSet (put in the second table header).</param>
            <returns>The result of comparing the two AttributeSets.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.Compare.ConvertToSequenceAttribute(DvtkHighLevelInterface.Dicom.Other.Attribute)">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            <br></br>
            When the supplied attribute is a sequence attribute, return it.
            If it is not a sequence attribute or does not exist, return a dummy sequence
            attribute containing no items.
            </summary>
            <param name="attribute">The attribute.</param>
            <returns>A (dummy) sequence attribute.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.Compare.SetCellError(System.Int32,System.String,System.Boolean)">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            <br></br>
            Fill the cell with text indicating error.
            </summary>
            <param name="column">The column.</param>
            <param name="text">The text.</param>
            <param name="enabled">If true, the cell is set. If false, nothing happens.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.Compare.SetCellNotApplicable(System.Int32,System.Boolean)">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            <br></br>
            Set the cell content to indicate that it is not relevant.
            </summary>
            <param name="column">The column.</param>
            <param name="enabled">If true, the cell is set. If false, nothing happens.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.Compare.SetCellOK(System.Int32,System.String,System.Boolean)">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            <br></br>
            Fill the cell with text indicating no error.
            </summary>
            <param name="column">The column.</param>
            <param name="text">The text.</param>
            <param name="enabled">If true, the cell is set. If false, nothing happens.</param>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Other.Compare.DifferencesCount">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Other.Compare.DisplayVR">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Other.GenericBooleanExpressionAnd`2">
            <summary>
            Represent the logical AND that is applied to two other boolean expressions.
            <br></br><br></br>
            STILL WORK IN PROGRESS!
            </summary>
            <typeparam name="T">The type of the instance to evaluate.</typeparam>
            <typeparam name="TCollection">A collection of the type specified.</typeparam>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.GenericBooleanExpressionAnd`2.booleanExpression1">
            <summary>
            The first boolean expression, supplied in the constructor, on which the logical OR operator is applied.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.GenericBooleanExpressionAnd`2.booleanExpression2">
            <summary>
            The second boolean expression, supplied in the constructor, on which the logical OR operator is applied.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.GenericBooleanExpressionAnd`2.#ctor">
            <summary>
            Hide default constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.GenericBooleanExpressionAnd`2.#ctor(DvtkHighLevelInterface.Common.Other.GenericBooleanExpression{`0,`1},DvtkHighLevelInterface.Common.Other.GenericBooleanExpression{`0,`1})">
            <summary>
            Constructor.
            </summary>
            <param name="booleanExpression1">The first boolean expression on which the logical AND operator is applied.</param>
            <param name="booleanExpression2">The second boolean expression on which the logical AND operator is applied.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.GenericBooleanExpressionAnd`2.Evaluate(`0)">
            <summary>
            Evaluates the boolean expression using the supplied instance.
            </summary>
            <param name="t">The instance to evaluate this boolean expression with.</param>
            <returns>The result of evaluating the boolean expression with the supplied instance.</returns>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Other.GenericBooleanExpressionAnd`4">
            <summary>
            Represent the logical AND that is applied to two other boolean expressions.
            <br></br><br></br>
            STILL WORK IN PROGRESS!
            </summary>
            <typeparam name="T1">The type of the first instance of the pair to evaluate.</typeparam>
            <typeparam name="TCollection1">A collection of the first type specified.</typeparam>
            <typeparam name="T2">The type of the second instance of the pair to evaluate.</typeparam>
            <typeparam name="TCollection2">A collection of the second type specified.</typeparam>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Other.GenericBooleanExpression`4">
            <summary>
            Represents a boolean expression that can evaluate a pair of two other instance.
            <br></br><br></br>
            STILL WORK IN PROGRESS!
            </summary>
            <typeparam name="T1">The type of the first instance of the pair to evaluate.</typeparam>
            <typeparam name="TCollection1">A collection of the first type specified.</typeparam>
            <typeparam name="T2">The type of the second instance of the pair to evaluate.</typeparam>
            <typeparam name="TCollection2">A collection of the second type specified.</typeparam>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.GenericBooleanExpression`4.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.GenericBooleanExpression`4.op_BitwiseAnd(DvtkHighLevelInterface.Common.Other.GenericBooleanExpression{`0,`1,`2,`3},DvtkHighLevelInterface.Common.Other.GenericBooleanExpression{`0,`1,`2,`3})">
            <summary>
            Returns a boolean expression which is the logical AND operation performed on the two supplied boolean expressions.
            </summary>
            <param name="booleanExpression1">The first boolean expression.</param>
            <param name="booleanExpression2">The second boolean expression.</param>
            <returns>The boolean expression which is the logical AND operation performed on the two supplied boolean expressions.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.GenericBooleanExpression`4.op_LogicalNot(DvtkHighLevelInterface.Common.Other.GenericBooleanExpression{`0,`1,`2,`3})">
            <summary>
            Returns a boolean expression which is the logical NOT operation performed on the supplied boolean expression.
            </summary>
            <param name="booleanExpression">The boolean expression.</param>
            <returns>The boolean expression which is the logical NOT operation performed on the supplied boolean expression.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.GenericBooleanExpression`4.op_BitwiseOr(DvtkHighLevelInterface.Common.Other.GenericBooleanExpression{`0,`1,`2,`3},DvtkHighLevelInterface.Common.Other.GenericBooleanExpression{`0,`1,`2,`3})">
            <summary>
            Returns a boolean expression which is the logical OR operation performed on the two supplied boolean expressions.
            </summary>
            <param name="booleanExpression1">The first boolean expression.</param>
            <param name="booleanExpression2">The second boolean expression.</param>
            <returns>The boolean expression which is the logical OR operation performed on the two supplied boolean expressions.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.GenericBooleanExpression`4.Evaluate(`0,`2)">
            <summary>
            Evaluates the boolean expression using the supplied instances.
            </summary>
            <param name="t1">The first supplied instance of the pair to evaluate the boolean expression with.</param>
            <param name="t2">The second supplied instance of the pair to evaluate the boolean expression with.</param>
            <returns>The result of evaluating the boolean expression with the supplied instances.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.GenericBooleanExpression`4.Evaluate(`1,`3)">
            <summary>
            Returns all possible combinations of the two supplied collections that evaluate to true.
            </summary>
            <param name="collection1">The first collecttion.</param>
            <param name="collection2">The second collecttion.</param>
            <returns>All possible combinations of the two supplied collections that evaluate to true.</returns>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.GenericBooleanExpressionAnd`4.booleanExpression1">
            <summary>
            The first boolean expression, supplied in the constructor, on which the logical OR operator is applied.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.GenericBooleanExpressionAnd`4.booleanExpression2">
            <summary>
            The second boolean expression, supplied in the constructor, on which the logical OR operator is applied.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.GenericBooleanExpressionAnd`4.#ctor">
            <summary>
            Hide default constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.GenericBooleanExpressionAnd`4.#ctor(DvtkHighLevelInterface.Common.Other.GenericBooleanExpression{`0,`1,`2,`3},DvtkHighLevelInterface.Common.Other.GenericBooleanExpression{`0,`1,`2,`3})">
            <summary>
            Constructor.
            </summary>
            <param name="booleanExpression1">The first boolean expression on which the logical AND operator is applied.</param>
            <param name="booleanExpression2">The second boolean expression on which the logical AND operator is applied.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.GenericBooleanExpressionAnd`4.Evaluate(`0,`2)">
            <summary>
            Evaluates the boolean expression using the supplied instances.
            </summary>
            <param name="t1">The first supplied instance of the pair to evaluate the boolean expression with.</param>
            <param name="t2">The second supplied instance of the pair to evaluate the boolean expression with.</param>
            <returns>The result of evaluating the boolean expression with the supplied instances.</returns>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Other.ConditionAnd">
            <summary>
            Represent the logical AND that is applied to two other boolean expressions.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.ConditionAnd.condition1">
            <summary>
            The first boolean expression, supplied in the constructor, on which the logical AND operator is applied.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.ConditionAnd.condition2">
            <summary>
            The second boolean expression, supplied in the constructor, on which the logical AND operator is applied.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.ConditionAnd.#ctor">
            <summary>
            Hide default constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.ConditionAnd.#ctor(DvtkHighLevelInterface.Common.Other.Condition,DvtkHighLevelInterface.Common.Other.Condition)">
            <summary>
            Constructor.
            </summary>
            <param name="condition1">The first boolean expression on which the logical AND operator is applied.</param>
            <param name="condition2">The second boolean expression on which the logical AND operator is applied.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.ConditionAnd.Evaluate(System.Object)">
            <summary>
            Evaluates the boolean expression using the supplied instance.
            </summary>
            <param name="theObject">The supplied instance to evaluate the boolean expression with.</param>
            <returns>The result of evaluating the boolean expression with the supplied instance.</returns>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Compare.DynamicCompare">
            <summary>
            This class implements a dynamic compare of attribute sets, i.e. (absent) attributes from different
            attribute sets with possible different tags are compared with each other.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.DynamicCompare.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.DynamicCompare.CompareAttributeCollections(System.String,DvtkHighLevelInterface.Common.Compare.AttributeCollections,System.Collections.Specialized.StringCollection,DvtkHighLevelInterface.Common.Compare.CompareRules)">
            <summary>
            Do a dynamic compare for the attribute sets supplied.
            
            Note that the parameters attributeSets, attributeSetDescriptions and each compareRule instance in
            the parameter compareRules must have the same size and have a size at least 2.
            </summary>
            <param name="tableDescription">Description of the table.</param>
            <param name="attributeCollections">The attribute sets to compare with each other.</param>
            <param name="attributeCollectionDescriptions">The descriptions of the attribute sets.</param>
            <param name="compareRules">
            Specifies which attributes with what tags should be compared with each other.
            Also specifies how the attributes should be compared with each other.
            </param>
            <returns>The results of the dynamic compare presented as a table (that may be converted to HTML).</returns>
        </member>
        <member name="T:DvtkHighLevelInterface.Dicom.Other.UID">
            <summary>
            This class offers Unique Identifier functionality.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.Other.UID.DVTkRoot">
            <summary>
            The DVTk UID root (26 characters).
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.Other.UID.isInitialized">
            <summary>
            Indicates if specific fields have been initialized.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.Other.UID.lastCreatedUid">
            <summary>
            Contains last created UID.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.Other.UID.lockObject">
            <summary>
            Used to lock a set of related static fields.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.Other.UID.macNumberOrRandomNumber">
            <summary>
            The MAC address or random number (in case no MAC address can be determined).
            (maximum 15 characters).
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.Other.UID.random">
            <summary>
            Used when no MAC address is present.
            This field is Thread Safe because it is a public static field.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.Other.UID.version">
            <summary>
            Version of HLI Assembly (max 11 characters).
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.UID.#ctor">
            <summary>
            Hide default constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.UID.Create">
            <summary>
            Create a UID.
            
            The length of the supplied string will be maximum 64 characters, as required by the Dicom standard.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.UID.GetNetworkCardMacAddress">
            <summary>
            Get the (unique) MAC address of one of the network cards.
            When no network card is available, an empty String is returned.
            </summary>
            <returns>The MAC address.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.UID.Initialize">
            <summary>
            Contains code that needs to be executed only once.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Dicom.Other.SopClasses">
            <summary>
            List of one or more SOP classes.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.SopClasses.#ctor(System.String[])">
            <summary>
            Constructor
            </summary>
            <param name="list">List of SOP classes.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.SopClasses.Add(System.String)">
            <summary>
            Adds a single Sop Class to the list.
            </summary>
            <param name="sopClass">SOP class.</param>
        </member>
        <member name="T:DvtkHighLevelInterface.Dicom.Other.Attribute">
            <summary>
            Represents a DICOM attribute.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.Other.Attribute.tagSequence">
            <summary>
            See property TagSequence.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.Attribute.AddItem(DvtkHighLevelInterface.Dicom.Other.SequenceItem)">
            <summary>
            Adds a sequence item to the end of the item list.
            </summary>
            <remarks>
            This method is only meaningfull if this instance has a VR SQ.
            </remarks>
            <param name="item">The sequence item to add.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.Attribute.ClearItems">
            <summary>
            Clears all sequence items present in the attribute.
            </summary>
            <remarks>
            This method is only meaningfull if this instance has a VR SQ.
            </remarks>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.Attribute.Clone(DvtkHighLevelInterface.Dicom.Other.AttributeSet)">
            <summary>
            Creates a deep copy of this instance.
            </summary>
            <param name="parentAttributeSetToCloneTo">
            The AttributeSet the new cloned Attribute wil become part of.
            </param>
            <returns>The created deep copy of this instance.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.Attribute.Delete">
            <summary>
            Deletes this instance from the AttributeSet it is contained in.
            </summary>
            <remarks>
            <b>Do not use this instance anymore after calling this method!</b>
            </remarks>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.Attribute.GetItem(System.Int32)">
            <summary>
            Gets a sequence item.
            </summary>
            <remarks>
            This method is only meaningfull if this instance has a VR SQ.
            </remarks>
            <param name="oneBasedIndex">The one based index.</param>
            <returns>The sequence item.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.Attribute.InsertItem(System.Int32,DvtkHighLevelInterface.Dicom.Other.SequenceItem)">
            <summary>
            Insert a Sequence Item at a specified position.
            </summary>
            <param name="oneBasedIndex">The one based index.</param>
            <param name="item">The Sequence item to insert.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.Attribute.IsSimpleVR(DvtkData.Dimse.VR)">
            <summary>
            Determines if a VR is a "simple" one, i.e. is not SQ, OB, OW, OF or UN.
            </summary>
            <param name="vR">The VR.</param>
            <returns>Boolean indicating if it is a simple VR or not.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.Attribute.RemoveItemAt(System.Int32)">
            <summary>
            Removes a sequence item.
            </summary>
            <param name="oneBasedIndex">The one based index</param>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.Attribute.ElementNumber">
            <summary>
            Gets the element number of the attribute tag.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.Attribute.Exists">
            <summary>
            Indicates if the attribute exists.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.Attribute.GroupNumber">
            <summary>
            Gets the group number of the attribute tag.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.Attribute.ItemCount">
            <summary>
            Gets the number of items of the attribute.
            </summary>
            <remarks>
            This property is only meaningfull if this instance has a VR SQ.
            </remarks>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.Attribute.Name">
            <summary>
            Gets or sets the name of the attribute.
            </summary>
            <remarks>
            An empty string means no name available.
            </remarks>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.Attribute.TagSequence">
            <summary>
            Gets or sets the tag sequence for the attribute.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.Attribute.TagSequenceString">
            <summary>
            Gets the tag sequence string for the attribute.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.Attribute.Values">
            <summary>
            Gets the values of the attribute.
            </summary>
            <remarks>
            This property is only meaningfull if this instance does not have a VR SQ, OB, OW, OF or UN.
            </remarks>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.Attribute.VM">
            <summary>
            Gets the value multiplicity of the attribute.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.Attribute.VR">
            <summary>
            Gets the VR of the attribute.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Dicom.Messages.AssociateAc">
            <summary>
            Represents a Dicom A_ASSOCIATE_AC.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Messages.AssociateAc.#ctor">
            <summary>
            Hide default constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Messages.AssociateAc.#ctor(System.String,System.String,System.UInt32,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="callingAETitle">The calling AE title.</param>
            <param name="calledAETitle">The called AE title.</param>
            <param name="maximumPduSizeToReceive">Maximum pdu size to receive.</param>
            <param name="implementationClassUid">The implementation class UID.</param>
            <param name="ImplementationVersionName">The implementation version UID.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Messages.AssociateAc.#ctor(DvtkData.Dul.A_ASSOCIATE_AC)">
            <summary>
            Constructor to encapsulate an existing DvtkData A_ASSOCIATE_AC.
            </summary>
            <param name="dvtkDataAssociateAc">The encapsulated DvtkData A_ASSOCIATE_AC</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Messages.AssociateAc.ToString">
            <summary>
            Returns a String that represents this instance.
            </summary>
            <returns>A String that represents this instance.</returns>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Messages.AssociateAc.ApplicationContext">
            <summary>
            Gets the Application Context.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Messages.AssociateAc.CalledAETitle">
            <summary>
            Gets the called AE title.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Messages.AssociateAc.CallingAETitle">
            <summary>
            Gets the calling AE title.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Messages.AssociateAc.DvtkDataAssociateAc">
            <summary>
            Gets the encapsulated DvtkData A_ASSOCIATE_AC.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Messages.AssociateAc.PresentationContexts">
            <summary>
            Gets the presentation contexts.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Messages.AssociateAc.ProtocolVersion">
            <summary>
            Gets the Protocol Version.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Messages.AssociateAc.UserInformation">
            <summary>
            Gets the User Information.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Dicom.Files.DicomDir">
            <summary>
            Under construction!
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.Files.DicomDir.dataSet">
            <summary>
            See property DataSet.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.Files.DicomDir.fileMetaInformation">
            <summary>
            See property FileMetaInformation.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Files.DicomDir.#ctor">
            <summary>
            Default constructor. Creates an empty DicomDir.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Files.DicomDir.AddDicomDirRecordsForDicomFile(System.String,System.String[])">
            <summary>
            Adds the mandatory DICOMDIR records for the supplied DICOM file.
            </summary>
            <remarks>
            Only the mandatory attributes will be present in the added DICOMDIR records.
            </remarks>
            <param name="fullFileName">The full name of the DICOM file.</param>
            <param name="referencedFileId">The different components (values) of the "referenced file ID" attribute.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Files.DicomDir.Read(System.String)">
            <summary>
            Reads a DICOM directory.
            </summary>
            <param name="fullFileName">The full file name</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Files.DicomDir.Write(System.String)">
            <summary>
            Writes a DICOM directory.
            </summary>
            <param name="fullFileName">The full file name</param>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Files.DicomDir.DataSet">
            <summary>
            Gets or sets the Data Set.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Files.DicomDir.FileMetaInformation">
            <summary>
            Gets or sets the File Meta Information.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.UserInterfaces.UserControlActivityLogging">
            <summary>
            This class implements a user control for displaying activity logging from HLI Threads.
            This user control is used for the HliForm but can also be used on its own.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.UserInterfaces.UserControlActivityLogging.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.UserInterfaces.UserControlActivityLogging.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.UserInterfaces.UserControlActivityLogging.actionQueue">
            <summary>
            A thread-safe queue, for storing the actions until they are performed when the
            timer raises an event.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.UserInterfaces.UserControlActivityLogging.errorOutputEventHandler">
            <summary>
            Event handler that can handle an error output event from a Thread.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.UserInterfaces.UserControlActivityLogging.informationOutputEventHandler">
            <summary>
            Event handler that can handle an information output event from a Thread.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.UserInterfaces.UserControlActivityLogging.keepNumberOfLines">
            <summary>
            See the method SetNumberOfLines.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.UserInterfaces.UserControlActivityLogging.lastIdentifierUsed">
            <summary>
            The last identifier used for logging (is null if no logging has taken place yet).
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.UserInterfaces.UserControlActivityLogging.maximumNumberOfLines">
            <summary>
            See the method SetNumberOfLines.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.UserInterfaces.UserControlActivityLogging.numberOfLinesLock">
            <summary>
            Use this to synchronize the reading and writing of the keepNumberOfLines and maximumNumberOfLines fields.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.UserInterfaces.UserControlActivityLogging.timer">
            <summary>
            Timer that will trigger the actual performing of the actions present in the action queue.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.UserInterfaces.UserControlActivityLogging.warningOutputEventHandler">
            <summary>
            Event handler that can handle a warning output event from a Thread.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.UserInterfaces.UserControlActivityLogging.#ctor">
            <summary>
            Default constructor.
            <br></br><br></br>
            Use this constructor when this control uses its own timer to
            perform the actions.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.UserInterfaces.UserControlActivityLogging.#ctor(System.Windows.Forms.Timer)">
            <summary>
            Constructor.
            <br></br><br></br>
            Use this constructor when this control uses an external timer to
            perform the actions.
            </summary>
            <param name="timer"></param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.UserInterfaces.UserControlActivityLogging.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.UserInterfaces.UserControlActivityLogging.AddWriteActionToQueue(System.String,System.String,System.Drawing.Color)">
            <summary>
            Add a write action to the action queue.
            </summary>
            <param name="identifier">The identifier of the Thread.</param>
            <param name="text">The text to log.</param>
            <param name="color">The color of the text to log.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.UserInterfaces.UserControlActivityLogging.AddClearActionToQueue">
            <summary>
            Adds a clear action to the action queue.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.UserInterfaces.UserControlActivityLogging.Attach(DvtkHighLevelInterface.Common.Threads.Thread)">
            <summary>
            Attach to a Thread.
            <br></br><br></br>
            By doing so, this User Control may display information, warning and error output events
            from the Thread.
            </summary>
            <param name="thread">The Thread to attach to.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.UserInterfaces.UserControlActivityLogging.Clear">
            <summary>
            Clear the contents of the rich text box.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.UserInterfaces.UserControlActivityLogging.HandleErrorOutputEvent(DvtkHighLevelInterface.Common.Threads.Thread,System.String)">
            <summary>
            Handle an error output event from a Thread by adding a WriteAction to the action queue.
            </summary>
            <param name="thread">The Thread that generated the output event.</param>
            <param name="text">The text from the output event.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.UserInterfaces.UserControlActivityLogging.HandleInformationOutputEvent(DvtkHighLevelInterface.Common.Threads.Thread,System.String)">
            <summary>
            Handle an information output event from a Thread by adding a WriteAction to the action queue.
            </summary>
            <param name="thread">The Thread that generated the output event.</param>
            <param name="text">The text from the output event.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.UserInterfaces.UserControlActivityLogging.HandleWarningOutputEvent(DvtkHighLevelInterface.Common.Threads.Thread,System.String)">
            <summary>
            Handle a warning output event from a Thread by adding a WriteAction to the action queue.
            </summary>
            <param name="thread">The Thread that generated the output event.</param>
            <param name="text">The text from the output event.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.UserInterfaces.UserControlActivityLogging.PerformActions(System.Object,System.EventArgs)">
            <summary>
            Perform the actions that are stored in the action stack.
            <br></br><br></br>
            This method handles the timer event.
            </summary>
            <param name="myObject">The object.</param>
            <param name="myEventArgs">The event args.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.UserInterfaces.UserControlActivityLogging.SetNumberOfLines(System.UInt32,System.UInt32)">
            <summary>
            Determines how much logging in this instance may be present.
            </summary>
            <param name="maximumNumberOfLines">
            Maximum number of lines displayed in this instance before before the oldest lines will
            be removed.</param>
            <param name="keepNumberOfLines">
            Number of newest lines that will be kept when the oldest lines are removed.
            </param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.UserInterfaces.UserControlActivityLogging.Write(System.String,System.String,System.Drawing.Color)">
            <summary>
            Write the text.
            </summary>
            <param name="identifier">The identifier.</param>
            <param name="text">The text.</param>
            <param name="color">The color of the text.</param>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.UserInterfaces.UserControlActivityLogging.Interval">
            <summary>
            The time to wait before performing all the newly added actions in the action queue after
            the previously performed actions.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.UserInterfaces.UserControlActivityLogging.LoggingText">
            <summary>
            Returns all the text on rich textbox.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Other.StaticCompare">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            <br></br>
            This class implements a static compare of attribute sets, i.e. (absent) attributes from different
            attribute sets with the same tags are compared with each other.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.StaticCompare.#ctor">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            <br></br>
            Default constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.StaticCompare.CompareAttributeSets(System.String,System.Collections.ArrayList,System.Collections.Specialized.StringCollection,DvtkHighLevelInterface.Common.Other.CompareFlags)">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            <br></br>
            Do a static compare for the attribute sets supplied.
            
            Note that the parameters attributeSets and attributeSetDescriptions must have the same size and
            must be at least size 2.
            </summary>
            <param name="tableDescription">Description of the table.</param>
            <param name="attributeSets">The attribute sets to compare with each other.</param>
            <param name="attributeSetDescriptions">The descriptions of the attribute sets.</param>
            <param name="compareFlags">
            The compare flags that may be supplied. The following combination of flags may be supplied (using bitwise Or):
            - CompareFlags.None: when only supplying this flag, the attributes are only displayed and no compare is performed.
            - CompareFlags.Compare_present: a check is performed if all attributes with the same tag are present.
            - CompareFlags.Compare_values: a check is performed if all attributes with the same tag have the same values.
            - CompareFlags.Compare_VR: a check is performed if all attributes with the same tag have the same VR.
            
            The compare flags are applied to all supplied attribute sets.
            </param>
            <returns>The results of the static compare presented as a table (that may be converted to HTML).</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.StaticCompare.CompareAttributeSets(System.String,System.Collections.ArrayList,System.Collections.Specialized.StringCollection,System.Collections.ArrayList)">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            <br></br>
            Do a static compare for the attribute sets supplied.
            
            Note that the parameters attributeSets, attributeSetDescriptions and compareFlagsForAttributeSets
            must have the same size and must be at least size 2.
            </summary>
            <param name="tableDescription">Description of the table.</param>
            <param name="attributeSets">The attribute sets to compare with each other.</param>
            <param name="attributeSetDescriptions">The descriptions of the attribute sets.</param>
            <param name="compareFlagsForAttributeSets">
            The compare flags that may be supplied. The following combination of flags may be supplied (using bitwise Or):
            - CompareFlags.None: when only supplying this flag, the attributes are only displayed and no compare is performed.
            - CompareFlags.Compare_present: a check is performed if all attributes with the same tag are present.
            - CompareFlags.Compare_values: a check is performed if all attributes with the same tag have the same values.
            - CompareFlags.Compare_VR: a check is performed if all attributes with the same tag have the same VR.
            </param>
            <returns>The results of the static compare presented as a table (that may be converted to HTML).</returns>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Compare.DicomAttribute">
            <summary>
            In the context of this namespace,
            class representing an actual Dicom attribute to validate in combination with
            its validation flags.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Compare.AttributeBase">
            <summary>
            In the context of this namespace,
            abstract class representing an actual attribute to validate in combination with
            its validation flags.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.AttributeBase.validationRule">
            <summary>
            See property ValidationRule.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.AttributeBase.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.AttributeBase.#ctor(DvtkHighLevelInterface.Common.Compare.ValidationRuleBase)">
            <summary>
            Constructor.
            </summary>
            <param name="validationRule">The validation rule.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.AttributeBase.ValuesToString">
            <summary>
            Converts the values of the actual attribute to a string representation.
            </summary>
            <returns>The string representation of the actual attribute.</returns>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Compare.AttributeBase.IsPresent">
            <summary>
            Indicates if the actual attribute is present.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Compare.AttributeBase.ValidationRule">
            <summary>
            Property to get the validation rule.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.DicomAttribute.attributeOnly">
            <summary>
            See property AttributeOnly.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.DicomAttribute.validationRuleDicomAttribute">
            <summary>
            See property ValidationRuleDicomAttribute.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.DicomAttribute.#ctor">
            <summary>
            Hide default constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.DicomAttribute.#ctor(DvtkHighLevelInterface.Dicom.Other.Attribute,DvtkHighLevelInterface.Common.Compare.ValidationRuleDicomAttribute)">
            <summary>
            Constructor.
            </summary>
            <param name="attributeOnly">The attribute without the validation rule.</param>
            <param name="validationRuleDicomAttribute">The validation rule that needs to be applied to the attribute.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.DicomAttribute.ValuesToString">
            <summary>
            Converts the values of the actual attribute to a string representation.
            </summary>
            <returns>The string representation of the actual attribute.</returns>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Compare.DicomAttribute.AttributeOnly">
            <summary>
            Property to get the attribute without the validation rule.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Compare.DicomAttribute.IsPresent">
            <summary>
            Indicates if the actual attribute is present.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Compare.DicomAttribute.ValidationRuleDicomAttribute">
            <summary>
            Property to get the validation rule that needs to be applied to the attribute.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Hl7.Messages.Hl7ProtocolMessageCollection">
            <summary>
            Collection of HL7 protocol messages.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Hl7.Messages.Hl7ProtocolMessageCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Hl7.Messages.Hl7ProtocolMessageCollection.#ctor(DvtkHighLevelInterface.Hl7.Messages.Hl7ProtocolMessage[])">
            <summary>
            Constructor with initialization. Shallow copy.
            </summary>
            <param name="arrayOfValues">values to copy.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Hl7.Messages.Hl7ProtocolMessageCollection.Add(DvtkHighLevelInterface.Hl7.Messages.Hl7ProtocolMessage)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The item to add to the <see cref="T:System.Collections.IList"/>. </param>
            <returns>The position into which the new element was inserted.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Hl7.Messages.Hl7ProtocolMessageCollection.Contains(DvtkHighLevelInterface.Hl7.Messages.Hl7ProtocolMessage)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IList"/> contains a specific item.
            </summary>
            <param name="value">The item to locate in the <see cref="T:System.Collections.IList"/>.</param>
            <returns><see langword="true"/> if the item is found in the <see cref="T:System.Collections.IList"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Hl7.Messages.Hl7ProtocolMessageCollection.IndexOf(DvtkHighLevelInterface.Hl7.Messages.Hl7ProtocolMessage)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The item to locate in the <see cref="T:System.Collections.IList"/>.</param>
            <returns>The index of <c>value</c> if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Hl7.Messages.Hl7ProtocolMessageCollection.Insert(System.Int32,DvtkHighLevelInterface.Hl7.Messages.Hl7ProtocolMessage)">
            <summary>
            Inserts an item to the IList at the specified position.
            </summary>
            <param name="index">The zero-based index at which <c>value</c> should be inserted. </param>
            <param name="value">The item to insert into the <see cref="T:System.Collections.IList"/>.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Hl7.Messages.Hl7ProtocolMessageCollection.Remove(DvtkHighLevelInterface.Hl7.Messages.Hl7ProtocolMessage)">
            <summary>
            Removes the first occurrence of a specific item from the IList.
            </summary>
            <param name="value">The item to remove from the <see cref="T:System.Collections.IList"/>.</param>
        </member>
        <member name="P:DvtkHighLevelInterface.Hl7.Messages.Hl7ProtocolMessageCollection.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index.
            </summary>
            <value>The item at the specified <c>index</c>.</value>
        </member>
        <member name="T:DvtkHighLevelInterface.Dicom.Threads.DicomThreadTriggerLoop">
            <summary>
            This abstract class contains the base functionality to implement a DicomThread that, once
            started, will do things when triggered from the outside.
            
            The mechanism used for triggering is calling the Trigger method.
              
            The abstract ProcessTrigger method needs to be overriden to determine what needs
            to be done when this object received a trigger.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.Threads.DicomThreadTriggerLoop.hasLastTriggerCallBeenProcessed">
            <summary>
            Indicates if the last Trigger method call has been processed.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.Threads.DicomThreadTriggerLoop.hasLastTriggerCallBeenProcessedLock">
            <summary>
            Lock object to safeguard the hasLastTriggerCallBeenProcessed field.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.Threads.DicomThreadTriggerLoop.keepLooping">
            <summary>
            Indicates if looping needs to continue. Is set to false when the
            Stop method is called.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.Threads.DicomThreadTriggerLoop.loopDelay">
            <summary>
            See property LoopDelay.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.Threads.DicomThreadTriggerLoop.triggerQueue">
            <summary>
            Used to store the triggers that are supplied when the Trigger method is called.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThreadTriggerLoop.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThreadTriggerLoop.AfterProcessTrigger(System.Object)">
            <summary>
            May be overriden to implement things that need to be performed after
            processing a trigger.
            </summary>
            <param name="trigger">The trigger that will be processed.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThreadTriggerLoop.BeforeProcessTrigger(System.Object)">
            <summary>
            May be overriden to implement things that need to be performed before
            processing a trigger.
            </summary>
            <param name="trigger">The trigger that will be processed.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThreadTriggerLoop.Execute">
            <summary>
            This method implements the loop the the class.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThreadTriggerLoop.ProcessTrigger(System.Object)">
            <summary>
            Override this method to determine what should happen when a trigger is processed in the loop.
            
            E.g. when the trigger is of type DicomMessage, send a DicomMessage to a SCP.
            </summary>
            <param name="trigger">The trigger.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThreadTriggerLoop.Stop">
            <summary>
            Stop the looping, and as a consequence, stop this DicomThread.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThreadTriggerLoop.Trigger(System.Object)">
            <summary>
            Put a new trigger at the end of the queue. FIFO is used as
            the processing order for the triggers.
            </summary>
            <param name="trigger">
            The actual trigger. In an overriden method ProcessTrigger of a descendant class,
            the actual implementation what to do with a trigger should be placed.
            </param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThreadTriggerLoop.WaitForLastTriggerCallProcessed">
            <summary>
            Wait until all trigger calls have been processed.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Threads.DicomThreadTriggerLoop.LoopDelay">
            <summary>
            Delay before checking if unprocessed triggers are available.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Threads.DicomThreadTriggerLoop.ResultsFilePerTrigger">
            <summary>
            Gets or sets a boolean indicating if seperate results will be written for each trigger.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Dicom.Other.SetParameterGroup">
            <summary>
            Summary description for SetParametersSingleAttribute.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Dicom.Other.SequenceItem">
            <summary>
            An object of this class represents a Sequence Item.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.SequenceItem.#ctor">
            <summary>
            Constructor. Use it to construct a new empty sequence item.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.SequenceItem.#ctor(DvtkHighLevelInterface.Dicom.Other.TagSequence,DvtkData.Dimse.SequenceItem)">
            <summary>
            Constructor.
            
            Use this to encapsulate an existing DvtkData sequence item.
            </summary>
            <param name="tagSequence">The tag sequence of this sequence item.</param>
            <param name="dvtkDataSequenceItem">The encapsulated DvtkData SequenceItem.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.SequenceItem.Clone">
            <summary>
            Clone this SequenceItem using deep copy.
            </summary>
            <returns>The cloned SequenceItem.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.SequenceItem.CloneFrom(DvtkHighLevelInterface.Dicom.Other.SequenceItem)">
            <summary>
            Clear all attributes from this SequenceItem and clone all attributes
            from the supplied SequenceItem.
            </summary>
            <param name="sequenceItem">The SequenceItem to clone from.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.SequenceItem.Set(DvtkData.Dimse.Tag,DvtkData.Dimse.VR,System.Byte[])">
            <summary>
            Adds a single attribute with the tag, VR and value specified.
            </summary>
            <remarks>
            Only use this method for setting an attribute with VR OB, OF or OW.
            <br></br>br&gt;
            If an attribute already exists with this tag, it is removed first before it is again
            added.
            </remarks>
            <param name="dvtkDataTag">The tag of the attribute.</param>
            <param name="vR">The VR (may only be OB, OF or OW) of the attribute.</param>
            <param name="value">The value of the attribute.</param>
            <exception cref="T:System.ArgumentException">
            dvtkDataTag is not valid for setting a DataSet attribute.<br></br>
            -or-<br></br>
            vR is unequal to OB, OF or OW.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is a null reference.
            </exception>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.SequenceItem.Set(DvtkData.Dimse.Tag,DvtkData.Dimse.VR,System.Object[])">
            <summary>
            Adds a single attribute with the tag, VR and values specified.
            </summary>
            <remarks>
            If an attribute already exists with this tag, it is removed first before it is again
            added.
            </remarks>
            <param name="dvtkDataTag">The tag of the attribute.</param>
            <param name="vR">The VR of the attribute.</param>
            <param name="values">
            The values of the attribute. Do not use the DICOM delimeter '\' directly. Instead supply
            multiple values arguments for this method when adding a single attribute with multiple values.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="dvtkDataTag"/> is not valid for setting a DataSet attribute.<br></br>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="values"/> is a null reference.
            </exception>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.SequenceItem.Set(DvtkData.Dimse.Tag,DvtkData.Dimse.VR,DvtkHighLevelInterface.Dicom.Other.Values)">
            <summary>
            Adds a single attribute with the tag, VR and values specified.
            </summary>
            <remarks>
            If an attribute already exists with this tag, it is removed first before it is again
            added.
            </remarks>
            <param name="dvtkDataTag">The tag of the attribute.</param>
            <param name="vR">The VR of the attribute.</param>
            <param name="values">The values, which will be copied from another attribute, for this attribute.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="dvtkDataTag"/> is not valid for setting a DataSet attribute.<br></br>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="values"/> is a null reference.
            </exception>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.SequenceItem.Set(System.String,DvtkData.Dimse.VR,System.Byte[])">
            <summary>
            Adds a single attribute with the tag sequence, VR and value specified.
            </summary>
            <remarks>
            Only use this method for setting an attribute with VR OB, OF or OW.
            <br></br><br></br>
            If an attribute already exists with this tag, it is removed first before it is again
            added.
            <br></br><br></br>
            If sequence items (each with a sequence item index) are specified in the tag sequence,
            empty sequence items will be added automatically to avoid gaps in the sequence items of sequence
            attributes.
            </remarks>
            <param name="tagSequence">The tag sequence of the attribute.</param>
            <param name="vR">The VR (may only be OB, OF or OW) of the attribute.</param>
            <param name="value">The value of the attribute.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="dvtkDataTag"/> is not valid for setting an attribute.<br></br>
            -or-<br></br>
            <paramref name="dvtkDataTag"/> is not valid for setting a DataSet attribute.<br></br>
            -or-<br></br>
            <paramref name="vR"/> is unequal to OB, OF or OW.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is a null reference.
            </exception>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.SequenceItem.Set(System.String,DvtkData.Dimse.VR,System.Object[])">
            <summary>
            Adds a single attribute with the tag sequence, VR and values specified.
            </summary>
            <remarks>
            If an attribute already exists with this tag, it is removed first before it is again
            added.
            <br></br><br></br>
            If sequence items (each with a sequence item index) are specified in the tag sequence,
            empty sequence items will be added automatically to avoid gaps in the sequence items of sequence
            attributes.
            </remarks>
            <param name="tagSequence">The tag sequence of the attribute.</param>
            <param name="vR">The VR of the attribute.</param>
            <param name="values">
            The values of the attribute. Do not use the DICOM delimeter '\' directly. Instead supply
            multiple values arguments for this method when adding a single attribute with multiple values.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="dvtkDataTag"/> is not valid for setting an attribute.<br></br>
            -or-<br></br>
            <paramref name="dvtkDataTag"/> is not valid for setting a DataSet attribute.<br></br>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="values"/> is a null reference.
            </exception>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.SequenceItem.Set(System.String,DvtkData.Dimse.VR,DvtkHighLevelInterface.Dicom.Other.Values)">
            <summary>
            Adds a single attribute with the tag sequence, VR and values specified.
            </summary>
            <remarks>
            If an attribute already exists with this tag, it is removed first before it is again
            added.
            <br></br><br></br>
            If sequence items (each with a sequence item index) are specified in the tag sequence,
            empty sequence items will be added automatically to avoid gaps in the sequence items of sequence
            attributes.
            </remarks>
            <param name="tagSequence">The tag sequence of the attribute.</param>
            <param name="vR">The VR of the attribute.</param>
            <param name="values">The values, which will be copied from another attribute, for this attribute.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="dvtkDataTag"/> is not valid for setting an attribute.<br></br>
            -or-<br></br>
            <paramref name="dvtkDataTag"/> is not valid for setting a DataSet attribute.<br></br>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="values"/> is a null reference.
            </exception>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.SequenceItem.DvtkDataSequenceItem">
            <summary>
            The encapsulated DvtkData sequence item.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Dicom.Other.InvalidAttribute">
            <summary>
            Represents a non existing Dicom attribute.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.InvalidAttribute.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.InvalidAttribute.#ctor(DvtkHighLevelInterface.Dicom.Other.TagSequence)">
            <summary>
            Constructor.
            </summary>
            <param name="tagSequence">Tag sequence used to retrieve the attribute.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.InvalidAttribute.AddItem(DvtkHighLevelInterface.Dicom.Other.SequenceItem)">
            <summary>
            Adds a sequence item to the end of the item list.
            </summary>
            <remarks>
            This method is only meaningfull if this instance has a VR SQ.
            </remarks>
            <param name="item">The sequence item to add.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.InvalidAttribute.ClearItems">
            <summary>
            Clears all sequence items present in the attribute.
            </summary>
            <remarks>
            This method is only meaningfull if this instance has a VR SQ.
            </remarks>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.InvalidAttribute.Clone(DvtkHighLevelInterface.Dicom.Other.AttributeSet)">
            <summary>
            Creates a deep copy of this instance.
            </summary>
            <param name="parentAttributeSetToCloneTo">
            The AttributeSet the new cloned Attribute wil become part of.
            </param>
            <returns>The created deep copy of this instance.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.InvalidAttribute.Delete">
            <summary>
            Deletes this instance from the AttributeSet it is contained in.
            </summary>
            <remarks>
            <b>Don't use this instance anymore after calling this method!</b>
            </remarks>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.InvalidAttribute.GetItem(System.Int32)">
            <summary>
            Gets a sequence item.
            </summary>
            <remarks>
            This method is only meaningfull if this instance has a VR SQ.
            </remarks>
            <param name="oneBasedIndex">The one based index.</param>
            <returns>The sequence item.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.InvalidAttribute.InsertItem(System.Int32,DvtkHighLevelInterface.Dicom.Other.SequenceItem)">
            <summary>
            Insert a Sequence Item at a specified position.
            </summary>
            <param name="oneBasedIndex">The one based index.</param>
            <param name="item">The Sequence item to insert.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.InvalidAttribute.RemoveItemAt(System.Int32)">
            <summary>
            Removes a sequence item.
            </summary>
            <param name="oneBasedIndex">The one based index</param>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.InvalidAttribute.Exists">
            <summary>
            Indicates if the attribute exists.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.InvalidAttribute.ItemCount">
            <summary>
            Gets the number of items of the attribute.
            </summary>
            <remarks>
            This property is only meaningfull if this instance has a VR SQ.
            </remarks>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.InvalidAttribute.Name">
            <summary>
            Gets or sets the name of the attribute.
            </summary>
            <remarks>
            An empty string means no name available.
            </remarks>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.InvalidAttribute.Values">
            <summary>
            Gets the values of the attribute.
            </summary>
            <remarks>
            This property is only meaningfull if this instance does not have a VR SQ, OB, OW, OF or UN.
            </remarks>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.InvalidAttribute.VM">
            <summary>
            Gets the value multiplicity of the attribute.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.InvalidAttribute.VR">
            <summary>
            Gets the VR of the attribute.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Dicom.Other.BooleanExpressionTwoDataSetsMapsAttributes">
            <summary>
            Class that is able to evaluate two datasets by comparing the values of two specific attributes of those datasets.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Dicom.Other.BooleanExpressionTwoDataSets">
            <summary>
            Represents a boolean expression that can evaluate two data sets.
            <br></br><br></br>
            STILL WORK IN PROGRESS!
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.BooleanExpressionTwoDataSets.MapsAttributes(System.String,System.String)">
            <summary>
            Return an instance of the a class that is able to evaluate two datasets by comparing the values of two specific attributes of those datasets.
            </summary>
            <param name="tagSequence1">The first tag sequence.</param>
            <param name="tagSequence2">The second tag sequence.</param>
            <returns>A BooleanExpressionTwoDataSets instance.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.BooleanExpressionTwoDataSetsMapsAttributes.#ctor(System.String,System.String)">
            <summary>
            Default constructor. 
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.BooleanExpressionTwoDataSetsMapsAttributes.Evaluate(DvtkHighLevelInterface.Dicom.Other.DataSet,DvtkHighLevelInterface.Dicom.Other.DataSet)">
            <summary>
            Evaluates two datasets by comparing the values of two specific attributes of those datasets.
            </summary>
            <param name="dataSet1">Dataset 1.</param>
            <param name="dataSet2">Dataset 2.</param>
            <returns>Boolean indicating if the values of two specific attributes of the supplied datasets are the same.</returns>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Other.HighLevelInterface">
            <summary>
            Hidden class that stores all central used instances from the HLI assembly.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.HighLevelInterface.tempFileCollection">
            <summary>
            See property TempFileCollection.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Other.HighLevelInterface.TempFileCollection">
            <summary>
            Contains the full file names of all temporary files (files that need to
            be deleted automatically when unloading the HLI assembly). Only use this
            collection when you know what you are doing!
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.InformationModel.InstanceStateEnum">
            <summary>
            Possible states of an instance.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.InformationModel.InstanceStateEnum.InstanceCreated">
            <summary>
            State of this instance.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.InformationModel.InstanceStateEnum.InstanceStored">
            <summary>
            State of this instance.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.InformationModel.InstanceStateEnum.InstanceMppsCompleted">
            <summary>
            State of this instance.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.InformationModel.InstanceStateEnum.InstanceStorageCommitRequested">
            <summary>
            State of this instance.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.InformationModel.InstanceStateEnum.InstanceStorageCommitReportedSuccess">
            <summary>
            State of this instance.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.InformationModel.InstanceStateEnum.InstanceStorageCommitReportedFailure">
            <summary>
            State of this instance.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.InformationModel.ReferencedSopItem">
            <summary>
            Summary description for ReferencedSopItem.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.ReferencedSopItem.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="sopClassUid">SOP class UID.</param>
            <param name="sopInstanceUid">SOP instance UID.</param>
        </member>
        <member name="P:DvtkHighLevelInterface.InformationModel.ReferencedSopItem.SopClassUid">
            <summary>
            Gets the SOP class UID.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.InformationModel.ReferencedSopItem.SopInstanceUid">
            <summary>
            Gets the SOP instance UID.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.InformationModel.ReferencedSopItem.InstanceState">
            <summary>
            Gets the instance state.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.InformationModel.QueryRetrievePatientRootInformationModel">
            <summary>
            Summary description for QueryRetrievePatientRootInformationModel.
            Provides a wrapper class around the Dvtk.Dicom.InformationEntity.QueryRetrieve.PatientRootInformationModel class.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.QueryRetrievePatientRootInformationModel.#ctor">
            <summary>
            Class constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.QueryRetrievePatientRootInformationModel.IsInstanceInInformationModel(System.String,System.String)">
            <summary>
            Check if the given instance is present in the Information Model. The instance will be at the leaf nodes of the Information Model.
            </summary>
            <param name="sopClassUid">SOP Class UID to search for.</param>
            <param name="sopInstanceUid">SOP Instance UID to search for.</param>
            <returns>Boolean - true if instance found in the Information Model, otherwise false.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.QueryRetrievePatientRootInformationModel.RetrieveInformationModel(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            Retrieve data from the Information Model using the given retrieve message.
            </summary>
            <param name="retrieveMessage">Message used to retrieve the Information Model.</param>
            <returns>File list - containing the filenames of all instances matching the retrieve dataset attributes.</returns>
        </member>
        <member name="T:DvtkHighLevelInterface.Dicom.Threads.InboundDicomMessageFilter">
            <summary>
            Class that can be used to change an incoming DICOM message.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.InboundDicomMessageFilter.Apply(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            Makes a change to a DICOM message.
            </summary>
            <param name="dicomMessage"></param>
        </member>
        <member name="T:DvtkHighLevelInterface.Dicom.Other.PresentationContextCollection">
            <summary>
            Represents a collection of PresentationContexts.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.PresentationContextCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.PresentationContextCollection.#ctor(DvtkHighLevelInterface.Dicom.Other.PresentationContext[])">
            <summary>
            Constructor with initialization. Shallow copy.
            </summary>
            <param name="arrayOfValues">Values to copy.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="arrayOfValues"/> is null.</exception>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.PresentationContextCollection.#ctor(DvtkData.Dul.RequestedPresentationContextList)">
            <summary>
            Constructor that initialized this instance with a DvtkData RequestedPresentationContextList.
            </summary>
            <param name="dvtkDataRequestedPresentationContextList">The DvtkData RequestedPresentationContextList.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.PresentationContextCollection.#ctor(DvtkData.Dul.AcceptedPresentationContextList)">
            <summary>
            Constructor that initialized this instance with a DvtkData AcceptedPresentationContextList.
            </summary>
            <param name="dvtkDataAcceptedPresentationContextList">The DvtkData AcceptedPresentationContextList.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.PresentationContextCollection.Add(DvtkHighLevelInterface.Dicom.Other.PresentationContext)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The item to add to the <see cref="T:System.Collections.IList"/>. </param>
            <returns>The position into which the new element was inserted.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.PresentationContextCollection.AddRange(DvtkHighLevelInterface.Dicom.Other.PresentationContextCollection)">
            <summary>
            Adds another PresentationContextCollection to the end of this instance.
            </summary>
            <param name="presentationContextCollection">The other PresentationContextCollection to add.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.PresentationContextCollection.Contains(DvtkHighLevelInterface.Dicom.Other.PresentationContext)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IList"/> contains a specific item.
            </summary>
            <param name="value">The item to locate in the <see cref="T:System.Collections.IList"/>.</param>
            <returns><see langword="true"/> if the item is found in the <see cref="T:System.Collections.IList"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.PresentationContextCollection.IndexOf(DvtkHighLevelInterface.Dicom.Other.PresentationContext)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The item to locate in the <see cref="T:System.Collections.IList"/>.</param>
            <returns>The index of <c>value</c> if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.PresentationContextCollection.Insert(System.Int32,DvtkHighLevelInterface.Dicom.Other.PresentationContext)">
            <summary>
            Inserts an item to the IList at the specified position.
            </summary>
            <param name="index">The zero-based index at which <c>value</c> should be inserted. </param>
            <param name="value">The item to insert into the <see cref="T:System.Collections.IList"/>.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.PresentationContextCollection.Remove(DvtkHighLevelInterface.Dicom.Other.PresentationContext)">
            <summary>
            Removes the first occurrence of a specific item from the IList.
            </summary>
            <param name="value">The item to remove from the <see cref="T:System.Collections.IList"/>.</param>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.PresentationContextCollection.AcceptedAbstractSyntaxes">
            <summary>
            Gets all accepted abstract syntaxes.
            </summary>
            <remarks>
            Only use this property for A-ASSOCIATE-AC PresentationContexts.
            </remarks>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.PresentationContextCollection.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index.
            </summary>
            <value>The item at the specified <c>index</c>.</value>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Threads.ThreadCollection">
            <summary>
            A collection of threads.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Threads.ThreadCollection.Insert(System.Int32,DvtkHighLevelInterface.Common.Threads.Thread)">
            <summary>
            Inserts an item to the IList at the specified position.
            </summary>
            <param name="index">The zero-based index at which <c>value</c> should be inserted. </param>
            <param name="value">The item to insert into the <see cref="T:System.Collections.IList"/>.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Threads.ThreadCollection.Remove(DvtkHighLevelInterface.Common.Threads.Thread)">
            <summary>
            Removes the first occurrence of a specific item from the IList.
            </summary>
            <param name="value">The item to remove from the <see cref="T:System.Collections.IList"/>.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Threads.ThreadCollection.Contains(DvtkHighLevelInterface.Common.Threads.Thread)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IList"/> contains a specific item.
            </summary>
            <param name="value">The item to locate in the <see cref="T:System.Collections.IList"/>.</param>
            <returns><see langword="true"/> if the item is found in the <see cref="T:System.Collections.IList"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Threads.ThreadCollection.IndexOf(DvtkHighLevelInterface.Common.Threads.Thread)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The item to locate in the <see cref="T:System.Collections.IList"/>.</param>
            <returns>The index of <c>value</c> if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Threads.ThreadCollection.Add(DvtkHighLevelInterface.Common.Threads.Thread)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The item to add to the <see cref="T:System.Collections.IList"/>. </param>
            <returns>The position into which the new element was inserted.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Threads.ThreadCollection.GetStartedThreadsOverviewAsHTML(System.String,System.String,System.String)">
            <summary>
            Get a HTML table containing an overview of all started Threads.
            <br></br><br></br>
            When no started Thread exists, the supplied noStartedThreadsText is returned.
            </summary>
            <param name="headerText">Text to be displayed in the table header.</param>
            <param name="noStartedThreadsText">Text that is returned when no started Threads exist.</param>
            <param name="hyperlinkFromDirectory">If hyperlinks to results are in the same directory as specified here, a relative path is used.</param>
            <returns></returns>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Threads.ThreadCollection.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index.
            </summary>
            <value>The item at the specified <c>index</c>.</value>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Compare.ValidationRuleHl7Attribute">
            <summary>
            Specifies how a HL7 attribute should be validated.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.ValidationRuleHl7Attribute.empty">
            <summary>
            See static property Empty.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.ValidationRuleHl7Attribute.#ctor">
            <summary>
            Default constructor.
            </summary>
            <remarks><b>Do not use this constructor. It may only be used indirectly for serialization purposes.</b></remarks>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.ValidationRuleHl7Attribute.#ctor(Dvtk.Hl7.Hl7Tag,DvtkHighLevelInterface.Common.Compare.FlagsHl7Attribute)">
            <summary>
            Constructor.
            </summary>
            <param name="hl7Tag">HL7 tag indicating the HL7 attribute to validate.</param>
            <param name="flagsHl7Attribute">The flag(s) indicating how to validate this HL7 Attribute.</param>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Compare.ValidationRuleHl7Attribute.Hl7Tag">
            <summary>
            Gets or sets the HL7 tag.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.InformationModel.ReferencedSopItemCollection">
            <summary>
            Summary description for ReferencedSopItemCollection.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.ReferencedSopItemCollection.Add(DvtkHighLevelInterface.InformationModel.ReferencedSopItem)">
            <summary>
            Adds an object to the end of the <see cref="T:DvtkHighLevelInterface.InformationModel.ReferencedSopItemCollection"/>.
            </summary>
            <param name="value">The <see cref="T:DvtkHighLevelInterface.InformationModel.ReferencedSopItem"/> to be added to the end of the <see cref="T:DvtkHighLevelInterface.InformationModel.ReferencedSopItemCollection"/>.</param>
            <returns>The <see cref="T:DvtkHighLevelInterface.InformationModel.ReferencedSopItemCollection"/> index at which the value has been added.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.ReferencedSopItemCollection.IndexOf(DvtkHighLevelInterface.InformationModel.ReferencedSopItem)">
            <summary>
            Searches for the specified <see cref="T:DvtkHighLevelInterface.InformationModel.ReferencedSopItem"/> and 
            returns the zero-based index of the first occurrence within the entire <see cref="T:DvtkHighLevelInterface.InformationModel.ReferencedSopItemCollection"/>.
            </summary>
            <param name="value">The <see cref="T:DvtkHighLevelInterface.InformationModel.ReferencedSopItem"/> to locate in the <see cref="T:DvtkHighLevelInterface.InformationModel.ReferencedSopItemCollection"/>.</param>
            <returns>
            The zero-based index of the first occurrence of value within the entire <see cref="T:DvtkHighLevelInterface.InformationModel.ReferencedSopItemCollection"/>, 
            if found; otherwise, -1.
            </returns>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.ReferencedSopItemCollection.Insert(System.Int32,DvtkHighLevelInterface.InformationModel.ReferencedSopItem)">
            <summary>
            Inserts an <see cref="T:DvtkHighLevelInterface.InformationModel.ReferencedSopItem"/> element into the <see cref="T:DvtkHighLevelInterface.InformationModel.ReferencedSopItemCollection"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="value">The <see cref="T:DvtkHighLevelInterface.InformationModel.ReferencedSopItem"/> to insert.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.ReferencedSopItemCollection.Remove(DvtkHighLevelInterface.InformationModel.ReferencedSopItem)">
            <summary>
            Removes the first occurrence of a specific <see cref="T:DvtkHighLevelInterface.InformationModel.ReferencedSopItem"/> from the <see cref="T:DvtkHighLevelInterface.InformationModel.ReferencedSopItemCollection"/>.
            </summary>
            <param name="value">The <see cref="T:DvtkHighLevelInterface.InformationModel.ReferencedSopItem"/> to remove from the <see cref="T:DvtkHighLevelInterface.InformationModel.ReferencedSopItemCollection"/>.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.ReferencedSopItemCollection.Contains(DvtkHighLevelInterface.InformationModel.ReferencedSopItem)">
            <summary>
            Determines whether the <see cref="T:DvtkHighLevelInterface.InformationModel.ReferencedSopItemCollection"/> contains a specific element.
            </summary>
            <param name="value">The <see cref="T:DvtkHighLevelInterface.InformationModel.ReferencedSopItem"/> to locate in the <see cref="T:DvtkHighLevelInterface.InformationModel.ReferencedSopItemCollection"/>.</param>
            <returns>
            <c>true</c> if the <see cref="T:DvtkHighLevelInterface.InformationModel.ReferencedSopItemCollection"/> contains the specified value; 
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.ReferencedSopItemCollection.OnInsert(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes before inserting a new element into the collection instance.
            </summary>
            <param name="index">The zero-based index at which to insert value.</param>
            <param name="value">The new value of the element at index.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.ReferencedSopItemCollection.OnRemove(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes when removing an element from the collection instance.
            </summary>
            <param name="index">The zero-based index at which value can be found.</param>
            <param name="value">The value of the element to remove from index.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.ReferencedSopItemCollection.OnSet(System.Int32,System.Object,System.Object)">
            <summary>
            Performs additional custom processes before setting a value in the collection instance.
            </summary>
            <param name="index">The zero-based index at which oldValue can be found.</param>
            <param name="oldValue">The value to replace with newValue.</param>
            <param name="newValue">The new value of the element at index.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.ReferencedSopItemCollection.OnValidate(System.Object)">
            <summary>
            Performs additional custom processes when validating a value.
            </summary>
            <param name="value">The object to validate.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.ReferencedSopItemCollection.CopyTo(DvtkHighLevelInterface.InformationModel.ReferencedSopItem[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to a strong-typed <c>ReferencedSopItem[]</c>, 
            starting at a particular <c>ReferencedSopItem[]</c> index.
            </summary>
            <param name="array">
            The one-dimensional <c>ReferencedSopItem[]</c> that is the destination of the elements 
            copied from <see cref="T:System.Collections.ICollection"/>.
            The <c>ReferencedSopItem[]</c> must have zero-based indexing. 
            </param>
            <param name="index">
            The zero-based index in array at which copying begins.
            </param>
            <remarks>
            Provides the strongly typed member for <see cref="T:System.Collections.ICollection"/>.
            </remarks>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.ReferencedSopItemCollection.Find(System.String,System.String)">
            <summary>
            Try to find a a referenced item with the same SOP Class UID and SOP Instance UID as those given.
            </summary>
            <param name="sopClassUid">SOP Class UID to find.</param>
            <param name="sopInstanceUid">SOP Instance UID to find.</param>
            <returns>Matching referenced sop item - or null if no match.</returns>
        </member>
        <member name="P:DvtkHighLevelInterface.InformationModel.ReferencedSopItemCollection.Item(System.Int32)">
            <summary>
            Gets or sets an <see cref="T:DvtkHighLevelInterface.InformationModel.ReferencedSopItem"/> from the collection.
            </summary>
            <param name="index">The zero-based index of the collection member to get or set.</param>
            <value>The <see cref="T:DvtkHighLevelInterface.InformationModel.ReferencedSopItemCollection"/> at the specified index.</value>
        </member>
        <member name="T:DvtkHighLevelInterface.InformationModel.InformationModelControl">
            <summary>
            Information Model control class is to display the Patient, Study, Patient/Study information models. It is designed to handle Composite Data modek objects.
            
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.InformationModel.InformationModelControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.InformationModelControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.InformationModelControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.InformationModelControl.#ctor">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.InformationModelControl.SetInfoModel(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Sets the selected infromation models
            </summary>
            <param name="isPatientRoot">True-if patient root is enabled</param>
            <param name="isStudyRoot">True-if study root is enabled</param>
            <param name="isPatientStudyRoot">True- if patient/study root is enabled</param>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.InformationModelControl.LoadData(System.Collections.Generic.List{Dvtk.Dicom.InformationEntity.CompositeInfoModel.BaseCompositeInformationEntity},System.Collections.Generic.List{Dvtk.Dicom.InformationEntity.CompositeInfoModel.BaseCompositeInformationEntity},System.Collections.Generic.List{Dvtk.Dicom.InformationEntity.CompositeInfoModel.BaseCompositeInformationEntity})">
            <summary>
            Lods the composite datas to the view
            </summary>
            <param name="_patient">List of patients. This can be null if PatientRoot not selected</param>
            <param name="_study">List of studies. This can be null if StudyRoot not selected</param>
            <param name="_patientStudy">List of pateint/studies. This can be null if Patient/Study Root not selected</param>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.InformationModelControl.Resize(System.Int32,System.Int32)">
            <summary>
            Size of the control can be set from outside. So the cotrols re-sized accordingly
            </summary>
            <param name="height">new height of the control</param>
            <param name="width">new width of the control</param>
        </member>
        <member name="T:DvtkHighLevelInterface.Dicom.Threads.DicomThreadOptions">
            <summary>
            Summary description for DicomThreadOptions.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.Threads.DicomThreadOptions.autoValidate">
            <summary>
            See property AutoValidate.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.Threads.DicomThreadOptions.styleSheetFullFileName">
            <summary>
            See property StyleSheetFullFileName.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThreadOptions.#ctor">
            <summary>
            Hidden default constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThreadOptions.#ctor(DvtkHighLevelInterface.Dicom.Threads.DicomThread)">
            <summary>
            Constructor.
            </summary>
            <param name="dicomThread">The DicomThread these options belong to.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThreadOptions.LoadFromFile(System.String)">
            <summary>
            Load the options from a .ses file.
            </summary>
            <param name="sessionFileName">The full file name.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThreadOptions.SaveToFile(System.String)">
            <summary>
            Save the options to a .ses file.
            </summary>
            <param name="sessionFileName">The full file name.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThreadOptions.LoadDefinitionFile(System.String)">
            <summary>
            Load a definition file.
            </summary>
            <param name="filename">The file name.</param>
            <returns>Boolean indicating of the call succeeded.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThreadOptions.UnLoadDefinitionFile(System.String)">
            <summary>
            Unload a definition file.
            </summary>
            <param name="filename">The file name.</param>
            <returns>Boolean indicating of the call succeeded.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThreadOptions.CopyFrom(DvtkHighLevelInterface.Dicom.Threads.DicomThreadOptions)">
            <summary>
            Copy the options from another instance.
            </summary>
            <param name="dicomThreadOptions">The other instance to copy from.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.DicomThreadOptions.DeepCopyFrom(DvtkHighLevelInterface.Dicom.Threads.DicomThreadOptions)">
            <summary>
            Copy the options from another instance.
            </summary>
            <param name="dicomThreadOptions">The other instance to copy from.</param>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Threads.DicomThreadOptions.DefinitionFileApplicationEntityName">
            <summary>
            This name is used to select the appropriate definition file from the set of loaded
            definition files during validation.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Threads.DicomThreadOptions.DefinitionFileApplicationEntityVersion">
            <summary>
            This version is used to select the appropriate definition file from the set of loaded
            definition files during validation.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Threads.DicomThreadOptions.LocalAeTitle">
            <summary>
            Gets or sets the AE title used by the DicomThread instance.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Threads.DicomThreadOptions.LocalImplementationClassUid">
            <summary>
            Gets or sets the implementation class UID used by the DicomThread instance.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Threads.DicomThreadOptions.LocalImplementationVersionName">
            <summary>
            Gets or sets the implementation version name used by the DicomThread instance.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Threads.DicomThreadOptions.LocalMaximumLength">
            <summary>
            Gets or sets the maximum length of message fragment (P-DATA-TF PDU) that the 
            DicomThread instance can receive from the remote peer.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Threads.DicomThreadOptions.LocalPort">
            <summary>
            Gets or sets the port used by the DicomThread instance when listening for an incoming
            connection.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Threads.DicomThreadOptions.RemoteAeTitle">
            <summary>
            Gets or sets the AE title used by the remote peer.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Threads.DicomThreadOptions.RemoteHostName">
            <summary>
            Gets or sets the name that should be used when making a connection to the remote peer.
            It is best to enter the Internet Address of the SUT (in dot notation).
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Threads.DicomThreadOptions.RemoteImplementationClassUid">
            <summary>
            Gets or sets the implementation class UID used by the remote peer.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Threads.DicomThreadOptions.RemoteImplementationVersionName">
            <summary>
            Gets or sets the implementation version name used by the remote peer.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Threads.DicomThreadOptions.RemoteMaximumLength">
            <summary>
            Gets or sets the maximum length of message fragment (P-DATA-TF PDU) that the 
            remote peer can receive from the DicomThread instance.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Threads.DicomThreadOptions.RemotePort">
            <summary>
            Gets or sets the port used when making a connection to a remote peer.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Threads.DicomThreadOptions.RemoteRole">
            <summary>
            Gets of sets the remote role.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Threads.DicomThreadOptions.ScriptDirectory">
            <summary>
            The directory in which the Dicom test scripts are present.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Threads.DicomThreadOptions.SocketTimeout">
            <summary>
            The time-out in seconds to wait for incoming data over a connected socket.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Threads.DicomThreadOptions.StyleSheetFullFileName">
            <summary>
            The full file name of the stylesheet used to convert results .xml files to .html files.
            This stylesheet is used e.g. when the property ShowResults is set to true.
            
            The default value for this property is the executable path append with the file name "DVT_RESULTS.xslt".
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Threads.DicomThreadOptions.LogThreadStartingAndStoppingInParent">
            <summary>
            Gets or sets a boolean indicating if starting and stopping of the thread should be logged in the parent thread.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Threads.DicomThreadOptions.LogChildThreadsOverview">
            <summary>
            Gets or sets a boolean indicating if a child thread overview should be logged when stopping the thread.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Threads.DicomThreadOptions.AutoValidate">
            <summary>
            Gets or sets a boolean indicating if incoming messages should be automatically validated.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Threads.DicomThreadOptions.SummaryResultsFullFileName">
            <summary>
            Gets the summary full file name.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Threads.DicomThreadOptions.SummaryResultsFileNameOnly">
            <summary>
            Gets the summary file name only.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Threads.DicomThreadOptions.LogWaitingForCompletionChildThreads">
            <summary>
            Gets or sets a boolean indicating if waiting for child threads to complete should be logged.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Threads.DicomThreadOptions.LoadedDefinitionFileNames">
            <summary>
            Gets a list of loaded definition files.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Threads.DicomThreadOptions.NextSubResultsFileNameIndex">
            <summary>
            Gets the next results file name index.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Threads.DicomThreadOptions.SessionId">
            <summary>
            Gets or sets the session ID.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Threads.DicomThreadOptions.ResultsDirectory">
            <summary>
            The directory in which the results file(s) will be written.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Threads.DicomThreadOptions.DvtkScriptSession">
            <summary>
            Gets or sets the encapsulated DVTk ScriptSession instance.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Threads.DicomThreadOptions.GenerateDetailedResults">
            <summary>
            Gets or sets a boolean indicating if detailed results should be generated.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Threads.DicomThreadOptions.DvtPort">
            <summary>
            Use property LocalPort instead.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Threads.DicomThreadOptions.SutPort">
            <summary>
            Use property RemotePort instead.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Threads.DicomThreadOptions.SutIpAddress">
            <summary>
            Use property RemoteHostName instead.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Threads.DicomThreadOptions.DataDirectory">
            <summary>
            Gets or sets the directory in which received DICOM messages will be stored as
            (pseudo) DICOM files.
            </summary>		
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Threads.DicomThreadOptions.StrictValidation">
            <summary>
            Gets or sets a boolean indicating if strict validation should be performed.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Threads.DicomThreadOptions.DvtAeTitle">
            <summary>
            Use property LocalAeTitle instead.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Threads.DicomThreadOptions.SutAeTitle">
            <summary>
            Use property RemoteAeTitle instead.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Threads.DicomThreadOptions.StorageMode">
            <summary>
            Gets or sets the storage mode.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Threads.DicomThreadOptions.SecureConnection">
            <summary>
            Gets or sets a boolean indicating if secure sockets is enabled.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Threads.DicomThreadOptions.CredentialsFilename">
            <summary>
            Gets or sets the credentials file name.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Threads.DicomThreadOptions.CertificateFilename">
            <summary>
            Gets or sets the certificate file name.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Threads.DicomThreadOptions.ShowResults">
            <summary>
            Gets or sets a boolean indicating if the detail results should be shown after the DicomThread instance stops.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Dicom.Other.AttributeCollection">
            <summary>
            Collection of (possible unrelated) Attributes.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.AttributeCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.AttributeCollection.#ctor(DvtkHighLevelInterface.Dicom.Other.Attribute[])">
            <summary>
            Constructor. 
            
            Shallow copy.
            </summary>
            <param name="arrayOfValues">Values to copy.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.AttributeCollection.Add(DvtkHighLevelInterface.Dicom.Other.Attribute)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The item to add to the <see cref="T:System.Collections.IList"/>. </param>
            <returns>The position into which the new element was inserted.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.AttributeCollection.AddRange(DvtkHighLevelInterface.Dicom.Other.AttributeCollection)">
            <summary>
            Adds another collection to this collection.
            </summary>
            <param name="attributeCollection">The other collection to add.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.AttributeCollection.Contains(DvtkHighLevelInterface.Dicom.Other.Attribute)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IList"/> contains a specific item.
            </summary>
            <param name="value">The item to locate in the <see cref="T:System.Collections.IList"/>.</param>
            <returns><see langword="true"/> if the item is found in the <see cref="T:System.Collections.IList"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.AttributeCollection.IndexOf(DvtkHighLevelInterface.Dicom.Other.Attribute)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The item to locate in the <see cref="T:System.Collections.IList"/>.</param>
            <returns>The index of <c>value</c> if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.AttributeCollection.Insert(System.Int32,DvtkHighLevelInterface.Dicom.Other.Attribute)">
            <summary>
            Inserts an item to the IList at the specified position.
            </summary>
            <param name="index">The zero-based index at which <c>value</c> should be inserted. </param>
            <param name="value">The item to insert into the <see cref="T:System.Collections.IList"/>.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.AttributeCollection.Remove(DvtkHighLevelInterface.Dicom.Other.Attribute)">
            <summary>
            Removes the first occurrence of a specific item from the IList.
            </summary>
            <param name="value">The item to remove from the <see cref="T:System.Collections.IList"/>.</param>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.AttributeCollection.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index.
            </summary>
            <value>The item at the specified <c>index</c>.</value>
        </member>
        <member name="T:DvtkHighLevelInterface.Dicom.Messages.ReleaseRq">
            <summary>
            Represents a Dicom A_RELEASE_RQ.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Messages.ReleaseRq.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Messages.ReleaseRq.#ctor(DvtkData.Dul.A_RELEASE_RQ)">
            <summary>
            Constructor to encapsulate an existing DvtkData A_RELEASE_RQ.
            </summary>
            <param name="dvtkDataReleaseRq">The encapsulated DvtkData A_RELEASE_RQ</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Messages.ReleaseRq.ToString">
            <summary>
            Returns a String that represents this instance.
            </summary>
            <returns>A String that represents this instance.</returns>
        </member>
        <member name="T:DvtkHighLevelInterface.Dicom.Messages.DicomMessageCollection">
            <summary>
            Collection of DicomMessages.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Messages.DicomMessageCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Messages.DicomMessageCollection.#ctor(DvtkHighLevelInterface.Dicom.Messages.DicomMessage[])">
            <summary>
            Constructor with initialization. Shallow copy.
            </summary>
            <param name="arrayOfValues">values to copy.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Messages.DicomMessageCollection.Add(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The item to add to the <see cref="T:System.Collections.IList"/>. </param>
            <returns>The position into which the new element was inserted.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Messages.DicomMessageCollection.Contains(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IList"/> contains a specific item.
            </summary>
            <param name="value">The item to locate in the <see cref="T:System.Collections.IList"/>.</param>
            <returns><see langword="true"/> if the item is found in the <see cref="T:System.Collections.IList"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Messages.DicomMessageCollection.DicomMessagesForDimseCommand(DvtkData.Dimse.DimseCommand)">
            <summary>
            Return the DicomMessages from this collection that have the specified DimseCommand.
            </summary>
            <param name="dimseCommand">the DimseCommand.</param>
            <returns>The DicomMessages with the specified DimseCommand.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Messages.DicomMessageCollection.GetDataSets">
            <summary>
            Get all the DataSets that are present in the DICOM messages.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Messages.DicomMessageCollection.IndexOf(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The item to locate in the <see cref="T:System.Collections.IList"/>.</param>
            <returns>The index of <c>value</c> if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Messages.DicomMessageCollection.Insert(System.Int32,DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            Inserts an item to the IList at the specified position.
            </summary>
            <param name="index">The zero-based index at which <c>value</c> should be inserted. </param>
            <param name="value">The item to insert into the <see cref="T:System.Collections.IList"/>.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Messages.DicomMessageCollection.Remove(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            Removes the first occurrence of a specific item from the IList.
            </summary>
            <param name="value">The item to remove from the <see cref="T:System.Collections.IList"/>.</param>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Messages.DicomMessageCollection.CCancelRequests">
            <summary>
            All the DicomMessages in this collection that have a DimseCommand CCANCELRQ.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Messages.DicomMessageCollection.CEchoRequests">
            <summary>
            All the DicomMessages in this collection that have a DimseCommand CECHORQ.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Messages.DicomMessageCollection.CEchoResponses">
            <summary>
            All the DicomMessages in this collection that have a DimseCommand CECHORSP.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Messages.DicomMessageCollection.CFindRequests">
            <summary>
            All the DicomMessages in this collection that have a DimseCommand CFINDRQ.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Messages.DicomMessageCollection.CFindResponses">
            <summary>
            All the DicomMessages in this collection that have a DimseCommand CFINDRSP.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Messages.DicomMessageCollection.CGetRequests">
            <summary>
            All the DicomMessages in this collection that have a DimseCommand CGETRQ.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Messages.DicomMessageCollection.CGetResponses">
            <summary>
            All the DicomMessages in this collection that have a DimseCommand CGETRSP.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Messages.DicomMessageCollection.CMoveRequests">
            <summary>
            All the DicomMessages in this collection that have a DimseCommand CMOVERQ.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Messages.DicomMessageCollection.CMoveResponses">
            <summary>
            All the DicomMessages in this collection that have a DimseCommand CMOVERSP.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Messages.DicomMessageCollection.CStoreRequests">
            <summary>
            All the DicomMessages in this collection that have a DimseCommand CSTORERQ.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Messages.DicomMessageCollection.CStoreResponses">
            <summary>
            All the DicomMessages in this collection that have a DimseCommand CSTORERSP.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Messages.DicomMessageCollection.DataSets">
            <summary>
            Gets all data sets that are present in this collection.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Messages.DicomMessageCollection.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index.
            </summary>
            <value>The item at the specified <c>index</c>.</value>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Messages.DicomMessageCollection.NActionRequests">
            <summary>
            All the DicomMessages in this collection that have a DimseCommand NACTIONRQ.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Messages.DicomMessageCollection.NActionResponses">
            <summary>
            All the DicomMessages in this collection that have a DimseCommand NACTIONRSP.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Messages.DicomMessageCollection.NCreateRequests">
            <summary>
            All the DicomMessages in this collection that have a DimseCommand NCREATERQ.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Messages.DicomMessageCollection.NCreateResponses">
            <summary>
            All the DicomMessages in this collection that have a DimseCommand NCREATERSP.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Messages.DicomMessageCollection.NDeleteRequests">
            <summary>
            All the DicomMessages in this collection that have a DimseCommand NDELETERQ.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Messages.DicomMessageCollection.NDeleteResponses">
            <summary>
            All the DicomMessages in this collection that have a DimseCommand NDELETERSP.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Messages.DicomMessageCollection.NEventReportRequests">
            <summary>
            All the DicomMessages in this collection that have a DimseCommand NEVENTREPORTRQ.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Messages.DicomMessageCollection.NEventReportResponses">
            <summary>
            All the DicomMessages in this collection that have a DimseCommand NEVENTREPORTRSP.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Messages.DicomMessageCollection.NGetRequests">
            <summary>
            All the DicomMessages in this collection that have a DimseCommand NGETRQ.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Messages.DicomMessageCollection.NGetResponses">
            <summary>
            All the DicomMessages in this collection that have a DimseCommand NGETRSP.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Messages.DicomMessageCollection.NSetRequests">
            <summary>
            All the DicomMessages in this collection that have a DimseCommand NSETRQ.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Messages.DicomMessageCollection.NSetResponses">
            <summary>
            All the DicomMessages in this collection that have a DimseCommand NSETRSP.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Dicom.Messages.AssociateRq">
            <summary>
            Represents a Dicom A_ASSOCIATE_RQ.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Messages.AssociateRq.#ctor">
            <summary>
            Hide default constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Messages.AssociateRq.#ctor(DvtkData.Dul.A_ASSOCIATE_RQ)">
            <summary>
            Constructor to encapsulate an existing DvtkData A_ASSOCIATE_RQ.
            </summary>
            <param name="dvtkDataAssociateRq">The encapsulated DvtkData A_ASSOCIATE_RQ</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Messages.AssociateRq.CreatePresentationContextsForAssociateAc">
            <summary>
            Creates presentation contexts to be used in an A-ASSOCIATE-AC that are based on the
            presentation contexts of this instance.
            </summary>
            <remarks>
            The following holds for the returned presentation contexts:
            - All requested presentation contexts will be accepted (have result field 0).
            - For each requested presentation context, the first proposed transfer syntax will be used.
            </remarks>
            <returns>The created presentation contexts.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Messages.AssociateRq.CreatePresentationContextsForAssociateAc(DvtkHighLevelInterface.Dicom.Other.SopClasses)">
            <summary>
            Creates presentation contexts to be used in an A-ASSOCIATE-AC that are based on the
            presentation contexts of this instance.
            </summary>
            <remarks>
            The following holds for the returned presentation contexts:
            - All requested presentation contexts with an abstract syntax contained in the supplied
              SOP classes will be accepted (have result field 0). The rest will be rejected
              (have result field 3).
            - For each accepted requested presentation context, the first proposed transfer syntax 
              will be used.
            </remarks>
            <param name="sopClasses">The SOP Classes to accept.</param>
            <returns>The created presentation contexts.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Messages.AssociateRq.CreatePresentationContextsForAssociateAc(DvtkHighLevelInterface.Dicom.Other.SopClasses,DvtkHighLevelInterface.Dicom.Other.TransferSyntaxes[])">
            <summary>
            Creates presentation contexts to be used in an A-ASSOCIATE-AC that are based on the
            presentation contexts of this instance.
            </summary>
            <remarks>
            The following holds for the returned presentation contexts:<br></br>
            - All requested presentation contexts with an abstract syntax not contained in the supplied
              SOP classes will be rejected (have result field 3).<br></br>
            - For each other requested presentation contex that has an abstract syntax contained in
              the supplied SOP classes, do the following:<br></br>
              1)<br></br>
              Check if one or more of the requested transfer syntaxes is present in the first supplied
              TransferSyntaxes instance. If this is the case, use the requested transfer syntax that is
              requested before the other ones in the accepted presentation context counterpart (has
              result field 0).<br></br>
              2)<br></br>
              If no requested transfer syntaxes was present, try this with the second supplied
              TransferSyntaxes instance.<br></br>
              3) If no requested transfer syntaxes was present is in any supplied TransferSyntaxes
              instance, reject the presentation context with result 4.<br></br>
              
              Note that a difference exists between supplying one TransferSyntaxes instance with all
              transfer syntaxes to accept and supplying multiple TransferSyntaxes instances each containing
              only one transfer syntax. In the first case, the preference (order of proposed transfer
              syntaxes) of the SCU will be used, in the second case the preference of the caller of this
              method will be used.
            </remarks>
            <param name="sopClasses">The SOP Classes to accept.</param>
            <param name="transferSyntaxesList">The transfer syntaxes to accept.</param>
            <returns>The created presentation contexts.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Messages.AssociateRq.CreatePresentationContextsForAssociateAc(DvtkHighLevelInterface.Dicom.Other.TransferSyntaxes[])">
            <summary>
            Creates presentation contexts to be used in an A-ASSOCIATE-AC that are based on the
            presentation contexts of this instance.
            </summary>
            <remarks>
            The following holds for the returned presentation contexts:<br></br>
            - For each requested presentation contex, do the following:<br></br>
              1)<br></br>
              Check if one or more of the requested transfer syntaxes is present in the first supplied
              TransferSyntaxes instance. If this is the case, use the requested transfer syntax that is
              requested before the other ones in the accepted presentation context counterpart (has
              result field 0).<br></br>
              2)<br></br>
              If no requested transfer syntaxes was present, try this with the second supplied
              TransferSyntaxes instance.<br></br>
              3) If no requested transfer syntaxes was present is in any supplied TransferSyntaxes
              instance, reject the presentation context with result 4.<br></br><br></br>
              
              Note that a difference exists between supplying one TransferSyntaxes instance with all
              transfer syntaxes to accept and supplying multiple TransferSyntaxes instances each containing
              only one transfer syntax. In the first case, the preference (order of proposed transfer
              syntaxes) of the SCU will be used, in the second case the preference of the caller of this
              method will be used.
            </remarks>
            <param name="transferSyntaxesList">The transfer syntaxes to accept.</param>
            <returns>The created presentation contexts.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Messages.AssociateRq.DetermineTransferSyntaxToAccept(System.Collections.Specialized.StringCollection,DvtkHighLevelInterface.Dicom.Other.TransferSyntaxes[])">
            <summary>
            Determines the transfer syntax to accept in an A-ASSOCIATE-AC presentation context,
            based on the proposed transfer syntaxes for one A-ASSOCIATE-RQ presentation context
            and the supplied transferSyntaxesList.
            </summary>
            <param name="transferSyntaxesFromAssociateRq">The proposed transfer syntaxes in an A-ASSOCIATE-AC presentation context.</param>
            <param name="transferSyntaxesList">The preference of accepting transfer syntaxes for the caller of this method.</param>
            <returns>
            The transfer syntax to accept in the associated A-ASSOCIATE-AC presentation context.<br></br><br></br>
            
            If no transfer syntax can be accepted, "" is returned.
            </returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Messages.AssociateRq.ToString">
            <summary>
            Returns a String that represents this instance.
            </summary>
            <returns>A String that represents this instance.</returns>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Messages.AssociateRq.ApplicationContext">
            <summary>
            Gets the Application Context.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Messages.AssociateRq.CalledAETitle">
            <summary>
            Gets the called AE title.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Messages.AssociateRq.CallingAETitle">
            <summary>
            Gets the calling AE title.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Messages.AssociateRq.DvtkDataAssociateRq">
            <summary>
            Gets the encapsulated DvtkData A_ASSOCIATE_RQ.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Messages.AssociateRq.PresentationContexts">
            <summary>
            Gets the presentation contexts.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Messages.AssociateRq.ProtocolVersion">
            <summary>
            Gets the Protocol Version.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Messages.AssociateRq.UserInformation">
            <summary>
            Gets the User Information.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Other.ValidationRuleDicomAttribute">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Other.ValidationRuleDicomAttribute.TagSequence">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            <br></br>
            The tag sequence of the attribute.
            An empty string means don't display information about this attribute.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Other.ValidationRuleDicomAttribute.CompareFlags">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Other.ValidationRuleDicomAttribute.DicomAttributeFlags">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Other.ValidationRuleDicomAttribute.DisplayFullTagSequence">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Other.ConditionOr">
            <summary>
            Represent the logical OR that is applied to two other boolean expressions.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.ConditionOr.condition1">
            <summary>
            The first boolean expression, supplied in the constructor, on which the logical OR operator is applied.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.ConditionOr.condition2">
            <summary>
            The second boolean expression, supplied in the constructor, on which the logical OR operator is applied.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.ConditionOr.#ctor">
            <summary>
            Hide default constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.ConditionOr.#ctor(DvtkHighLevelInterface.Common.Other.Condition,DvtkHighLevelInterface.Common.Other.Condition)">
            <summary>
            Constructor.
            </summary>
            <param name="condition1">The first boolean expression on which the logical OR operator is applied.</param>
            <param name="condition2">The second boolean expression on which the logical OR operator is applied.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.ConditionOr.Evaluate(System.Object)">
            <summary>
            Evaluates the boolean expression using the supplied instance.
            </summary>
            <param name="theObject">The supplied instance to evaluate the boolean expression with.</param>
            <returns>The result of evaluating the boolean expression with the supplied instance.</returns>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Compare.CompareValueTypes">
            <summary>
            Possible value types used during comparing.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.CompareValueTypes.Identical">
            <summary>
            Identical.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.CompareValueTypes.Date">
            <summary>
            Date.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.CompareValueTypes.ID">
            <summary>
            ID.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.CompareValueTypes.Name">
            <summary>
            Name.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.CompareValueTypes.String">
            <summary>
            String.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.CompareValueTypes.Time">
            <summary>
            Time.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.CompareValueTypes.UID">
            <summary>
            UID.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Dicom.Other.ValidAttribute">
            <summary>
            Represents a Dicom attribute that is part of an AttributeSet.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.Other.ValidAttribute.dvtkDataAttribute">
            <summary>
            See property DvtkDataAttribute.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.Other.ValidAttribute.parentAttributeSet">
            <summary>
            See property ParentAttributeSet.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.ValidAttribute.#ctor">
            <summary>
            Hide default constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.ValidAttribute.#ctor(DvtkHighLevelInterface.Dicom.Other.TagSequence,DvtkData.Dimse.Attribute,DvtkHighLevelInterface.Dicom.Other.AttributeSet)">
            <summary>
            Constructor.
            </summary>
            <param name="tagSequence">The tag sequence of the attribute.</param>
            <param name="dvtkDataAttribute">The encapsulated DvtkData attribute.</param>
            <param name="parentAttributeSet">The AttributeSet this instance is part of.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.ValidAttribute.AddItem(DvtkHighLevelInterface.Dicom.Other.SequenceItem)">
            <summary>
            Adds a sequence item to the end of the item list.
            </summary>
            <remarks>
            This method is only meaningfull if this instance has a VR SQ.
            </remarks>
            <param name="item">The sequence item to add.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.ValidAttribute.ClearItems">
            <summary>
            Clears all sequence items present in the attribute.
            </summary>
            <remarks>
            This method is only meaningfull if this instance has a VR SQ.
            </remarks>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.ValidAttribute.Clone(DvtkHighLevelInterface.Dicom.Other.AttributeSet)">
            <summary>
            Creates a deep copy of this instance.
            </summary>
            <param name="parentAttributeSetToCloneTo">
            The AttributeSet the new cloned Attribute wil become part of.
            </param>
            <returns>The created deep copy of this instance.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.ValidAttribute.Delete">
            <summary>
            Deletes this instance from the AttributeSet it is contained in.
            </summary>
            <remarks>
            <b>Don't use this instance anymore after calling this method!</b>
            </remarks>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.ValidAttribute.GetItem(System.Int32)">
            <summary>
            Gets a sequence item.
            </summary>
            <remarks>
            This method is only meaningfull if this instance has a VR SQ.
            </remarks>
            <param name="oneBasedIndex">The one based index.</param>
            <returns>The sequence item.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.ValidAttribute.InsertItem(System.Int32,DvtkHighLevelInterface.Dicom.Other.SequenceItem)">
            <summary>
            Insert a Sequence Item at a specified position.
            </summary>
            <remarks>
            This method is only meaningfull if this instance has a VR SQ. The inserted Sequence
            Item will get item number oneBasedIndex.
            </remarks>
            <param name="oneBasedIndex">The one based index of the position to insert.</param>
            <param name="item">The Sequence item to insert.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.ValidAttribute.RemoveItemAt(System.Int32)">
            <summary>
            Removes a sequence item.
            </summary>
            <param name="oneBasedIndex">The one based index</param>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.ValidAttribute.DvtkDataAttribute">
            <summary>
            Gets the encapsulated DvtkData attribute.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.ValidAttribute.DvtkDataSequence">
            <summary>
            Gets the encapsulated DvtkData sequence.
            </summary>
            <remarks>
            This property is only meaningfull if this instance has a VR SQ.
            </remarks>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.ValidAttribute.Exists">
            <summary>
            Indicates if the attribute exists.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.ValidAttribute.ItemCount">
            <summary>
            Gets the number of items of the attribute.
            </summary>
            <remarks>
            This property is only meaningfull if this instance has a VR SQ.
            </remarks>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.ValidAttribute.Name">
            <summary>
            Gets or sets the name of the attribute.
            </summary>
            <remarks>
            An empty string means no name available.
            </remarks>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.ValidAttribute.ParentAttributeSet">
            <summary>
            Gets the AttributeSet that this instance is part of.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.ValidAttribute.Values">
            <summary>
            Gets the values of the attribute.
            </summary>
            <remarks>
            This property is only meaningfull if this instance does not have a VR SQ, OB, OW, OF or UN.
            </remarks>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.ValidAttribute.VM">
            <summary>
            Gets the value multiplicity of the attribute.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.ValidAttribute.VR">
            <summary>
            Gets the VR of the attribute.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Dicom.Messages.ReleaseRp">
            <summary>
            Represents a Dicom A_RELEASE_RP.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Messages.ReleaseRp.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Messages.ReleaseRp.#ctor(DvtkData.Dul.A_RELEASE_RP)">
            <summary>
            Constructor to encapsulate an existing DvtkData A_RELEASE_RP.
            </summary>
            <param name="dvtkDataReleaseRp">The encapsulated DvtkData A_RELEASE_RP</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Messages.ReleaseRp.ToString">
            <summary>
            Returns a String that represents this instance.
            </summary>
            <returns>A String that represents this instance.</returns>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Other.GenericBooleanExpressionOr`2">
            <summary>
            Represent the logical OR that is applied to two other boolean expressions.
            <br></br><br></br>
            STILL WORK IN PROGRESS!
            </summary>
            <typeparam name="T">The type of the instance to evaluate.</typeparam>
            <typeparam name="TCollection">A collection of the type specified.</typeparam>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.GenericBooleanExpressionOr`2.booleanExpression1">
            <summary>
            The first boolean expression, supplied in the constructor, on which the logical OR operator is applied.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.GenericBooleanExpressionOr`2.booleanExpression2">
            <summary>
            The second boolean expression, supplied in the constructor, on which the logical OR operator is applied.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.GenericBooleanExpressionOr`2.#ctor">
            <summary>
            Hide default constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.GenericBooleanExpressionOr`2.#ctor(DvtkHighLevelInterface.Common.Other.GenericBooleanExpression{`0,`1},DvtkHighLevelInterface.Common.Other.GenericBooleanExpression{`0,`1})">
            <summary>
            Constructor.
            </summary>
            <param name="booleanExpression1">The first boolean expression on which the logical AND operator is applied.</param>
            <param name="booleanExpression2">The second boolean expression on which the logical AND operator is applied.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.GenericBooleanExpressionOr`2.Evaluate(`0)">
            <summary>
            Evaluates the boolean expression using the supplied instance.
            </summary>
            <param name="t">The instance to evaluate this boolean expression with.</param>
            <returns>The result of evaluating the boolean expression with the supplied instance.</returns>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Other.GenericBooleanExpressionOr`4">
            <summary>
            Represent the logical OR that is applied to two other boolean expressions.
            <br></br><br></br>
            STILL WORK IN PROGRESS!
            </summary>
            <typeparam name="T1">The type of the first instance of the pair to evaluate.</typeparam>
            <typeparam name="TCollection1">A collection of the first type specified.</typeparam>
            <typeparam name="T2">The type of the second instance of the pair to evaluate.</typeparam>
            <typeparam name="TCollection2">A collection of the second type specified.</typeparam>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.GenericBooleanExpressionOr`4.booleanExpression1">
            <summary>
            The first boolean expression, supplied in the constructor, on which the logical OR operator is applied.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.GenericBooleanExpressionOr`4.booleanExpression2">
            <summary>
            The second boolean expression, supplied in the constructor, on which the logical OR operator is applied.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.GenericBooleanExpressionOr`4.#ctor">
            <summary>
            Hide default constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.GenericBooleanExpressionOr`4.#ctor(DvtkHighLevelInterface.Common.Other.GenericBooleanExpression{`0,`1,`2,`3},DvtkHighLevelInterface.Common.Other.GenericBooleanExpression{`0,`1,`2,`3})">
            <summary>
            Constructor.
            </summary>
            <param name="booleanExpression1">The first boolean expression on which the logical AND operator is applied.</param>
            <param name="booleanExpression2">The second boolean expression on which the logical AND operator is applied.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.GenericBooleanExpressionOr`4.Evaluate(`0,`2)">
            <summary>
            Evaluates the boolean expression using the supplied instances.
            </summary>
            <param name="t1">The first supplied instance of the pair to evaluate the boolean expression with.</param>
            <param name="t2">The second supplied instance of the pair to evaluate the boolean expression with.</param>
            <returns>The result of evaluating the boolean expression with the supplied instances.</returns>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Other.ConditionTrue">
            <summary>
            Represents a boolean expression that evaluates to true.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.ConditionTrue.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.ConditionTrue.Evaluate(System.Object)">
            <summary>
            Evaluates this boolean expression to true.
            </summary>
            <param name="theObject">The supplied instance to evaluate the boolean expression with.</param>
            <returns>True.</returns>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Compare.GeneratorDynamicCompare">
            <summary>
            When supplied with attribute sets (Dicom and/or HL7) and validation rules,
            generates AttributeLists.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.GeneratorDynamicCompare.attributeCollections">
            <summary>
            All the AttributeCollections on which the CcompareRules will be applied.
            </summary>		
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.GeneratorDynamicCompare.compareRules">
            <summary>
            All the CompareRules that will be applied to the attributeCollections.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.GeneratorDynamicCompare.compareRulesIndex">
            <summary>
            Index of current CompareRule.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.GeneratorDynamicCompare.#ctor(DvtkHighLevelInterface.Common.Compare.AttributeCollections,DvtkHighLevelInterface.Common.Compare.CompareRules)">
            <summary>
            Constructor.
            </summary>
            <param name="compareRules">All the CcompareRules that will be applied to the attributeCollections.</param>
            <param name="attributeCollections">All the AttributeCollections on which the CcompareRules will be applied.</param>
            
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.GeneratorDynamicCompare.GetNextAttributes">
            <summary>
            Get the next list of attributes to compare to each other.
            If an attribute is not present, a null pointer is returned in the AttributeCollection.
            If all attributes have been compared, null is returned.
            </summary>
            <returns>The attributes to compare.</returns>
        </member>
        <member name="T:DvtkHighLevelInterface.Dicom.Other.TransferSyntaxes">
            <summary>
            List of transfer syntaxes.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.Other.TransferSyntaxes.list">
            <summary>
            List of transfer syntax UIDs.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.TransferSyntaxes.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.TransferSyntaxes.#ctor(System.String[])">
            <summary>
            Constructor.
            </summary>
            <param name="list">List of transfer syntaxes.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.TransferSyntaxes.Add(System.String)">
            <summary>
            Adds a single transfer syntax to the list.
            </summary>
            <param name="transferSyntax"></param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.TransferSyntaxes.Get(System.Int32)">
            <summary>
            Gets a single transfer syntax given a zero-based index.
            </summary>
            <param name="index">Zero-based index.</param>
            <returns>Transfer Syntax UID.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.TransferSyntaxes.Length">
            <summary>
            Gets the number of transfer syntaxes.
            </summary>
            <returns>Number of transfer syntaxes.</returns>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.TransferSyntaxes.List">
            <summary>
            Gets the list of transfer syntax UID's.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Dicom.Other.TagSequence">
            <summary>
            Unique identifier for
            - A single attribute.
            - An Attribute Set (CommandSet, DataSet, FileMetaInformation or Sequence Item).
            - All Sequence Items within a Sequence Attribute.
            
            Examples of String representation of possible instances of this class:
            - "0x00100020": identifies a single attribute with Dicom Tag (0010,0020).
            - "0x00081199[1]/0x00081150": identifies a single attribute with Dicom Tag (0008,1150) present
              within the first Sequence Item of Sequence Attribute (0008,1199).
            - "": identifies the root of a CommandSet, DataSet or FileMetaInformation.
            - "0x00081199[1]": first Sequence Item of Sequence Attribute (0008,1199).
            - "0x00081199[]": all Sequence Items of Sequence Attribute (0008,1199).
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.Other.TagSequence.tags">
            <summary>
            See property Tags.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.Other.TagSequence.containsValidTags">
            <summary>
            Boolean indicating if this TagSequence contains valid tags.
            
            Note that although the contained tags may all be valid, the combination of these
            tags may not.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.TagSequence.#ctor">
            <summary>
            Default constructor.
            
            Represents a CommandSet, DataSet or FileMetaInformation.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.TagSequence.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="tagSequenceAsString">The TagSequence represented as a String.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.TagSequence.Add(DvtkHighLevelInterface.Dicom.Other.Tag)">
            <summary>
            Adds a tag to the end of the list.
            </summary>
            <param name="tag">The tag to add.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.TagSequence.Clone">
            <summary>
            Creates a deep copy of this TagSequence.
            </summary>
            <returns>The created deep copy.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.TagSequence.ToString">
            <summary>
            Returns a String that represents this instance.
            </summary>
            <returns>A String that represents this instance.</returns>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.TagSequence.DicomNotation">
            <summary>
            Gets the notation as used in the Dicom standard, i.e.
            use (xxxx,yyyy) as the tag format and '>' to indicate how many levels deep an attribute
            is in sequence attributes.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.TagSequence.IsAttributeMatching">
            <summary>
            Boolean indicating if this TagSequence is attribute matching i.e. it can
            be used to identify zero or more attributes.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.TagSequence.IsSingleAttributeMatching">
            <summary>
            Boolean indicating if this TagSequence is single attribute matching i.e. exactly
            one attribute is indicated by the TagSequence.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.TagSequence.IsValidForCommandSet">
            <summary>
            Indicates if this TagSequence is valid for a CommandSet attribute.
            
            Only the group numbers of the individual tags contained in this TagSequence
            are checked by this property.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.TagSequence.IsValidForDataSet">
            <summary>
            Indicates if this TagSequence is valid for a DataSet attribute.
            
            Only the group numbers of the individual tags contained in this TagSequence
            are checked by this property.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.TagSequence.IsValidForDirectoryRecord">
            <summary>
            Indicates if this TagSequence is valid for a DirectoryRecord attribute.
            
            Only the group numbers of the individual tags contained in this TagSequence
            are checked by this property.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.TagSequence.IsValidForFileMetaInformation">
            <summary>
            Indicates if this TagSequence is valid for a FileMetaInformation attribute.
            
            Only the group numbers of the individual tags contained in this TagSequence
            are checked by this property.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.TagSequence.LastTag">
            <summary>
            Gets the last Tag contained in this instance.
            
            If this instance contains no Tags, a Tag with group number 0 and element number 0
            is returned.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.TagSequence.Tags">
            <summary>
            Gets the tags contained in this TagSequence.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.TagSequence.Item(System.Int32)">
            <summary>
            Gets the tag with the specified zero based index.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Dicom.Messages.Abort">
            <summary>
            Represents a Dicom A_ABORT.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Messages.Abort.#ctor">
            <summary>
            Hide default constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Messages.Abort.#ctor(DvtkData.Dul.A_ABORT)">
            <summary>
            Constructor to encapsulate an existing DvtkData A_ABORT.
            </summary>
            <param name="dvtkDataAbort">The encapsulated DvtkData A_ABORT.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Messages.Abort.#ctor(System.Byte,System.Byte)">
            <summary>
            Constructor.
            </summary>
            <param name="source">The Abort source.</param>
            <param name="reason">The Abort reason.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Messages.Abort.ToString">
            <summary>
            Returns a String that represents this instance.
            </summary>
            <returns>A String that represents this instance.</returns>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Messages.Abort.DvtkDataAAbort">
            <summary>
            Gets the encapsulated DvtkData A_ABORT.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Messages.Abort.Reason">
            <summary>
            Gets the Abort reason.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Messages.Abort.Source">
            <summary>
            Gets the Abort source.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.UserInterfaces.HliForm">
            <summary>
            Encapsulates a .Net Form on which High Level Interface Threads, that are attached to this
            instance, display their output events.
            </summary>
            <remarks>
            The actual .Net form is executed on a seperate thread. Because of this, any calls to this instance are
            not blocking on the .Net Form.
            <br></br><br></br>
            The encapsulated .Net Form also offers a Stop button by which all attached High Level 
            Interface threads may be stopped.
            </remarks>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.UserInterfaces.HliForm.autoExit">
            <summary>
            See property AutoExit. 
            Do not use this field outside the property AutoExit because of the locking applied.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.UserInterfaces.HliForm.autoExitLock">
            <summary>
            Use this to synchronize the reading and writing of the autoExit field.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.UserInterfaces.HliForm.closed">
            <summary>
            See property Closed.
            Do not use this field outside the property Closed because of the locking applied.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.UserInterfaces.HliForm.closedLock">
            <summary>
            Use this to synchronize the reading and writing of the closed field.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.UserInterfaces.HliForm.dotNetThread">
            <summary>
            The thread in which the "actual" .Net form will be started. 
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.UserInterfaces.HliForm.hliInternalForm">
            <summary>
            The "actual" .Net form that is displayed.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.UserInterfaces.HliForm.hliInternalFormLock">
            <summary>
            Use this to synchronize the reading and writing of the hliInternalForm field.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.UserInterfaces.HliForm.singleton">
            <summary>
            Used to store a singleton if needed by users of this class.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.UserInterfaces.HliForm.singletonLock">
            <summary>
            Use this to synchronize the reading and writing of the singleton field.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.UserInterfaces.HliForm.text">
            <summary>
            See property Text.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.UserInterfaces.HliForm.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.UserInterfaces.HliForm.Attach(DvtkHighLevelInterface.Common.Threads.Thread)">
            <summary>
            Attach to a Thread.
            <br></br><br></br>
            By doing so, this object may react to information, warning and error output events
            from the Thread.
            <br></br><br></br>
            Threads may not be already started when attaching.
            </summary>
            <param name="thread">The Thread to attach to.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.UserInterfaces.HliForm.ClearActivityLogging">
            <summary>
            Clears all activity logging that is present in the encapsulated .Net Form.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.UserInterfaces.HliForm.GetSingleton">
            <summary>
            When outside this class, there is a need to use one HliForm instance in different places,
            this method may provide this single instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.UserInterfaces.HliForm.ResetSingleton">
            <summary>
            Reset the singleton, i.e. when the GetSingleton method is called afterwards, a new
            HliForm object will be returned.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.UserInterfaces.HliForm.SetNumberOfLinesActivityLogging(System.UInt32,System.UInt32)">
            <summary>
            Determines how much logging in the activity logging may be present.
            </summary>
            <param name="maximumNumberOfLines">
            Maximum number of lines displayed in this instance before before the oldest lines will
            be removed.</param>
            <param name="keepNumberOfLines">
            Number of newest lines that will be kept when the oldest lines are removed.
            </param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.UserInterfaces.HliForm.ThreadEntryPoint">
            <summary>
            The entry point of the .Net thread, in which the .Net form is started.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.UserInterfaces.HliForm.WaitForHliInternalFormConstructed">
            <summary>
            Waits until the encapsulated .Net Form has been constructed.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.UserInterfaces.HliForm.WaitUntilClosed">
            <summary>
            Waits until the encapsulated .Net Form is closed.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.UserInterfaces.HliForm.AutoExit">
            <summary>
            Gets or sets a boolean indicating if the encapsulated .Net Form must automatically be closed when the total
            number of running and stopping Threads becomes 0.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.UserInterfaces.HliForm.Closed">
            <summary>
            Gets or sets a boolean indicating if the encapsulated .Net Form has been closed.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.UserInterfaces.HliForm.Text">
            <summary>
            Gets or sets the text (caption) of the encapsulated .Net form.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Threads.ThreadState">
            <summary>
            Represents the different states of a Thread instance.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Threads.ThreadState.UnStarted">
            <summary>
            Start has not yet been called.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Threads.ThreadState.Running">
            <summary>
            Start has been called.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Threads.ThreadState.Stopping">
            <summary>
            Execution is now in the final block of the ThreadEntryPoint method,
            or the Stop method has been called and execution of the thread has
            still not not finished.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Threads.ThreadState.Stopped">
            <summary>
            Execution of the thread has finished.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Other.ThreeStateBoolean">
            <summary>
            Represent a boolean with an extra unknown state.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.ThreeStateBoolean.TRUE">
            <summary>
            True.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.ThreeStateBoolean.FALSE">
            <summary>
            False.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.ThreeStateBoolean.UNKNOWN">
            <summary>
            Unknown.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Other.Table">
            <summary>
            The purpose for this class right now is to construct a table, set the contents of the seperate
            cells and convert it to a HTML table. In the future, this class may be enhanced to convert it to
            other formats.
            
            The structure of the table without the header(s) is as follows:
            - A Table contains zero or more rows.
            - A row contains one or more cells.
            - A cell contains zero or more items.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.Table.cellItemPrefix">
            <summary>
            The string that will be prefixed to any item.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.Table.cellItemSeperator">
            <summary>
            A seperator that will be put between every item in a cell.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.Table.cellPrefixes">
            <summary>
            Text may be added between the "td" brackets.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.Table.columnPixelWidths">
            <summary>
            See method SetColumnPixelWidths.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.Table.currentRow">
            <summary>
            The current row, for which the columns may be filled with the various Add... methods.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.Table.cellPrefixesForCurrentRow">
            <summary>
            the cell prefixes for the current row.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.Table.emptyCellPrefix">
            <summary>
            See property EmptyCellPrefix.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.Table.headers">
            <summary>
            All headers defined for this table. A single header should contain a string for each
            user defined column. 
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.Table.numberOfColumns">
            <summary>
            Number of user defined columns in the table. 
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.Table.rows">
            <summary>
            All rows currently present in the table.
            
            The structure is as follows:
            - A Table contains zero or more rows.
              The table content is implemented by an ArrayList.
            - A row contains one or more cells.
              The row content is implemented by an ArrayList.
            - A cell contains zero or more items.
              The cell content is implemented by an StringCollection.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.Table.#ctor">
            <summary>
            Hide default constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.Table.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="numberOfColumns">Number of user defined columns present in the table.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.Table.AddHeader(System.String[])">
            <summary>
            Add a header to the table.
            </summary>
            <param name="header">
            A collection of strings describing the columns.
            The same amount of strings should be supplied as the number of user defined columns.
            </param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.Table.SetCellPrefix(System.Int32,System.String)">
            <summary>
            Add a prefix for a cell.
            </summary>
            <param name="column">The column.</param>
            <param name="text">The prefix to add.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.Table.AddItem(System.Int32,System.String)">
            <summary>
            Add an item to the cell in the current row, indicated by the supplied column number.
            </summary>
            <param name="column">One-based column number.</param>
            <param name="text">The item text.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.Table.AddBlackItem(System.Int32,System.String)">
            <summary>
            Add an item to the cell in the current row, indicated by the supplied column number.
            The item text will be made black.
            </summary>
            <param name="column">One-based column number.</param>
            <param name="text">The item text.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.Table.AddRedItem(System.Int32,System.String)">
            <summary>
            Add an item to the cell in the current row, indicated by the supplied column number.
            The item text will be made red.
            </summary>
            <param name="column">One-based column number.</param>
            <param name="text">The item text.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.Table.ConvertToHtml">
            <summary>
            Convert the table to HTML.
            </summary>
            <returns>The table convert to a HTML string.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.Table.NewRow">
            <summary>
            Add a new row to the table.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.Table.SetColumnPixelWidths(System.Int32[])">
            <summary>
            Set the width of the user defined columns in pixels.
            This method must be called before calling the method ConvertToHtml.
            </summary>
            <param name="columnPixelWidths">
            The width of the columns in pixels. The number of arguments must be the same as the number
            of user defined columns.
            </param>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Other.Table.CellItemSeperator">
            <summary>
            Gets or sets a seperator that will be put between every item in a cell.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Other.Table.EmptyCellPrefix">
            <summary>
            When a cell is empty (has no cell prefix and no items), this string is used
            as prefix.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Other.GeneratorDynamicCompare">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.GeneratorDynamicCompare.attributeSets">
            <summary>
            Array of attribute sets to get the attributes from to compare with each other.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.GeneratorDynamicCompare.#ctor(System.Collections.ArrayList,System.Collections.ArrayList)">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            </summary>
            <param name="attributeSets">-</param>
            <param name="validationRuleLists">-</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.GeneratorDynamicCompare.GetNextAttributes">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            <br></br>
            Get the next collection of attributes to compare to each other.
            If an attribute is not present, a null pointer is returned in the AttributeCollection.
            If all attributes have been compared, null is returned.
            </summary>
            <returns>The attributes to compare.</returns>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Other.DynamicCompare">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            <br></br>
            This class implements a dynamic compare of attribute sets, i.e. (absent) attributes from different
            attribute sets with possible different tags are compared with each other.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.DynamicCompare.#ctor">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            <br></br>
            Default constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.DynamicCompare.CompareAttributeSets(System.String,System.Collections.ArrayList,System.Collections.Specialized.StringCollection,System.Collections.ArrayList)">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            <br></br>
            Do a dynamic compare for the attribute sets supplied.
            
            Note that the parameters attributeSets, attributeSetDescriptions and each validationRuleList instance in
            the parameter validationRuleLists must have the same size and have a size at least 2.
            </summary>
            <param name="tableDescription">Description of the table.</param>
            <param name="attributeSets">The attribute sets to compare with each other.</param>
            <param name="attributeSetDescriptions">The descriptions of the attribute sets.</param>
            <param name="validationRuleLists">
            Specifies which attributes with what tags should be compared with each other.
            Also specifies how the attributes should be compared with each other.
            </param>
            <returns>The results of the dynamic compare presented as a table (that may be converted to HTML).</returns>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Other.GenericBooleanExpressionNot`2">
            <summary>
            Represent the logical NOT that is applied to another boolean expressions.
            <br></br><br></br>
            STILL WORK IN PROGRESS!
            </summary>
            <typeparam name="T">The type of the instance to evaluate.</typeparam>
            <typeparam name="TCollection">A collection of the type specified.</typeparam>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.GenericBooleanExpressionNot`2.booleanExpression">
            <summary>
            The boolean expression, supplied in the constructor, on which the logical NOT operator is applied.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.GenericBooleanExpressionNot`2.#ctor">
            <summary>
            Hide default constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.GenericBooleanExpressionNot`2.#ctor(DvtkHighLevelInterface.Common.Other.GenericBooleanExpression{`0,`1})">
            <summary>
            Constructor.
            </summary>
            <param name="booleanExpression">The boolean expression on which the logical AND operator is applied.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.GenericBooleanExpressionNot`2.Evaluate(`0)">
            <summary>
            Evaluates the boolean expression using the supplied instance.
            </summary>
            <param name="t">The instance to evaluate this boolean expression with.</param>
            <returns>The result of evaluating the boolean expression with the supplied instance.</returns>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Other.GenericBooleanExpressionNot`4">
            <summary>
            Represent the logical OR that is applied to another boolean expressions.
            <br></br><br></br>
            STILL WORK IN PROGRESS!
            </summary>
            <typeparam name="T1">The type of the first instance of the pair to evaluate.</typeparam>
            <typeparam name="TCollection1">A collection of the first type specified.</typeparam>
            <typeparam name="T2">The type of the second instance of the pair to evaluate.</typeparam>
            <typeparam name="TCollection2">A collection of the second type specified.</typeparam>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.GenericBooleanExpressionNot`4.booleanExpression">
            <summary>
            The boolean expression, supplied in the constructor, on which the logical NOT operator is applied.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.GenericBooleanExpressionNot`4.#ctor">
            <summary>
            Hide default constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.GenericBooleanExpressionNot`4.#ctor(DvtkHighLevelInterface.Common.Other.GenericBooleanExpression{`0,`1,`2,`3})">
            <summary>
            Constructor.
            </summary>
            <param name="booleanExpression">The boolean expression on which the logical NOT operator is applied.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.GenericBooleanExpressionNot`4.Evaluate(`0,`2)">
            <summary>
            Evaluates the boolean expression using the supplied instances.
            </summary>
            <param name="t1">The first supplied instance of the pair to evaluate the boolean expression with.</param>
            <param name="t2">The second supplied instance of the pair to evaluate the boolean expression with.</param>
            <returns>The result of evaluating the boolean expression with the supplied instances.</returns>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Other.ConditionNot">
            <summary>
            Represent the logical NOT that is applied to another boolean expressions.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.ConditionNot.condition">
            <summary>
            The boolean expression, supplied in the constructor, on which the logical NOT operator is applied.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.ConditionNot.#ctor">
            <summary>
            Hide default constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.ConditionNot.#ctor(DvtkHighLevelInterface.Common.Other.Condition)">
            <summary>
            Constructor.
            </summary>
            <param name="condition">The boolean expression on which the logical NOT operator is applied.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.ConditionNot.Evaluate(System.Object)">
            <summary>
            Evaluates the boolean expression using the supplied instance.
            </summary>
            <param name="theObject">The supplied instance to evaluate the boolean expression with.</param>
            <returns>The result of evaluating the boolean expression with the supplied instance.</returns>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Compare.AttributeList">
            <summary>
            A list of attributes (including validation rule) that needs to be displayed/validated together.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.AttributeList.attributeList">
            <summary>
            Internal list that stores the ordered list of attributes to validate together.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.AttributeList.compareRule">
            <summary>
            See property CompareRule.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.AttributeList.containsComparePresentErrors">
            <summary>
            See property ContainsComparePresentErrors.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.AttributeList.dicomContainsCompareSequenceItemsErrors">
            <summary>
            See property ContainsCompareSequenceItemsErrors
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.AttributeList.containsCompareValuesErrors">
            <summary>
            See property ContainsCompareValuesErrors.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.AttributeList.dicomContainsCompareVRErrors">
            <summary>
            See property ContainsCompareVRErrors.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.AttributeList.isDicomContainsCompareSequenceItemsErrorsDetermined">
            <summary>
            Used to make sure that the logic for determining the ContainsCompareSequenceItemsErrors
            is only performed once.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.AttributeList.#ctor">
            <summary>
            Constructor creating an empty list.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.AttributeList.DicomContainsCompareSequenceItemsErrors(System.Int32)">
            <summary>
            Needed to be able to tell if a present error exists for a specific sequence item.
            </summary>
            <param name="oneBasedSequenceItemIndex">One based sequence item index.</param>
            <returns>Boolean indicating if there is a present error.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.AttributeList.Add(DvtkHighLevelInterface.Common.Compare.AttributeBase)">
            <summary>
            Add an attribute to this list.
            </summary>
            <param name="attributeBase">The attribute to add.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.AttributeList.Filter(System.Collections.ArrayList,DvtkHighLevelInterface.Common.Compare.FlagsBase)">
            <summary>
            Filter on a given flag.
            </summary>
            <param name="attributes">The attributes to filter.</param>
            <param name="flag">The flag to filter on.</param>
            <returns>The attributes that have the supplied flag.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.AttributeList.FilterOnDicomAttribute(System.Collections.ArrayList)">
            <summary>
            Filter on the attributes being a DicomAttribute.
            </summary>
            <param name="attributes">The attributes to filter.</param>
            <returns>The attribute that are of type DicomAttribute.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.AttributeList.FilterOnPresent(System.Collections.ArrayList)">
            <summary>
            Filter on the presence of actual the attribute.
            </summary>
            <param name="attributes">The attributes to filter.</param>
            <returns>The attributes containing actuals attributes that are present.</returns>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Compare.AttributeList.CompareRule">
            <summary>
            Gets or sets the compare rule used to generate this instance.
            </summary>
            <remarks>
            If no compare rule is used to generate this instance, null is returned.
            </remarks>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Compare.AttributeList.ContainsComparePresentErrors">
            <summary>
            Indicates if a difference exists in existence (yes or no) for all attributes that have
            the flag Compare_present enabled.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Compare.AttributeList.ContainsCompareValuesErrors">
            <summary>
            For all attributes present that have the Compare_values flag, find out if differences
            exist for their values.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Compare.AttributeList.DicomContainsCompareVRErrors">
            <summary>
            For all attributes present that have the Compare_VR flag and are present, find out if differences
            exist for their VR.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Compare.AttributeList.Count">
            <summary>
            Number of attributes.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Compare.AttributeList.DicomContainsSequenceAttribute">
            <summary>
            Indicates if this collection contains at least one sequence attribute.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Compare.AttributeList.DicomMaxItemCount">
            <summary>
            Property to get the maximum number of items in any Dicom sequence attribute
            that have t he include_sequence_items flag enabled.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Compare.AttributeList.Item(System.Int32)">
            <summary>
            Property to get a specific attribute.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Dicom.Threads.SCU">
            <summary>
            This class implements basic functionality for a SCU that is executed in a seperate thread.
            It is controlled by calling the available Trigger... methods.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.SCU.ProcessTrigger(System.Object)">
            <summary>
            Processed a trigger.
            </summary>
            <param name="trigger">The trigger.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.SCU.TriggerSendAssociation(DvtkHighLevelInterface.Dicom.Messages.DicomMessage,DvtkHighLevelInterface.Dicom.Other.PresentationContext[])">
            <summary>
            Triggers sending of an association.
            </summary>
            <param name="dicomMessage">The DICOM message to send.</param>
            <param name="presentationContexts">The presentation contexts to use for setting up the DICOM association.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.SCU.TriggerSendAssociation(DvtkHighLevelInterface.Dicom.Messages.DicomMessageCollection,DvtkHighLevelInterface.Dicom.Other.PresentationContext[])">
            <summary>
            Trigger a SendAssociation.
            
            ...
            </summary>
            <param name="dicomMessageCollection">The DicomMessages to send.</param>
            <param name="presentationContexts">The presentation contexts used to set up an association.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.SCU.TriggerSendAssociationAndWait(DvtkHighLevelInterface.Dicom.Messages.DicomMessage,DvtkHighLevelInterface.Dicom.Other.PresentationContext[])">
            <summary>
            Trigger a send association and wait until it has been completed.
            </summary>
            <param name="dicomMessage">The DICOM message to send.</param>
            <param name="presentationContexts">The presentation contexts to propose.</param>
            <returns>
            True indicates the other side has accepted the association, false indicates the other side
            has rejected the association.
            </returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.SCU.TriggerSendAssociationAndWait(DvtkHighLevelInterface.Dicom.Messages.DicomMessageCollection,DvtkHighLevelInterface.Dicom.Other.PresentationContext[])">
            <summary>
            Trigger a send association and wait until it has been completed.
            </summary>
            <param name="dicomMessageCollection">The DICOM messages to send.</param>
            <param name="presentationContexts">The presentation contexts to propose.</param>
            <returns>
            True indicates the other side has accepted the association, false indicates the other side
            has rejected the association.
            </returns>
        </member>
        <member name="T:DvtkHighLevelInterface.Dicom.Threads.InboundDicomMessageFilterSetAttribute">
            <summary>
            Class used to change an attribute for a received DICOM message.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.InboundDicomMessageFilterSetAttribute.#ctor(System.String,DvtkData.Dimse.VR,System.Object[])">
            <summary>
            Constructor.
            </summary>
            <param name="tagSequence">The tag sequence.</param>
            <param name="vR">The VR.</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.InboundDicomMessageFilterSetAttribute.Apply(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            Applies this filter to a DICOM message.
            </summary>
            <param name="dicomMessage">The DICOM message.</param>
        </member>
        <member name="T:DvtkHighLevelInterface.Dicom.Other.Values">
            <summary>
            Represents Dicom attribute values.
            </summary>
            <remarks>
            All changes made to an instance of this class are reflected in the actual Dicom values
            of the associated Attribute.
            </remarks>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.Other.Values.attribute">
            <summary>
            See property Attribute.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.Values.#ctor">
            <summary>
            Hide default constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.Values.#ctor(DvtkHighLevelInterface.Dicom.Other.Attribute)">
            <summary>
            Constructor.
            </summary>
            <param name="attribute">The attribute this instance belongs to.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.Values.Add(System.Object[])">
            <summary>
            Adds values to the end of this instance.
            </summary>
            <param name="parameters">Values to add.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.Values.Add(DvtkHighLevelInterface.Dicom.Other.Values)">
            <summary>
            Adds values to the end of this instance.
            </summary>
            <param name="values">Values to add.</param>
            
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.Values.Clear">
            <summary>
            Removes all values from this instance.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.Values.ConvertToDoubleCollection(System.Object[])">
            <summary>
            Converts the supplied array to a DvtkData DoubleCollection.
            </summary>
            <remarks>
            When an array element is null, it will be skipped.<br></br><br></br>
            When an array element cannot be converted, it will be interpreted as a 0.
            </remarks>
            <param name="objects">The array to convert.</param>
            <returns>The returned DvtkData DoubleCollection.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.Values.ConvertToInt16Collection(System.Object[])">
            <summary>
            Converts the supplied array to a DvtkData Int16Collection.
            </summary>
            <remarks>
            When an array element is null, it will be skipped.<br></br><br></br>
            When an array element cannot be converted, it will be interpreted as a 0.
            </remarks>
            <param name="objects">The array to convert.</param>
            <returns>The returned DvtkData Int16Collection.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.Values.ConvertToInt32Collection(System.Object[])">
            <summary>
            Converts the supplied array to a DvtkData Int32Collection.
            </summary>
            <remarks>
            When an array element is null, it will be skipped.<br></br><br></br>
            When an array element cannot be converted, it will be interpreted as a 0.
            </remarks>
            <param name="objects">The array to convert.</param>
            <returns>The returned DvtkData Int32Collection.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.Values.ConvertToSingleCollection(System.Object[])">
            <summary>
            Converts the supplied array to a DvtkData SingleCollection.
            </summary>
            <remarks>
            When an array element is null, it will be skipped.<br></br><br></br>
            When an array element cannot be converted, it will be interpreted as a 0.
            </remarks>
            <param name="objects">The array to convert.</param>
            <returns>The returned DvtkData SingleCollection.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.Values.ConvertToStringCollection(System.Object[])">
            <summary>
            Converts the supplied array to a DvtkData StringCollection.
            </summary>
            <remarks>
            When an array element is null, it will be skipped.<br></br><br></br>
            When an array element cannot be converted, it will be interpreted as a "".
            </remarks>
            <param name="objects">The array to convert.</param>
            <returns>The returned DvtkData StringCollection.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.Values.ConvertToTagCollection(System.Object[])">
            <summary>
            Converts the supplied array to a DvtkData TagCollection.
            </summary>
            <remarks>
            When an array element is null, it will be skipped.<br></br><br></br>
            When an array element cannot be converted, it will be interpreted as a tag with value 0x00000000.
            </remarks>
            <param name="objects">The array to convert.</param>
            <returns>The returned DvtkData TagCollection.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.Values.ConvertToUInt16Collection(System.Object[])">
            <summary>
            Converts the supplied array to a DvtkData UInt16Collection.
            </summary>
            <remarks>
            When an array element is null, it will be skipped.<br></br><br></br>
            When an array element cannot be converted, it will be interpreted as a 0.
            </remarks>
            <param name="objects">The array to convert.</param>
            <returns>The returned DvtkData UInt16Collection.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.Values.ConvertToUInt32Collection(System.Object[])">
            <summary>
            Converts the supplied array to a DvtkData UInt32Collection.
            </summary>
            <remarks>
            When an array element is null, it will be skipped.<br></br><br></br>
            When an array element cannot be converted, it will be interpreted as a 0.
            </remarks>
            <param name="objects">The array to convert.</param>
            <returns>The returned DvtkData UInt32Collection.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.Values.Equals(System.Object[])">
            <summary>
            Compares this instance with an array.
            </summary>
            <remarks>
            This instance and the array are considered equal when:<br></br>
            - Both contain the same number of values/elements.<br></br>
            - The String representations of the individual values/elements are the same.<br></br><br></br>
            
            When spaces are non-significant according to part 5, 
            they are left out, when comparing, like specified below.<br></br><br></br>
            
            When the attribute, this instance belongs to, has VR AE, CS, DS, IS, LO or SH,
            all leading and trailing spaces are removed before comparing.<br></br><br></br>
            
            When the attribute, this instance belongs to, has VR LT, PN, ST, TM or UT,
            all trailing spaces are removed before comparing.<br></br><br></br>
            
            When the attribute, this instance belongs to, has VR DA or DT,
            all trailing spaces are removed before comparing although
            nothing is mentioned in part 5 about non-significant spaces. This is
            because trailing spaces may be present in queries with range matching.<br></br><br></br>
            </remarks>
            <param name="objects">The array to compare with.</param>
            <returns>Boolean indicating if they are equal.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.Values.Equals(DvtkHighLevelInterface.Dicom.Other.Values)">
            <summary>
            Compares this instance with another Values instance.
            </summary>
            <remarks>
            Two Values instances are considered equal when:<br></br>
            - Both contain the same number of values.<br></br>
            - The String representations of the individual values are the same.<br></br><br></br>
            
            When spaces are non-significant according to part 5, 
            they are left out, when comparing, like specified below.<br></br><br></br>
            
            When the attribute, a Values instance belongs to, has VR AE, CS, DS, IS, LO or SH,
            all leading and trailing spaces are removed before comparing.<br></br><br></br>
            
            When the attribute, a Values instance belongs to, has VR LT, PN, ST, TM or UT,
            all trailing spaces are removed before comparing.<br></br><br></br>
            
            When the attribute, a Values instance belongs to, has VR DA or DT,
            all trailing spaces are removed before comparing although
            nothing is mentioned in part 5 about non-significant spaces. This is
            because trailing spaces may be present in queries with range matching.<br></br><br></br>
            </remarks>
            <param name="values">The Values instance to compare with.</param>
            <returns>Boolean indicating if they are equal.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.Values.GetCollectionValue(System.Int32)">
            <summary>
            Gets the String representation of a single value from a DvtkData collection.
            </summary>
            <param name="zeroBasedIndex">The zero based index.</param>
            <returns>The String representation of a value.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.Values.TagString(System.UInt16,System.UInt16)">
            <summary>
            Obtains the <see cref="T:System.String"/> representation of Tag.
            </summary>
            <returns>The friendly name of the <see cref="T:DvtkHighLevelInterface.Dicom.Other.Tag"/>.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.Values.Insert(System.Int32,System.Object[])">
            <summary>
            Inserts an array in this instance at a specified position.
            </summary>
            <param name="zeroBasedIndex">The zero based index to insert.</param>
            <param name="parameters">The array to insert.</param>
            <exception cref="T:System.ArgumentException"><paramref name="parameters"/> cannot be interpreted.</exception>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.Values.Insert(System.Int32,DvtkHighLevelInterface.Dicom.Other.Values)">
            <summary>
            Inserts another Values instance in this instance at a specified position.
            </summary>
            <param name="zeroBasedIndex">The zero based index to insert.</param>
            <param name="values">The Values instance to insert.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.Values.InsertCollectionValues(System.Int32,System.Object[])">
            <summary>
            Inserts an array in a DvtkData collection.
            </summary>
            <param name="zeroBasedIndex">The zero based index.</param>
            <param name="parameters">The array.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.Values.Randomize(System.String,System.Random)">
            <summary>
            Randomizes this instance.
            </summary>
            <remarks>
            Randomization is performed by replacing each <paramref name="stringToReplace"/> with a random digit between 0 and 9.
            </remarks>
            <param name="stringToReplace">The String to replace (may not be empty).</param>
            <param name="random">The Random instance used to create a random String (may not be null).</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.Values.RemoveAt(System.Int32)">
            <summary>
            Removed a single value in this instance at the specified position.
            </summary>
            <param name="zeroBasedIndex">The zero based index.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.Values.RemoveNonSignificantSpaces(System.String,DvtkData.Dimse.VR)">
            <summary>
            Removes non significant spaces according to the Dicom standard.
            </summary>
            <remarks>
            In part 5 of the Dicom standard, for specific VR's leading and/or traling spaces are non significant.
            This methods returns a String in which the non significant spaces have been removed.
            Also for VR DA and DT, traling spaces are removed because they may be present in C-Find queries.
            </remarks>
            <param name="theString">The String to (possibly) remove the spaces from.</param>
            <param name="vR">The VR of the associated Attribute.</param>
            <returns>The String with the non significant spaces removed.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.Values.SetLength">
            <summary>
            Sets the new DvtkData Attribute length for this values instance.
            </summary>
            <remarks>
            Use this when the values content of this instance has changed. The implementation below is
            copied from the DimseDataClasses._InitializeAttribute method and adjusted.
            </remarks>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.Values.ToString">
            <summary>
            Returns a String that represents this instance.
            </summary>
            <returns>A String that represents this instance.</returns>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.Values.Attribute">
            <summary>
            Gets the Attribute this instance belongs to.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.Values.BitmapPatternParametersImplementation">
            <summary>
            Gets or sets the underlying BitmapPatternParameters that may be used to store the values.
            </summary>
            <remarks>
            Only use this property when:<br></br>
            - The associated Attribute is of type ValidAttribute.<br></br>
            - The VR of the associated attribute is OB, OF or OW.<br></br><br></br>
            
            If BitmapPatternParameters have not been used to store the values, get returns null.
            </remarks>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.Values.ByteArrayImplementation">
            <summary>
            Gets or sets the underlying byte array used to store the values.
            </summary>
            <remarks>
            Only use this property when:<br></br>
            - The associated Attribute is of type ValidAttribute.<br></br>
            - The Attribute associated with this instance has VR UN.
            </remarks>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.Values.CollectionImplementation">
            <summary>
            Gets the underlying collection used to store the values.
            </summary>
            <remarks>
            Only use this property when:<br></br>
            - The associated Attribute is of type ValidAttribute.<br></br>
            - The property IsImplementedWithCollection returns true.
            </remarks>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.Values.Count">
            <summary>
            Gets the number of values.
            </summary>
            <remarks>
            This property is only meaningfull if the Attribute this instance belongs to
            does not have VR SQ.
            </remarks>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.Values.FileNameImplementation">
            <summary>
            Gets or sets the underlying file name of the file that may be used to store the values.
            </summary>
            <remarks>
            Only use this property when:<br></br>
            - The associated Attribute is of type ValidAttribute.<br></br>
            - The VR of the associated attribute is OB, OF or OW.<br></br><br></br>
            
            If a file has not been used to store the values, get returns null.
            </remarks>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.Values.IsImplementedWithCollection">
            <summary>
            Indicates if values are stored in a collection.
            </summary>
            <remarks>
            Only use this property when the associated Attribute is of type ValidAttribute.
            </remarks>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.Values.IsImplementedWithString">
            <summary>
            Indicates if values are stored in a String.
            </summary>
            <remarks>
            Only use this property when the associated Attribute is of type ValidAttribute.
            </remarks>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.Values.StringImplementation">
            <summary>
            Gets the underlying String used to store the values.
            </summary>
            <remarks>
            Only use this property when:<br></br>
            - The associated Attribute is of type ValidAttribute.<br></br>
            - The property IsImplementedWithString returns true.<br></br><br></br>
            
            When no values exist, get returns null.
            </remarks>        
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.Values.Item(System.Int32)">
            <summary>
            Get or sets a single value given the zero based index. The get converts the actual
            Dicom value to the returned string, the set converts the supplied string to the actual
            Dicom value.
            </summary>
            <remarks>
            When spaces are non-significant according to part 5, 
            they are left out, when using the get, like specified below.<br></br><br></br>
            
            When the attribute, this instance belongs to, has VR AE, CS, DS, IS, LO or SH,
            all leading and trailing spaces are removed before returning the String.<br></br><br></br>
            
            When the attribute, this instance belongs to, has VR LT, PN, ST, TM or UT,
            all trailing spaces are removed before returning the String.<br></br><br></br>
            
            When the attribute, this instance belongs to, has VR DA or DT,
            all trailing spaces are removed before returning the String although
            nothing is mentioned in part 5 about non-significant spaces. This is
            because trailing spaces may be present in queries with range matching.<br></br><br></br>
            
            The set may only be used to replace an existing value.
            When new values need to be inserted, use one of the Insert methods.
            </remarks>
        </member>
        <member name="T:DvtkHighLevelInterface.Dicom.Other.DICOMPeer">
            <summary>
            Structure of DICOM peers. It holds AR,Name,IP and port
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.DICOMPeer.WriteIntoFile(System.String,System.Collections.Generic.List{DvtkHighLevelInterface.Dicom.Other.DICOMPeer})">
            <summary>
            wirtes the peer list in to file in the given path
            </summary>
            <param name="path">Config file location </param>
            <param name="peers">List of Peers to wirte</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.DICOMPeer.ReadFromFile(System.IO.FileInfo)">
            <summary>
            Reads the peers from the config file location
            </summary>
            <param name="info">Config file location</param>
            <returns>returns the list of peers read from the file</returns>
        </member>
        <member name="T:DvtkHighLevelInterface.Dicom.Messages.DicomMessage">
            <summary>
            Represents a Dicom Message.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.Messages.DicomMessage.commandSet">
            <summary>
            See property CommandSet.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.Messages.DicomMessage.dataSet">
            <summary>
            See property DataSet.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.Messages.DicomMessage.encodedPCID">
            <summary>
            See property EncodedPresentationContextID.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Messages.DicomMessage.#ctor(DvtkData.Dimse.DimseCommand)">
            <summary>
            Constructor.
            
            Use this constructor to create a DicomMessage with an empty command set
            and empty data set.
            </summary>
            <param name="dimseCommand">The Dimse command.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Messages.DicomMessage.#ctor(DvtkData.Dimse.DimseCommand,DvtkHighLevelInterface.Dicom.Other.DataSet)">
            <summary>
            Constructor.
            
            Use this constructor to create a DicomMessage with an empty command set
            and the given Dataset.
            </summary>
            <param name="dimseCommand">The Dimse command.</param>
            <param name="dataSet">The Dataset.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Messages.DicomMessage.#ctor(DvtkData.Dimse.DicomMessage)">
            <summary>
            Constructor.
            
            Use this constructor to construct the command set and data set based on the 
            command set and data set contained in the encapsulated DvtkData DicomMessage.
            </summary>
            <param name="dvtkDataDicomMessage">The encapsulated DvtkData DicomMessage.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Messages.DicomMessage.Exists(System.String)">
            <summary>
            Indicates if the specified attribute exists.
            </summary>
            <param name="tagSequenceString">The tag sequence (see class TagSequence for the format).</param>
            <returns>Boolean indicating if the specified attribute exists.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Messages.DicomMessage.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The cloned instance.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Messages.DicomMessage.ConsoleDisplay">
            <summary>
            Display all attributes on the console.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Messages.DicomMessage.Set(DvtkData.Dimse.Tag,DvtkData.Dimse.VR,System.Object[])">
            <summary>
            Adds a single attribute with the tag, VR and values specified.
            </summary>
            <remarks>
            Depending on the group number of the tag, the attribute
            is set in the CommandSet or DataSet of this instance.
            <br></br><br></br>
            If an attribute already exists with this tag, it is removed first before it is 
            again set.
            </remarks>
            <param name="dvtkDataTag">The tag that uniquely identifies the attribute.</param>
            <param name="vR">The VR of the attribute.</param>
            <param name="parameters">
            The values of the attribute. Do not use the DICOM delimeter '\' directly. Instead use
            multiple parameter arguments for this method when adding a single attribute with multiple values.
            </param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Messages.DicomMessage.Set(System.String,DvtkData.Dimse.VR,System.Object[])">
            <summary>
            Adds a single attribute with the tag sequence string, VR and values specified.
            </summary>
            <remarks>
            Depending on the group number of the last tag in the tag sequence string, the attribute
            is set in the CommandSet or DataSet of this instance.
            <br></br><br></br>
            If an attribute already exists with this tag sequence string, it is removed first before it is 
            again set.
            <br></br><br></br>
            If sequence items (each with a sequence item index) are specified in the tag sequence string,
            empty sequence items will be added automatically to avoid gaps in the sequence items of sequence
            attributes.
            </remarks>
            <param name="tagSequenceString">The tag sequence string that uniquely identifies the attribute.</param>
            <param name="vR">The VR of the attribute.</param>
            <param name="parameters">
            The values of the attribute. Do not use the DICOM delimeter '\' directly. Instead use
            multiple parameter arguments for this method when adding a single attribute with multiple values.
            </param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Messages.DicomMessage.Set(DvtkHighLevelInterface.Dicom.Other.TagSequence,DvtkData.Dimse.VR,System.Object[])">
            <summary>
            Adds a single attribute with the tag sequence, VR and values specified.
            </summary>
            <remarks>
            Depending on the group number of the last tag in the tag sequence, the attribute
            is set in the CommandSet or DataSet of this instance.
            <br></br><br></br>
            If an attribute already exists with this tag sequence, it is removed first before it is 
            again set.
            <br></br><br></br>
            If sequence items (each with a sequence item index) are specified in the tag sequence,
            empty sequence items will be added automatically to avoid gaps in the sequence items of sequence
            attributes.
            </remarks>
            <param name="tagSequence">The tag sequence that uniquely identifies the attribute.</param>
            <param name="vR">The VR of the attribute.</param>
            <param name="parameters">
            The values of the attribute. Do not use the DICOM delimeter '\' directly. Instead use
            multiple parameter arguments for this method when adding a single attribute with multiple values.
            </param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Messages.DicomMessage.ToString">
            <summary>
            Returns a String that represents this instance.
            </summary>
            <returns>A String that represents this instance.</returns>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Messages.DicomMessage.CommandSet">
            <summary>
            The CommandSet of this DicomMessage.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Messages.DicomMessage.DataSet">
            <summary>
            The DataSet of this DicomMessage.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Messages.DicomMessage.EncodedPresentationContextID">
            <summary>
            The presentation context ID represents by which Dicom Message is received from the network.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Messages.DicomMessage.DvtkDataDicomMessage">
            <summary>
            The encapsulated DvtkData DicomMessage.
            
            This DvtkData DicomMessage is not stored inside this class but is reconstructed from
            the encapsulated DvtkData CommandSet and encapsulated DvtkData DataSet.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Messages.DicomMessage.Item(System.String)">
            <summary>
            Gets the attribute that has the supplied tag sequence string.
            </summary>
            <param name="tagSequenceString"></param>
            <returns></returns>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Compare.GeneratorStaticDicomCompare">
            <summary>
            AttributeSets to compare with each other using a static compare.
            An instance of this class helps in determine which attributes need to be compared to each other.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.GeneratorStaticDicomCompare.attributeCollections">
            <summary>
            Array of attribute sets to compare with each other.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.GeneratorStaticDicomCompare.currentAttributeIndices">
            <summary>
            Indicates for each attribute set the index of the current attribute.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.GeneratorStaticDicomCompare.#ctor">
            <summary>
            Hide default constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.GeneratorStaticDicomCompare.#ctor(DvtkHighLevelInterface.Common.Compare.AttributeCollections)">
            <summary>
            Constructor.
            </summary>
            <param name="attributeCollections">The attribute sets to compare.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.GeneratorStaticDicomCompare.DetermineNextAttributes(DvtkHighLevelInterface.Dicom.Other.TagSequence)">
            <summary>
            Get the next collection of attributes to compare to each other.
            If an attribute is not present, a null pointer is returned in the AttributeCollection.
            If all attributes have been compared, null is returned.
            </summary>
            <returns>The attributes to validate.</returns>
            
        </member>
        <member name="T:DvtkHighLevelInterface.InformationModel.ModalityWorklistInformationModel">
            <summary>
            Summary description for ModalityWorklistInformationModel.
            Provides a wrapper class around the Dvtk.Dicom.InformationEntity.Worklist.ModalityWorklistInformationModel class.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.ModalityWorklistInformationModel.#ctor">
            <summary>
            Class constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.ModalityWorklistInformationModel.AddToInformationModel(DvtkHighLevelInterface.Dicom.Other.DataSet)">
            <summary>
            Add data to the Information Model from the given dataset.
            </summary>
            <param name="dataset">Dataset used to populate the Information Model.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.ModalityWorklistInformationModel.AddToInformationModel(DvtkHighLevelInterface.Dicom.Other.DataSet,System.Boolean)">
            <summary>
            Add data to the Information Model from the given dataset with Storage option.
            </summary>
            <param name="dataset">Dataset used to populate the Information Model.</param>
            <param name="storeDataset">Boolean indicating whether or not the dataset should also be stored to file for possible retrieval.</param>
        </member>
        <member name="T:DvtkHighLevelInterface.Hl7.Messages.Hl7ProtocolMessage">
            <summary>
            An object of this class represents a HL7 protocol message.
            
            Not yet implemented.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Dicom.Threads.OutboundDicomMessageFilterSetAttribute">
            <summary>
            Outbound DICOM message filter to set exactly one attribute.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.OutboundDicomMessageFilterSetAttribute.#ctor(System.String,DvtkData.Dimse.VR,System.Object[])">
            <summary>
            Constructor.
            </summary>
            <param name="tag">The tag of the attribute to set.</param>
            <param name="vr">The VR of the attribute to set.</param>
            <param name="values">The values of the attribute to set.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.OutboundDicomMessageFilterSetAttribute.Apply(DvtkHighLevelInterface.Dicom.Messages.DicomMessage)">
            <summary>
            Set one attribute in the outbound DICOM message.
            </summary>
            <param name="dicomMessage">The outbound DICOM message.</param>
        </member>
        <member name="T:DvtkHighLevelInterface.Dicom.Other.Tag">
            <summary>
            Represents a Dicom tag.
            
            May also represent a specific sequence item in a Sequence Attribute or all
            sequence items in a Sequence Attribute when used in a TagSequence (that is
            combining multiple tags).
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.Other.Tag.containsIndex">
            <summary>
            See property ContainsIndex.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.Other.Tag.containsWildcardIndex">
            <summary>
            See property ContainsWildcardIndex.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.Other.Tag.elementNumber">
            <summary>
            See property ElementNumber.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.Other.Tag.groupNumber">
            <summary>
             See property GroupNumber.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.Other.Tag.indexNumber">
            <summary>
            See property IndexNumber.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.Other.Tag.isValid">
            <summary>
            See property IsValid.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.Tag.#ctor">
            <summary>
            Hide default Constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.Tag.#ctor(System.UInt32)">
            <summary>
            Constructor.
            
            This instance will represent a Dicom Tag.
            </summary>
            <param name="tagAsUInt32">The tag specified as an UInt32.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.Tag.#ctor(System.UInt16,System.UInt16)">
            <summary>
            Constructor.
            
            This instance will represent a Dicom Tag.
            </summary>
            <param name="groupNumber">Group number of the tag.</param>
            <param name="elementNumber">Element number of the tag.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.Tag.#ctor(System.String)">
            <summary>
            Constructor.
            
            Specifies the tag as a String.
            If no index is used, this instance will represent a Dicom Tag: "0xggggeeee".
            If an index is used, this instance will represent a specific Dicom Sequence Item
            in a Sequence Attribute: "0xggggeeee[i]".
            If a wildcard index is used, this instance will represent all Dicom Sequence Item present
            in a Sequence Attribute: "0xggggeeee[]".
            
            - gggg is a four digit hexadecimal group number.
            - eeee is a four digit hexadecimal element number.
            - i is a one-based sequence item index.
            </summary>
            <param name="tagAsString">The tag specified as a String.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.Tag.Clone">
            <summary>
            Create a deep copy of this tag.
            </summary>
            <returns>The created deep copy.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.Tag.ToString">
            <summary>
            Returns a String that represents this instance. 
            </summary>
            <returns>A String that represents this instance.</returns>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.Tag.AsString">
            <summary>
            Gets the String representation of this instance.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.Tag.AsUInt32">
            <summary>
            Gets the UInt32 representation of this instance.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.Tag.ContainsIndex">
            <summary>
            Indicates if this instance contains an index.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.Tag.ContainsWildcardIndex">
            <summary>
            Indicates if this instance contains a wildcard index.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.Tag.DicomNotation">
            <summary>
            Gets the Dicom Standard String representation of this instance,
            i.e. using the format "(gggg,eeee)".
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.Tag.ElementNumber">
            <summary>
            Gets the element number of this instance.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.Tag.GroupNumber">
            <summary>
            Gets the group number of this instance.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.Tag.IndexNumber">
            <summary>
            Gets or sets the index number of this instance.
            The get property is only valid if ContainsIndex returns true.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.Tag.IsValid">
            <summary>
            Indicates if this instance has been constructed with valid parameters.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.Tag.IsValidForCommandSet">
            <summary>
            Indicates if this instance is valid for a CommandSet attribute.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.Tag.IsValidForDataSet">
            <summary>
            Indicates if this instance is valid for a DataSet attribute.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.Tag.IsValidForDirectoryRecord">
            <summary>
            Indicates if this instance is valid for a DirectoryRecord attribute.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.Tag.IsValidForFileMetaInformation">
            <summary>
            Indicates if this instance is valid for a FileMetaInformation attribute.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Other.GeneratorStaticCompare">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            <br></br>
            AttributeSets to compare with each other using a static compare.
            An instance of this class helps in determine which attributes need to be compared to each other.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.GeneratorStaticCompare.attributeSets">
            <summary>
            Array of attribute sets to compare with each other.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Other.GeneratorStaticCompare.currentAttributeIndices">
            <summary>
            Indicates for each attribute set the index of the current attribute.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.GeneratorStaticCompare.#ctor">
            <summary>
            Hide default constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.GeneratorStaticCompare.#ctor(System.Collections.ArrayList)">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            <br></br>
            Constructor.
            </summary>
            <param name="attributeSets">The attribute sets to compare.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.GeneratorStaticCompare.GetNextAttributes(System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList)">
            <summary>
            Obsolete class, use the classes in the namespace DvtkHighLevelInterface.Common.Compare instead.
            </summary>
            <param name="compareFlagsForAttributeSets">-</param>
            <param name="dicomAttributeFlagsForAttributeSets">-</param>
            <param name="displayAttributeSets">-</param>
            <returns>-</returns>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Other.HliException">
            <summary>
            Class that may be used to raise an exception that is thrown within the HLI assembly.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.HliException.#ctor">
            <summary>
            Hide default constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Other.HliException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="exceptionText">The exception text.</param>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Compare.Hl7Attribute">
            <summary>
            Summary description for Hl7Attribute.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.Hl7Attribute.attributeOnly">
            <summary>
            See property AttributeOnly.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.Hl7Attribute.validationRuleHl7Attribute">
            <summary>
            See property ValidationRuleDicomAttribute.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.Hl7Attribute.#ctor">
            <summary>
            Hide default constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.Hl7Attribute.#ctor(System.String,DvtkHighLevelInterface.Common.Compare.ValidationRuleHl7Attribute)">
            <summary>
            Constructor.
            </summary>
            <param name="attributeOnly">The attribute without the validation rule.</param>
            <param name="validationRuleHl7ttribute">The validation rule that needs to be applied to the attribute.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.Hl7Attribute.ValuesToString">
            <summary>
            Converts the values of the actual attribute to a string representation.
            </summary>
            <returns>The string representation of the actual attribute.</returns>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Compare.Hl7Attribute.AttributeOnly">
            <summary>
            Property to get the attribute without the validation rule.
            For now, only the String representing the value is stored.
            An empty String means the absence of a HL7 attribute.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Compare.Hl7Attribute.IsPresent">
            <summary>
            Indicates if the actual attribute is present.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Compare.Hl7Attribute.ValidationRuleHl7Attribute">
            <summary>
            Property to get the validation rule that needs to be applied to the attribute.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Compare.FlagsHl7Attribute">
            <summary>
            Flags the are relevant for HL7 Attributes.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.FlagsHl7Attribute.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.FlagsHl7Attribute.Compare_present">
            <summary>
            Check if all attributes with this flag are either all present or are all not present.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.FlagsHl7Attribute.Compare_values">
            <summary>
            Check if all attributes with this flag have the same values.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.FlagsHl7Attribute.Present">
            <summary>
            Check if an attribute with this flag is present.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.FlagsHl7Attribute.Not_present">
            <summary>
            Check if an attribute with this flag is not present.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Compare.CompareRule">
            <summary>
            Contains one or more ValidationRule instances. Specifies how a list of attributes
            (Dicom and/or HL7) should be validated together.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.CompareRule.conditionText">
            <summary>
            See property ManualCondition.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.CompareRule.validationRules">
            <summary>
            Internal list that stores the ordered list of validation rules.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.CompareRule.compareValueType">
            <summary>
            See property ValueType.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.CompareRule.#ctor">
            <summary>
            Hide default constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.CompareRule.#ctor(DvtkHighLevelInterface.Common.Compare.ValidationRuleBase[])">
            <summary>
            Constructor.
            </summary>
            <param name="validationRules">The ordered list of validation rules.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.CompareRule.Add(DvtkHighLevelInterface.Common.Compare.ValidationRuleBase)">
            <summary>
            Adds a validation rule.
            </summary>
            <param name="validationRule">The validation rule.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.CompareRule.RemoveAt(System.Int32)">
            <summary>
            Removes a validation rule at a specified index.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.CompareRule.Clone">
            <summary>
            Clone this CompareRule instance.
            </summary>
            <returns>The cloned CompareRule instance.</returns>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Compare.CompareRule.Count">
            <summary>
            Number of validation rules.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Compare.CompareRule.ConditionText">
            <summary>
            Gets or sets the condition text.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Compare.CompareRule.Item(System.Int32)">
            <summary>
            Property to get a specific validation rule.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Compare.CompareRule.CompareValueType">
            <summary>
            Gets or sets the compare value type.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Compare.CompareRule.ArrayRepresentation">
            <summary>
            Gets or sets the array representation of this instance (used for serialisation from/to xml).
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Dicom.Other.DicomProtocolMessageReceiveException">
            <summary>
            The exception that is thrown when receiving of a Dicom protocol message fails.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.Other.DicomProtocolMessageReceiveException.receiveReturnCode">
            <summary>
            See property ReceiveReturnCode.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.DicomProtocolMessageReceiveException.#ctor(System.String,Dvtk.Sessions.ReceiveReturnCode)">
            <summary>
            Constructor.
            </summary>
            <param name="exceptionText">The exception text.</param>
            <param name="receiveReturnCode">The receive return code indicating the reason for the exception.</param>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.DicomProtocolMessageReceiveException.ReceiveReturnCode">
            <summary>
            Gets the receive return code indicating the reason for the exception.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Messages.MessageCollection">
            <summary>
            Collection of messages.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Messages.MessageCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Messages.MessageCollection.#ctor(DvtkHighLevelInterface.Common.Messages.Message[])">
            <summary>
            Constructor with initialization. Shallow copy.
            </summary>
            <param name="arrayOfValues">values to copy.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Messages.MessageCollection.Add(DvtkHighLevelInterface.Common.Messages.Message)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The item to add to the <see cref="T:System.Collections.IList"/>. </param>
            <returns>The position into which the new element was inserted.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Messages.MessageCollection.Contains(DvtkHighLevelInterface.Common.Messages.Message)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IList"/> contains a specific item.
            </summary>
            <param name="value">The item to locate in the <see cref="T:System.Collections.IList"/>.</param>
            <returns><see langword="true"/> if the item is found in the <see cref="T:System.Collections.IList"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Messages.MessageCollection.IndexOf(DvtkHighLevelInterface.Common.Messages.Message)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The item to locate in the <see cref="T:System.Collections.IList"/>.</param>
            <returns>The index of <c>value</c> if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Messages.MessageCollection.Insert(System.Int32,DvtkHighLevelInterface.Common.Messages.Message)">
            <summary>
            Inserts an item to the IList at the specified position.
            </summary>
            <param name="index">The zero-based index at which <c>value</c> should be inserted. </param>
            <param name="value">The item to insert into the <see cref="T:System.Collections.IList"/>.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Messages.MessageCollection.Remove(DvtkHighLevelInterface.Common.Messages.Message)">
            <summary>
            Removes the first occurrence of a specific item from the IList.
            </summary>
            <param name="value">The item to remove from the <see cref="T:System.Collections.IList"/>.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Messages.MessageCollection.ToString">
            <summary>
            Returns a String that represents the current Object. 
            </summary>
            <returns>A String that represents the current instance.</returns>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Messages.MessageCollection.DicomProtocolMessages">
            <summary>
            Gets the DICOM protocol messages in this collection.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Messages.MessageCollection.Hl7ProtocolMessages">
            <summary>
            Gets the HL7 protocol messages in this collection.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Messages.MessageCollection.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index.
            </summary>
            <value>The item at the specified <c>index</c>.</value>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Compare.FlagsDicomAttribute">
            <summary>
            Flags the are relevant for Dicom Attributes.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.FlagsDicomAttribute.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.FlagsDicomAttribute.Compare_present">
            <summary>
            Check if all attributes with this flag are either all present or are all not present.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.FlagsDicomAttribute.Compare_values">
            <summary>
            Check if all attributes with this flag have the same values.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.FlagsDicomAttribute.Present">
            <summary>
            Check if an attribute with this flag is present.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.FlagsDicomAttribute.Not_present">
            <summary>
            Check if an attribute with this flag is not present.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.FlagsDicomAttribute.Compare_VR">
            <summary>
            Check if all attributes with this flag have the same VR.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.FlagsDicomAttribute.Values">
            <summary>
            Check if an attribute with this flag has values.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.FlagsDicomAttribute.No_values">
            <summary>
            Check if an attribute with this flag has no values.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.FlagsDicomAttribute.Include_sequence_items">
            <summary>
            Also do a compare for all attributes contained in a sequence attribute.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Compare.CompareRules">
            <summary>
            All validation rules that will be applied to a list of attribute collections.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.CompareRules.xmlStructureVersion">
            <summary>
            Indicates the version of the xml structure used to serialize and deserialize an instance of this class.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.CompareRules.compareRules">
            <summary>
            The internal hidden non-type-safe list of CcompareRules implemented as an ArrayList.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.CompareRules.generalAttributeCollectionDescriptions">
            <summary>
            See property GeneralAttributeCollectionDescriptions.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.CompareRules.typeOfAttributes">
            <summary>
            Contains a list indicating the types of attributes used in the different data sets to compare.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.CompareRules.#ctor">
            <summary>
            Default constructor.
            </summary>
            <remarks><b>Do not use this constructor. It may only be used indirectly for serialization purposes.</b></remarks>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.CompareRules.#ctor(DvtkHighLevelInterface.Common.Compare.AttributeTypes[])">
            <summary>
            Constructor to create an empty instances.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.CompareRules.Add(DvtkHighLevelInterface.Common.Compare.CompareRule)">
            <summary>
            Add a CompareRule the this object.
            <br></br><br></br>
            A check is performed if the compareRule is compatible with earlier added one.
            If it is not compatible, an exception is thrown.
            </summary>
            <param name="compareRule">The CompareRule instance to add.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.CompareRules.Deserialize(System.String)">
            <summary>
            Cretaes a CompareRules instance using an xml file as input.
            </summary>
            <param name="fullFileName">Full file name of the .xml file.</param>
            <returns>The created CompareRules instance.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.CompareRules.Serialize(System.String)">
            <summary>
            Serializes this CompareRules instance.
            </summary>
            <param name="fullFileName">Full file name of the .xml file.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.CompareRules.GetGeneralAttributeCollectionDescription(System.Int32)">
            <summary>
            Gets a specific description for an attribute collection.
            </summary>
            <param name="index">The index specifying the attribute collection.</param>
            <returns>The description.</returns>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Compare.CompareRules.Count">
            <summary>
            Gets the number of CompareRule instances.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Compare.CompareRules.Item(System.Int32)">
            <summary>
            Gets a specific CompareRule instance.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Compare.CompareRules.ArrayRepresentation">
            <summary>
            Are representation of this instance.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Compare.CompareRules.GeneralAttributeCollectionDescriptions">
            <summary>
            Gets or sets the general descriptions of the attribute collections.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Compare.CompareRules.TypeOfAttributes">
            <summary>
            Gets or sets the type of attributes that may be compared with each other.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Compare.CompareRules.XmlStructureVersion">
            <summary>
            Gets or sets the xml structure version.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Compare.CompareResults">
            <summary>
            Contains the results of comparing two or more data sets.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.CompareResults.differencesCount">
            <summary>
            See property DifferencesCount.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Common.Compare.CompareResults.table">
            <summary>
            See property Table.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.CompareResults.#ctor">
            <summary>
            Hide default constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.CompareResults.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="numberOfColumns">The number of columns present in the table.</param>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Compare.CompareResults.DifferencesCount">
            <summary>
            Gets or sets the total number of differences found.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Common.Compare.CompareResults.Table">
            <summary>
            Gets the table containing the results for comparing two or more data sets.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.InformationModel.QueryRetrieveInformationModels">
            <summary>
            Summary description for QueryRetrieveInformationModels.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.QueryRetrieveInformationModels.#ctor">
            <summary>
            Class Constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.QueryRetrieveInformationModels.Load(System.String)">
            <summary>
            Load the Information Model from the contents of the Data Directory. Look for all .DCM and .RAW files
            and load them.
            </summary>
            <param name="dataDirectory">Data directory containing the .DCM and .RAW files.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.QueryRetrieveInformationModels.Refresh">
            <summary>
            Refresh the Information Model contents
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.QueryRetrieveInformationModels.Add(DvtkHighLevelInterface.Dicom.Files.DicomFile)">
            <summary>
            Add data to the Information Model from the given dataset.
            </summary>
            <param name="dataset">Dataset used to populate the Information Model.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.QueryRetrieveInformationModels.Add(DvtkHighLevelInterface.Dicom.Files.DicomFile,System.Boolean)">
            <summary>
            Add data to the Information Model from the given dataset with Store data option.
            </summary>
            <param name="dataset">Dataset used to populate the Information Model.</param>
            <param name="storeDataset">Boolean indicating whether or not the dataset should also be stored to file for possible retrieval.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.QueryRetrieveInformationModels.AddDefaultAttribute(System.Boolean,System.String,DvtkData.Dimse.VR,System.Object[])">
            <summary>
            Copy the default dataset attributes to the Information Entities in the Information Models that define them.
            </summary>
            <param name="overWriteExistingValue">Boolean to indicate whether any already existing value should be overwritten or not.</param>
            <param name="tagSequence">The tag sequence.</param>
            <param name="vR">The VR.</param>
            <param name="parameters">The values.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.InformationModel.QueryRetrieveInformationModels.AddAdditionalAttribute(System.Boolean,System.String,DvtkData.Dimse.VR,System.Object[])">
            <summary>
            Add the attributes in this additional dataset to all Information Entities in the Information
            Models. 
            </summary>
            <param name="overWriteExistingValue">Boolean to indicate whether any already existing value should be overwritten or not.</param>
            <param name="tagSequence">The tag sequence.</param>
            <param name="vR">The VR.</param>
            <param name="parameters">The values.</param>
        </member>
        <member name="P:DvtkHighLevelInterface.InformationModel.QueryRetrieveInformationModels.PatientRoot">
            <summary>
            Get Query/Retrieve Patient Root Information Model.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.InformationModel.QueryRetrieveInformationModels.StudyRoot">
            <summary>
            Get Query/Retrieve Study Root Information Model
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.InformationModel.QueryRetrieveInformationModels.PatientStudyOnly">
            <summary>
            Get Query/Retrieve Patient/Study Only Information Model
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.InformationModel.QueryRetrieveInformationModels.DataDirectory">
            <summary>
            Property - DataDirectory.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Dicom.Threads.ConcurrentMessageIterator">
            <summary>
            This class implements a MessageIterator descendant that handles each single association in
            a different child DicomThread. Multiple associations may be handled concurrently: when
            a child DicomThread accepts an association, this instance almost immediately starts
            a new child DicomThread that starts listening to the same port.
            <br></br><br></br>
            An instance of this class constructed from outside the HLI interface only contains an
            overview of all started child DicomThreads in the corresponding results files.
            <br></br><br></br>
            A user of this class (outside the HLI interface) is only concerned with creating an instance
            of this class, calling the correct Initialize method, set the correct options, add MessageHandlers
            and/or override MessageHandler methods and calling the Start method.
            </summary>
            <remarks>
            When the BeforeHandlingAssociateRequest method of this class needs to be overriden, make
            sure that in the derived class the method of this class is called first.
            <br></br><br></br>
            Make sure that a descendant class of this class always implements the constructor with 
            single parameter (String identifierBasisChildThreads), that needs to call the constructor
            with the same parameter of his class.
            <br></br><br></br>
            When creating a descendant, say DescClass, of this class, note the following.
            Because an instance of DescClass implicitly created new instances of DescClass, make sure 
            any fields declared in DescClass are declared static.
            </remarks>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.Threads.ConcurrentMessageIterator.childDicomThreadNumber">
            <summary>
            Number used to determine the results files name of a child DicomThread.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.Threads.ConcurrentMessageIterator.identifierBasisChildThreads">
            <summary>
            To actual identifier used for a child DicomThread will be the
            identifierBasisChildThreads appended with a number (starting from 1).
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.Threads.ConcurrentMessageIterator.lockObject">
            <summary>
            Used to lock the childDicomThreadNumber field.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.Threads.ConcurrentMessageIterator.overviewThread">
            <summary>
            The DicomThread (that may be constructed from outside the HLI interface) that contains 
            the child DicomThreads that handle the actual associations.
            
            If this object is the overview Thread, this field is null.
            If this object is a child DicomThread, this field contains the overview Thread.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.Threads.ConcurrentMessageIterator.resultsFileNameOnlyWithoutExtensionBasisChildThreads">
            <summary>
            If unequal to null,
            the actual resultsFileNameOnlyWithoutExtension used for a child DicomThread will be the
            resultsFileNameOnlyWithoutExtensionBasisChildThreads appended with a number (starting from 1).
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.ConcurrentMessageIterator.#ctor">
            <summary>
            Hide default constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.ConcurrentMessageIterator.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="identifierBasisChildThreads">
            To actual identifier used for a child DicomThread will be the
            identifierBasisChildThreads appended with a number (starting from 1).
            </param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.ConcurrentMessageIterator.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="identifierBasisChildThreads">
            To actual identifier used for a child DicomThread will be the
            identifierBasisChildThreads appended with a number (starting from 1).
            </param>
            <param name="resultsFileNameOnlyWithoutExtensionBasisChildThreads">
            The actual resultsFileNameOnlyWithoutExtension used for a child DicomThread will be the
            resultsFileNameOnlyWithoutExtensionBasisChildThreads appended with a number (starting from 1).
            </param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.ConcurrentMessageIterator.BeforeHandlingAssociateRequest(DvtkHighLevelInterface.Dicom.Messages.AssociateRq)">
            <summary>
            This method is called after an A-ASSOCIATE-RQ has been received but before it
            (possibly) will be handled by the (zero or more) MessageHandler instances that
            are attached to this object.
            
            This implementation makes sure that before the A-ASSOCIATE-RQ is handled, a new
            child DicomThread is started that listens to the same port as the current instance.
            This method will only be called by a child DicomThread.
            </summary>
            <param name="associateRq">The received A-ASSOCIATE-RQ</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.ConcurrentMessageIterator.CreateAndStartChildDicomThread(DvtkHighLevelInterface.Dicom.Threads.ConcurrentMessageIterator)">
            <summary>
            Create and start a child DicomThread.
            </summary>
            <param name="overviewThread">The overview Thread.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.ConcurrentMessageIterator.HandleMessageReceivedEvent(DvtkHighLevelInterface.Dicom.Messages.DicomProtocolMessage)">
            <summary>
            Make sure that only one association is handled by a child DicomThread.
            </summary>
            <param name="dicomProtocolMessage">The message received.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.ConcurrentMessageIterator.HandleSendingMessageEvent(DvtkHighLevelInterface.Dicom.Messages.DicomProtocolMessage)">
            <summary>
            Make sure that only one association is handled by a child DicomThread.
            </summary>
            <param name="dicomProtocolMessage">The message received.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Threads.ConcurrentMessageIterator.InitialAction">
            <summary>
            The following implementation makes sure that a new sub DicomThread is created and started by
            the overview Thread. After doing this, this objects waits until all subthreads are stopped.
            
            When this object is a sub DicomThread, nothing is done.
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Dicom.Other.PresentationContext">
            <summary>
            Represents a Dicom presentation context.<br></br><br></br>
            
            This class is used used both for an A-ASSOCIATE-RQ and an A-ASSOCIATE-AC.
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.Other.PresentationContext.dvtkDataAcceptedPresentationContext">
            <summary>
            See property DvtkDataAcceptedPresentationContext
            </summary>
        </member>
        <member name="F:DvtkHighLevelInterface.Dicom.Other.PresentationContext.dvtkDataRequestedPresentationContext">
            <summary>
            See property DvtkDataRequestedPresentationContext
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.PresentationContext.#ctor">
            <summary>
            Hide default constructor.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.PresentationContext.#ctor(DvtkData.Dul.AcceptedPresentationContext)">
            <summary>
            Constructor.
            
            Use this constructor to encapsulate an existing DvtkData AcceptedPresentationContext instance.
            </summary>
            <param name="dvtkDataAcceptedPresentationContext">The DvtkData AcceptedPresentationContext instance to encapsulate.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.PresentationContext.#ctor(DvtkData.Dul.RequestedPresentationContext)">
            <summary>
            Constructor.
            
            Use this constructor to encapsulate an existing DvtkData RequestedPresentationContext instance.
            </summary>
            <param name="dvtkDataRequestedPresentationContext">The DvtkData RequestedPresentationContext instance to encapsulate.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.PresentationContext.#ctor(System.String,System.String[])">
            <summary>
            Constructor.
            
            Use this constructor to create a new presentation context instance that is to be used in an A-ASSOCIATE-RQ.
            </summary>
            <param name="abstractSyntax">The abstract syntax.</param>
            <param name="transferSyntaxes">The transfer syntaxes (must contain at least one transfer syntax).</param>
            <exception cref="T:System.ArgumentException">No transfer syntaxes have been supplied.</exception>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.PresentationContext.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Constructor.
            
            Use this constructor to create a new presentation context instance that is to be used in an A-ASSOCIATE-AC.
            </summary>
            <param name="abstractSyntax">The abstract syntax.</param>
            <param name="result">The result.</param>
            <param name="transferSyntax">The transfer syntax. May be empty when result is unequal to 0.</param>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.PresentationContext.SetId(System.Int32)">
            <summary>
            Sets the presentation context ID. 
            </summary>
            <param name="id">The presentation context ID.</param>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.PresentationContext.AbstractSyntax">
            <summary>
            Gets the abstract syntax.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.PresentationContext.DvtkDataAcceptedPresentationContext">
            <summary>
            Gets the encapsulated DvtkData AcceptedPresentationContext instance.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.PresentationContext.DvtkDataARequestedPresentationContext">
            <summary>
            Gets the encapsulated DvtkData RequestedPresentationContext instance.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.PresentationContext.ID">
            <summary>
            Gets the presentation context ID.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.PresentationContext.IsForAssociateAccept">
            <summary>
            Indicates if this instance has been constructed for an A-ASSOCIATE-AC.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.PresentationContext.IsForAssociateRequest">
            <summary>
            Indicates if this instance has been constructed for an A-ASSOCIATE-RQ.
            </summary>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.PresentationContext.Result">
            <summary>
            Gets the Result.
            </summary>
            <remarks>
            Only use this property for an A-ASSOCIATE-AC presentation context.
            </remarks>
            <exception cref="T:System.InvalidOperationException">This instance is not an A-ASSOCIATE-AC presentation context.</exception>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.PresentationContext.TransferSyntax">
            <summary>
            Gets the transfer syntax.
            </summary>
            <remarks>
            Only use this property for an A-ASSOCIATE-AC presentation context.
            </remarks>
            <exception cref="T:System.InvalidOperationException">This instance is not an A-ASSOCIATE-AC presentation context.</exception>
        </member>
        <member name="P:DvtkHighLevelInterface.Dicom.Other.PresentationContext.TransferSyntaxes">
            <summary>
            Gets the transfer syntaxes.
            </summary>
            <remarks>
            Only use this property for an A-ASSOCIATE-RQ presentation context.
            </remarks>
            <exception cref="T:System.InvalidOperationException">This instance is not an A-ASSOCIATE-RQ presentation context.</exception>
        </member>
        <member name="M:DvtkHighLevelInterface.Dicom.Other.BooleanExpressionDataSetContainsAttribute.#ctor(System.String)">
            <summary>
            Default constructor. 
            </summary>
        </member>
        <member name="T:DvtkHighLevelInterface.Common.Compare.FlagsConvertor">
            <summary>
            Class used to convert from one type of flags to another type.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.FlagsConvertor.#ctor">
            <summary>
            Hide default constructor.
            Only allow the static methods of this class to be used.
            </summary>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.FlagsConvertor.ConvertToFlagsBase(DvtkHighLevelInterface.Common.Compare.FlagsDicomAttribute)">
            <summary>
            Convert FlagsDicomAttribute to FlagsBase.
            </summary>
            <param name="flagsDicomAttribute">The Dicom Attribute flags.</param>
            <returns>The base flags.</returns>
        </member>
        <member name="M:DvtkHighLevelInterface.Common.Compare.FlagsConvertor.ConvertToFlagsBase(DvtkHighLevelInterface.Common.Compare.FlagsHl7Attribute)">
            <summary>
            Convert FlagsHl7Attribute to FlagsBase.
            </summary>
            <param name="flagsHl7Attribute">The HL7 Attribute flags.</param>
            <returns>The base flags.</returns>
        </member>
    </members>
</doc>
