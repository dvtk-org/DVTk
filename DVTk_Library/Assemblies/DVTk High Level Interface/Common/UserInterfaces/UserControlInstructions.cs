// ------------------------------------------------------
// DVTk - The Healthcare Validation Toolkit (www.dvtk.org)
// Copyright © 2009 DVTk
// ------------------------------------------------------
// This file is part of DVTk.
//
// DVTk is free software; you can redistribute it and/or modify it under the terms of the GNU
// Lesser General Public License as published by the Free Software Foundation; either version 3.0
// of the License, or (at your option) any later version. 
// 
// DVTk is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
// the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser
// General Public License for more details. 
// 
// You should have received a copy of the GNU Lesser General Public License along with this
// library; if not, see <http://www.gnu.org/licenses/>



using System;
using System.Collections;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Windows.Forms;
using System.Threading;

using Thread = DvtkHighLevelInterface.Common.Threads.Thread;



namespace DvtkHighLevelInterface.Common.UserInterfaces
{
	/// <summary>
	/// This class implements the instructions control used in HliInternalForm.
	/// </summary>
	internal class UserControlInstructions : System.Windows.Forms.UserControl
	{
		//
		// - Generated by Visual Studio -
		//

		private System.Windows.Forms.RichTextBox richTextBoxInstructions;
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.Container components = null;

		#region Component Designer generated code
		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent()
		{
			this.richTextBoxInstructions = new System.Windows.Forms.RichTextBox();
			this.SuspendLayout();
			// 
			// richTextBoxInstructions
			// 
			this.richTextBoxInstructions.BackColor = System.Drawing.SystemColors.Control;
			this.richTextBoxInstructions.Dock = System.Windows.Forms.DockStyle.Fill;
			this.richTextBoxInstructions.HideSelection = false;
			this.richTextBoxInstructions.Location = new System.Drawing.Point(0, 0);
			this.richTextBoxInstructions.Name = "richTextBoxInstructions";
			this.richTextBoxInstructions.Size = new System.Drawing.Size(368, 352);
			this.richTextBoxInstructions.TabIndex = 0;
			this.richTextBoxInstructions.Text = "";
			// 
			// UserControlInstructions
			// 
			this.Controls.Add(this.richTextBoxInstructions);
			this.Name = "UserControlInstructions";
			this.Size = new System.Drawing.Size(368, 352);
			this.ResumeLayout(false);

		}
		#endregion



		//
		// - Fields -
		//

		/// <summary>
		/// The instructions from the different Threads.
		/// </summary>
		private ArrayList instructions = new ArrayList();



		//
		// - Constructors -
		//

		/// <summary>
		/// Default constructor.
		/// </summary>
		public UserControlInstructions()
		{
			// This call is required by the Windows.Forms Form Designer.
			InitializeComponent();

			UpdateUserControl();
		}

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		protected override void Dispose( bool disposing )
		{
			if( disposing )
			{
				if(components != null)
				{
					components.Dispose();
				}
			}
			base.Dispose( disposing );
		}



		//
		// - Properties -
		//

		/// <summary>
		/// Indicates if this control contains instructions from Threads.
		/// </summary>
		public bool ContainsInstructions
		{
			get
			{
				lock(this.instructions)
				{
					return(this.instructions.Count > 0);
				}
			}
		}



		//
		// - Methods -
		//

		/// <summary>
		/// Set the instruction text for a specific Thread if the supplied text is non-empty.
		/// Remove the instruction text for a specific Thread if the supplied text is empty.
		/// </summary>
		/// <param name="thread">The Thread.</param>
		/// <param name="text">The text to display.</param>
		public void SetInstruction(Thread thread, String text)
		{
			lock(this.instructions)
			{
				Instruction existingInstruction = null;

				foreach(Instruction instruction in this.instructions)
				{
					if (instruction.threadId == thread.Options.Identifier)
					{
						existingInstruction = instruction;
						break;
					}
				}

				if (existingInstruction != null)
				{
					this.instructions.Remove(existingInstruction);
				}

				if (text.Length > 0)
				{
					Instruction newInstruction = new Instruction(thread.Options.Identifier, text);
					this.instructions.Add(newInstruction);
				}
			}

			UpdateUserControl();
		}

		/// <summary>
		/// Update this control by clearing and rewriting all instruction text.
		/// </summary>
		private void UpdateUserControl()
		{
			lock(this.instructions)
			{
				this.richTextBoxInstructions.Clear();

				foreach(Instruction instruction in this.instructions)
				{
					this.richTextBoxInstructions.SelectionColor  = System.Drawing.Color.LightGreen;
					this.richTextBoxInstructions.AppendText("-----\r\n");
					this.richTextBoxInstructions.SelectionColor  = System.Drawing.Color.Blue;;
					this.richTextBoxInstructions.AppendText("[" + instruction.threadId + "]\r\n\r\n");
					this.richTextBoxInstructions.SelectionColor = System.Drawing.Color.Black;
					this.richTextBoxInstructions.AppendText(instruction.text + "\r\n");
				}
			}
		}
	}
}
