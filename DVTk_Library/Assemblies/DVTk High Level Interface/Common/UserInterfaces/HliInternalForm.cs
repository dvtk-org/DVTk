// ------------------------------------------------------
// DVTk - The Healthcare Validation Toolkit (www.dvtk.org)
// Copyright © 2009 DVTk
// ------------------------------------------------------
// This file is part of DVTk.
//
// DVTk is free software; you can redistribute it and/or modify it under the terms of the GNU
// Lesser General Public License as published by the Free Software Foundation; either version 3.0
// of the License, or (at your option) any later version. 
// 
// DVTk is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
// the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser
// General Public License for more details. 
// 
// You should have received a copy of the GNU Lesser General Public License along with this
// library; if not, see <http://www.gnu.org/licenses/>



using System;
using System.Drawing;
using System.Collections;
using System.ComponentModel;
using System.Windows.Forms;

using DvtkHighLevelInterface.Common.Threads;



namespace DvtkHighLevelInterface.Common.UserInterfaces
{
	/// <summary>
	/// The actual .Net form that is displayed by the HLIForm class.
    /// <br></br><br></br>
	/// The form contains two tabs:
	/// - Activity logging tab.
	/// - Instructions tab.
	/// </summary>
	internal class HliInternalForm : System.Windows.Forms.Form
	{
		//
		// - Generated by Visual Studio -
		//

		private System.Windows.Forms.Button buttonStop;
		private System.Windows.Forms.TabPage tabPageActivityLogging;
		private DvtkHighLevelInterface.Common.UserInterfaces.UserControlActivityLogging userControlActivityLogging;
		private System.Windows.Forms.TabControl tabControl;
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.Container components = null;

		#region Windows Form Designer generated code
		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent()
		{
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(HliInternalForm));
            this.tabControl = new System.Windows.Forms.TabControl();
            this.tabPageActivityLogging = new System.Windows.Forms.TabPage();
            this.userControlActivityLogging = new DvtkHighLevelInterface.Common.UserInterfaces.UserControlActivityLogging();
            this.buttonStop = new System.Windows.Forms.Button();
            this.tabControl.SuspendLayout();
            this.tabPageActivityLogging.SuspendLayout();
            this.SuspendLayout();
            // 
            // tabControl
            // 
            this.tabControl.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
                        | System.Windows.Forms.AnchorStyles.Left)
                        | System.Windows.Forms.AnchorStyles.Right)));
            this.tabControl.Controls.Add(this.tabPageActivityLogging);
            this.tabControl.Location = new System.Drawing.Point(8, 8);
            this.tabControl.Name = "tabControl";
            this.tabControl.SelectedIndex = 0;
            this.tabControl.Size = new System.Drawing.Size(736, 368);
            this.tabControl.TabIndex = 0;
            // 
            // tabPageActivityLogging
            // 
            this.tabPageActivityLogging.Controls.Add(this.userControlActivityLogging);
            this.tabPageActivityLogging.Location = new System.Drawing.Point(4, 22);
            this.tabPageActivityLogging.Name = "tabPageActivityLogging";
            this.tabPageActivityLogging.Size = new System.Drawing.Size(728, 342);
            this.tabPageActivityLogging.TabIndex = 0;
            this.tabPageActivityLogging.Text = "Activity Logging";
            // 
            // userControlActivityLogging
            // 
            this.userControlActivityLogging.Dock = System.Windows.Forms.DockStyle.Fill;
            this.userControlActivityLogging.Interval = 100;
            this.userControlActivityLogging.Location = new System.Drawing.Point(0, 0);
            this.userControlActivityLogging.Name = "userControlActivityLogging";
            this.userControlActivityLogging.Size = new System.Drawing.Size(728, 342);
            this.userControlActivityLogging.TabIndex = 0;
            // 
            // buttonStop
            // 
            this.buttonStop.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
            this.buttonStop.Location = new System.Drawing.Point(672, 384);
            this.buttonStop.Name = "buttonStop";
            this.buttonStop.Size = new System.Drawing.Size(75, 23);
            this.buttonStop.TabIndex = 1;
            this.buttonStop.Text = "Stop";
            this.buttonStop.Click += new System.EventHandler(this.buttonStop_Click);
            // 
            // HliInternalForm
            // 
            this.AutoScaleBaseSize = new System.Drawing.Size(5, 13);
            this.ClientSize = new System.Drawing.Size(752, 414);
            this.ControlBox = false;
            this.Controls.Add(this.buttonStop);
            this.Controls.Add(this.tabControl);
            this.Icon = ((System.Drawing.Icon)(resources.GetObject("$this.Icon")));
            this.Name = "HliInternalForm";
            this.Text = "-";
            this.Closing += new System.ComponentModel.CancelEventHandler(this.HliInternalForm_Closing);
            this.tabControl.ResumeLayout(false);
            this.tabPageActivityLogging.ResumeLayout(false);
            this.ResumeLayout(false);

		}
		#endregion



		//
		// - Constants -
		//

		private const String TEXT_STOP = "Stop";

		private const String TEXT_STOPPING = "Stopping";

		private const String TEXT_EXIT = "Exit";



		//
		// - Fields -
		//

		/// <summary>
		/// A thread-safe queue, for storing the actions until they are performed when the
		/// timer raises an event.
		/// </summary>
		private Queue actionQueue = Queue.Synchronized(new Queue());

		/// <summary>
		/// The HliForm instance that uses this object.
		/// </summary>
		private HliForm hliForm = null;

		/// <summary>
		/// Handles the ThreadStateChangeEvent.
		/// </summary>
		private Thread.ThreadStateChangeHandler threadStateChangeEventHandler = null;

		/// <summary>
		/// Holds the count of the different ThreadStates of the attached Threads.
		/// </summary>
		private ArrayList[] threadsInThreadState = new ArrayList[4];

        /// <summary>
        /// When this field is null, the Text property (caption) of this form will display threading information.
        /// When this field is unequal to null, the text of this field will be displayed.
        /// </summary>
        private String text = null;

		/// <summary>
		/// Timer that will trigger the actual performing of the actions present in the action queue.
		/// </summary>
		private System.Windows.Forms.Timer timer = null;



		//
		// - Constructors -
		//

		/// <summary>
		/// Hide default constructor.
		/// </summary>
		private HliInternalForm()
		{
			// Do nothing.
		}

		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="hliForm">The HLIForm instance that uses this internal form.</param>
		public HliInternalForm(HliForm hliForm)
		{
			// Required for Windows Form Designer support
			InitializeComponent();

			this.hliForm = hliForm;

			this.threadsInThreadState[(int)ThreadState.UnStarted] = new ArrayList();
			this.threadsInThreadState[(int)ThreadState.Running] = new ArrayList();
			this.threadsInThreadState[(int)ThreadState.Stopping] = new ArrayList();
			this.threadsInThreadState[(int)ThreadState.Stopped] = new ArrayList();

			this.threadStateChangeEventHandler = new Thread.ThreadStateChangeHandler(this.HandleThreadStateChangeEvent);

			// Create and start the timer.
			this.timer = new System.Windows.Forms.Timer();
			this.timer.Tick += new EventHandler(this.PerformActions);
			Interval = 100;
			this.timer.Start();

			this.buttonStop.Text = TEXT_STOP;
		}

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		protected override void Dispose( bool disposing )
		{
			if( disposing )
			{
				if(components != null)
				{
					components.Dispose();
				}
			}
			base.Dispose( disposing );
		}



		//
		// - Properties -
		//

        /// <summary>
        /// Get the queue in which actions may be stored that will be executed at certain intervals. 
        /// </summary>
        public Queue ActionQueue
        {
            get
            {
                return (this.actionQueue);
            }
        }

		/// <summary>
		/// The time to wait before performing all the newly added actions in the action queue after
		/// the previously performed actions.
		/// </summary>
		public int Interval
		{
			get
			{
				return(this.timer.Interval);
			}
			set
			{
				this.timer.Interval = value;
			}
		}

        /// <summary>
        /// Gets the activity logging user control.
        /// </summary>
        public UserControlActivityLogging UserControlActivityLogging
        {
            get
            {
                return (this.userControlActivityLogging);
            }
        }



		//
		// - Methods -
		//

		/// <summary>
		/// Attach to a Thread.
        /// <br></br><br></br>
		/// By doing so, this object may react to information, warning and error output events
		/// from the Thread.
        /// <br></br><br></br>
		/// Threads may not be already started when attaching.
		/// </summary>
		/// <param name="thread">The Thread to attach to.</param>
		public void Attach(Thread thread)
		{
			this.userControlActivityLogging.Attach(thread, false);
			this.actionQueue.Enqueue(new AttachAction(thread, thread.ThreadState));
			thread.ThreadStateChangeEvent += this.threadStateChangeEventHandler;
		}

		/// <summary>
		/// Method is called when the Stop button is pressed.
        /// <br></br><br></br>
		/// When attached Threads are still running, these Threads are stopped.
		/// When no attached Threads are running, the form is closed.
		/// </summary>
		/// <param name="sender">The sender.</param>
		/// <param name="e">The event arguments.</param>
		private void buttonStop_Click(object sender, System.EventArgs e)
		{
			if (this.buttonStop.Text == TEXT_EXIT)
			{
				Close();
			}
			else
			{
				ArrayList threadsToStop = new ArrayList();

				threadsToStop.AddRange(this.threadsInThreadState[(int)ThreadState.UnStarted]);
				threadsToStop.AddRange(this.threadsInThreadState[(int)ThreadState.Running]);
				threadsToStop.AddRange(this.threadsInThreadState[(int)ThreadState.Stopping]);
						
				foreach(Thread thread in threadsToStop)
				{
					thread.WriteWarning("Stop button pressed in HliForm.");
					thread.Stop();
				}

				this.buttonStop.Text = TEXT_STOPPING; 
			}
		}

		/// <summary>
		/// Handles the ThreadStateChangeEvent by adding a ThreadStateChangeAction to the action queue.
		/// Wheneven the timer triggeres an event, the action will actually be handled by updating the caption of this Form.
		/// </summary>
		/// <param name="thread">The Thread.</param>
		/// <param name="oldThreadState">The old ThreadState.</param>
		/// <param name="newThreadState">The new ThreadState.</param>
		private void HandleThreadStateChangeEvent(Thread thread, ThreadState oldThreadState, ThreadState newThreadState)
		{
			this.actionQueue.Enqueue(new ThreadStateChangeAction(thread, oldThreadState, newThreadState));
		}

		private void HliInternalForm_Closing(object sender, System.ComponentModel.CancelEventArgs e)
		{
			this.hliForm.Closed = true;
		}

		/// <summary>
		/// Perform the actions that are stored in the action stack.
		/// </summary>
		public void PerformActions(Object myObject, EventArgs myEventArgs)
		{
            //
            // Go through all actions in the queue.
            //

			bool threadStateChangeActionPerformed = false;

			while (this.actionQueue.Count > 0)
			{
				Object action = this.actionQueue.Dequeue();

				if (action is AttachAction)
				{
					AttachAction attachAction = action as AttachAction;

					this.threadsInThreadState[(int)attachAction.threadState].Add(attachAction.thread);
				}
				else if (action is ThreadStateChangeAction)
				{
					threadStateChangeActionPerformed = true;

					ThreadStateChangeAction threadStateChangeAction =  action as ThreadStateChangeAction;

					this.threadsInThreadState[(int)threadStateChangeAction.oldThreadState].Remove(threadStateChangeAction.thread);
					this.threadsInThreadState[(int)threadStateChangeAction.newThreadState].Add(threadStateChangeAction.thread);
				}
                else if (action is SetTextAction)
                {
                    SetTextAction setTextAction = action as SetTextAction;

                    this.text = setTextAction.Text;
                }
                else
				{
					// Do nothing.
				}
			}


            //
            // Update the caption of this Form.
            //
            if ((this.text == null) || (this.text.Length == 0))
			{
				int attachedThreadsCount = 
					this.threadsInThreadState[(int)ThreadState.UnStarted].Count + 
					this.threadsInThreadState[(int)ThreadState.Running].Count + 
					this.threadsInThreadState[(int)ThreadState.Stopping].Count + 
					this.threadsInThreadState[(int)ThreadState.Stopped].Count;

				Text = 
					attachedThreadsCount.ToString() + " attached thread(s) (" + 
					threadsInThreadState[(int)ThreadState.UnStarted].Count.ToString() + " unstarted, " +
					threadsInThreadState[(int)ThreadState.Running].Count.ToString() + " running, " +
					threadsInThreadState[(int)ThreadState.Stopping].Count.ToString() + " stopping/waiting for child(s), " +
					threadsInThreadState[(int)ThreadState.Stopped].Count.ToString() + " stopped)";
            }
            else
            {
                Text = this.text;
            }


            //
            // Check if this Form must be closed or the text on the button must change.
            //

            if (threadStateChangeActionPerformed)
            {
				int numberOfRunningAndStoppingThreads = 
					threadsInThreadState[(int)ThreadState.Running].Count + 
					threadsInThreadState[(int)ThreadState.Stopping].Count;

				if (numberOfRunningAndStoppingThreads == 0)
				{
					if (this.hliForm.AutoExit)
					{
						Close();
					}
					else
					{
						this.buttonStop.Text = TEXT_EXIT;
					}
				}
			}
		}



		//
		// - Internal helper classes. -
		//

		internal class AttachAction
		{
			public Thread thread = null;

			public ThreadState threadState = ThreadState.UnStarted;

			public AttachAction(Thread thread, ThreadState threadState)
			{
				this.thread = thread;
				this.threadState = threadState;
			}
		}

		internal class ThreadStateChangeAction
		{
			public ThreadState newThreadState = ThreadState.UnStarted;

			public ThreadState oldThreadState = ThreadState.UnStarted;

			public Thread thread = null;

			public ThreadStateChangeAction(Thread thread, ThreadState oldThreadState, ThreadState newThreadState)
			{
				this.thread = thread;
				this.oldThreadState = oldThreadState;
				this.newThreadState = newThreadState;
			}
		}

        internal class SetTextAction
        {
            private String text;

            public String Text
            {
                get 
                {
                    return text; 
                }
            }
	
            public SetTextAction(String text)
            {
                this.text = text;
            }
        }
	}
}
