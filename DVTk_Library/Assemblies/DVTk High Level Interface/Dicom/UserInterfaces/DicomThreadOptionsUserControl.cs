// ------------------------------------------------------
// DVTk - The Healthcare Validation Toolkit (www.dvtk.org)
// Copyright © 2009 DVTk
// ------------------------------------------------------
// This file is part of DVTk.
//
// DVTk is free software; you can redistribute it and/or modify it under the terms of the GNU
// Lesser General Public License as published by the Free Software Foundation; either version 3.0
// of the License, or (at your option) any later version. 
// 
// DVTk is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
// the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser
// General Public License for more details. 
// 
// You should have received a copy of the GNU Lesser General Public License along with this
// library; if not, see <http://www.gnu.org/licenses/>



using System;
using System.Collections;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Windows.Forms;

using DvtkHighLevelInterface.Dicom.Threads;



namespace DvtkHighLevelInterface.Dicom.UserInterfaces
{
	/// <summary>
	/// Summary description for DicomThreadOptionsUserControl.
	/// </summary>
	public class DicomThreadOptionsUserControl : System.Windows.Forms.UserControl
	{
		//
		// - Generated by Visual Studio -
		//
		private System.Windows.Forms.Label labelLocalAeTitle;
		private System.Windows.Forms.Label labelLocalPort;
		private System.Windows.Forms.Label labelRemoteAeTitle;
		private System.Windows.Forms.Label labelRemotePort;
		private System.Windows.Forms.Label labelRemoteIpAddress;
		private System.Windows.Forms.TextBox textBoxLocalAeTitle;
		private System.Windows.Forms.TextBox textBoxLocalPort;
		private System.Windows.Forms.TextBox textBoxRemoteAeTitle;
		private System.Windows.Forms.TextBox textBoxRemotePort;
		private System.Windows.Forms.TextBox textBoxRemoteIpAddress;
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.Container components = null;

		#region Component Designer generated code
		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent()
		{
            this.labelLocalAeTitle = new System.Windows.Forms.Label();
            this.labelLocalPort = new System.Windows.Forms.Label();
            this.labelRemoteAeTitle = new System.Windows.Forms.Label();
            this.labelRemotePort = new System.Windows.Forms.Label();
            this.textBoxLocalAeTitle = new System.Windows.Forms.TextBox();
            this.textBoxLocalPort = new System.Windows.Forms.TextBox();
            this.textBoxRemoteAeTitle = new System.Windows.Forms.TextBox();
            this.textBoxRemotePort = new System.Windows.Forms.TextBox();
            this.labelRemoteIpAddress = new System.Windows.Forms.Label();
            this.textBoxRemoteIpAddress = new System.Windows.Forms.TextBox();
            this.SuspendLayout();
            // 
            // labelLocalAeTitle
            // 
            this.labelLocalAeTitle.Location = new System.Drawing.Point(16, 16);
            this.labelLocalAeTitle.Name = "labelLocalAeTitle";
            this.labelLocalAeTitle.Size = new System.Drawing.Size(127, 40);
            this.labelLocalAeTitle.TabIndex = 0;
            this.labelLocalAeTitle.Text = "Local AE title:";
            // 
            // labelLocalPort
            // 
            this.labelLocalPort.Location = new System.Drawing.Point(16, 56);
            this.labelLocalPort.Name = "labelLocalPort";
            this.labelLocalPort.Size = new System.Drawing.Size(100, 23);
            this.labelLocalPort.TabIndex = 1;
            this.labelLocalPort.Text = "Local port:";
            // 
            // labelRemoteAeTitle
            // 
            this.labelRemoteAeTitle.Location = new System.Drawing.Point(16, 96);
            this.labelRemoteAeTitle.Name = "labelRemoteAeTitle";
            this.labelRemoteAeTitle.Size = new System.Drawing.Size(144, 23);
            this.labelRemoteAeTitle.TabIndex = 2;
            this.labelRemoteAeTitle.Text = "Remote AE title:";
            // 
            // labelRemotePort
            // 
            this.labelRemotePort.Location = new System.Drawing.Point(16, 176);
            this.labelRemotePort.Name = "labelRemotePort";
            this.labelRemotePort.Size = new System.Drawing.Size(144, 23);
            this.labelRemotePort.TabIndex = 3;
            this.labelRemotePort.Text = "Remote port:";
            // 
            // textBoxLocalAeTitle
            // 
            this.textBoxLocalAeTitle.Location = new System.Drawing.Point(160, 16);
            this.textBoxLocalAeTitle.Name = "textBoxLocalAeTitle";
            this.textBoxLocalAeTitle.Size = new System.Drawing.Size(232, 20);
            this.textBoxLocalAeTitle.TabIndex = 4;
            this.textBoxLocalAeTitle.KeyUp += new System.Windows.Forms.KeyEventHandler(this.textBoxLocalAeTitle_KeyUp);
            this.textBoxLocalAeTitle.Validating += new System.ComponentModel.CancelEventHandler(this.textBoxLocalAeTitle_Validating);
            // 
            // textBoxLocalPort
            // 
            this.textBoxLocalPort.Location = new System.Drawing.Point(160, 56);
            this.textBoxLocalPort.Name = "textBoxLocalPort";
            this.textBoxLocalPort.Size = new System.Drawing.Size(80, 20);
            this.textBoxLocalPort.TabIndex = 5;
            this.textBoxLocalPort.KeyUp += new System.Windows.Forms.KeyEventHandler(this.textBoxLocalPort_KeyUp);
            this.textBoxLocalPort.Validating += new System.ComponentModel.CancelEventHandler(this.textBoxLocalPort_Validating);
            // 
            // textBoxRemoteAeTitle
            // 
            this.textBoxRemoteAeTitle.Location = new System.Drawing.Point(160, 96);
            this.textBoxRemoteAeTitle.Name = "textBoxRemoteAeTitle";
            this.textBoxRemoteAeTitle.Size = new System.Drawing.Size(232, 20);
            this.textBoxRemoteAeTitle.TabIndex = 6;
            this.textBoxRemoteAeTitle.KeyUp += new System.Windows.Forms.KeyEventHandler(this.textBoxRemoteAeTitle_KeyUp);
            this.textBoxRemoteAeTitle.Validating += new System.ComponentModel.CancelEventHandler(this.textBoxRemoteAeTitle_Validating);
            // 
            // textBoxRemotePort
            // 
            this.textBoxRemotePort.Location = new System.Drawing.Point(160, 176);
            this.textBoxRemotePort.Name = "textBoxRemotePort";
            this.textBoxRemotePort.Size = new System.Drawing.Size(80, 20);
            this.textBoxRemotePort.TabIndex = 7;
            this.textBoxRemotePort.KeyUp += new System.Windows.Forms.KeyEventHandler(this.textBoxRemotePort_KeyUp);
            this.textBoxRemotePort.Validating += new System.ComponentModel.CancelEventHandler(this.textBoxRemotePort_Validating);
            // 
            // labelRemoteIpAddress
            // 
            this.labelRemoteIpAddress.Location = new System.Drawing.Point(16, 136);
            this.labelRemoteIpAddress.Name = "labelRemoteIpAddress";
            this.labelRemoteIpAddress.Size = new System.Drawing.Size(144, 32);
            this.labelRemoteIpAddress.TabIndex = 8;
            this.labelRemoteIpAddress.Text = "Remote TCP/IP address:";
            // 
            // textBoxRemoteIpAddress
            // 
            this.textBoxRemoteIpAddress.Location = new System.Drawing.Point(160, 136);
            this.textBoxRemoteIpAddress.Name = "textBoxRemoteIpAddress";
            this.textBoxRemoteIpAddress.Size = new System.Drawing.Size(136, 20);
            this.textBoxRemoteIpAddress.TabIndex = 9;
            this.textBoxRemoteIpAddress.KeyUp += new System.Windows.Forms.KeyEventHandler(this.textBoxRemoteIpAddress_KeyUp);
            this.textBoxRemoteIpAddress.Validating += new System.ComponentModel.CancelEventHandler(this.textBoxRemoteIpAddress_Validating);
            // 
            // DicomThreadOptionsUserControl
            // 
            this.Controls.Add(this.textBoxRemoteIpAddress);
            this.Controls.Add(this.labelRemoteIpAddress);
            this.Controls.Add(this.textBoxRemotePort);
            this.Controls.Add(this.textBoxRemoteAeTitle);
            this.Controls.Add(this.textBoxLocalPort);
            this.Controls.Add(this.textBoxLocalAeTitle);
            this.Controls.Add(this.labelRemotePort);
            this.Controls.Add(this.labelRemoteAeTitle);
            this.Controls.Add(this.labelLocalPort);
            this.Controls.Add(this.labelLocalAeTitle);
            this.Name = "DicomThreadOptionsUserControl";
            this.Size = new System.Drawing.Size(432, 208);
            this.ResumeLayout(false);
            this.PerformLayout();

		}
		#endregion


		//
		// - Fields -
		//
		private int currentYPosition = 0;

		private DicomThreadOptions dicomThreadOptions = null;

		/// <summary>
		/// See property LocalAeTitleVisible.
		/// </summary>
		private bool localAeTitleVisible = false;

		private bool localPortVisible = false;

		private bool remoteAeTitleVisible = false;

		private bool remoteIpAddressVisible = false;

		private bool remotePortVisible = false;

		//
		// - Constructors -
		//
		/// <summary>
		/// Default constructor.
		/// </summary>
		public DicomThreadOptionsUserControl()
		{
			// This call is required by the Windows.Forms Form Designer.
			InitializeComponent();
		}

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		protected override void Dispose( bool disposing )
		{
			if( disposing )
			{
				if(components != null)
				{
					components.Dispose();
				}
			}
			base.Dispose( disposing );
		}

		//
		// - Delegates -
		//

        /// <summary>
        /// Delegate used for the OptionChangedEvent.
        /// </summary>
		public delegate void OptionChangedEventHandler();



		//
		// - Events -
		//

        /// <summary>
        /// An event triggered when an option has changed.
        /// </summary>
		public event OptionChangedEventHandler OptionChangedEvent;



		//
		// - Properties -
		//

        /// <summary>
        /// Gets or sets a boolean indicating if the local AE title control should be visible.
        /// </summary>
		public bool LocalAeTitleVisible
		{
			get
			{
				return(this.localAeTitleVisible);
			}
			set
			{
				this.localAeTitleVisible = value;
			}
		}

        /// <summary>
        /// Gets or sets the DicomThread options instance used by this control.
        /// </summary>
		public DicomThreadOptions DicomThreadOptions
		{
			get
			{
				return(this.dicomThreadOptions);
			}
			set
			{
				this.dicomThreadOptions = value;
			}
		}

        /// <summary>
        /// Gets or sets a boolean indicating if the local port should be visible.
        /// </summary>
		public bool LocalPortVisible
		{
			get
			{
				return(this.localPortVisible);
			}
			set
			{
				this.localPortVisible = value;
			}
		}

        /// <summary>
        /// Gets or sets a boolean indicating if the remote AE title should be visible.
        /// </summary>
		public bool RemoteAeTitleVisible
		{
			get
			{
				return(this.remoteAeTitleVisible);
			}
			set
			{
				this.remoteAeTitleVisible = value;
			}
		}

        /// <summary>
        /// Gets or sets a boolean indicating if the remote IP address should be visible.
        /// </summary>
		public bool RemoteIpAddressVisible
		{
			get
			{
				return(this.remoteIpAddressVisible);
			}
			set
			{
				this.remoteIpAddressVisible = value;
			}
		}

        /// <summary>
        /// Gets or sets a boolean indicating if the remote port should be visible.
        /// </summary>
		public bool RemotePortVisible
		{
			get
			{
				return(this.remotePortVisible);
			}
			set
			{
				this.remotePortVisible = value;
			}
		}
        public string LocalAETitleName
        {
            set
            {
                this.labelLocalAeTitle.Text = value;
            }
        }


        /// <summary>
        /// Gets or sets a boolean indicating if the remote AE title label should be visible.
        /// </summary>
        public string RemoteAeTitleLabel
		{
			set
			{
				this.labelRemoteAeTitle.Text = value;
			}
		}

        /// <summary>
        /// Gets or sets a boolean indicating if the remote port label should be visible.
        /// </summary>
        public string RemotePortLabel
		{
			set
			{
				this.labelRemotePort.Text = value;
			}
		}

        /// <summary>
        /// Gets or sets a boolean indicating if the remote IP address label should be visible.
        /// </summary>
        public string RemoteIpAddressLabel
		{
			set
			{
				this.labelRemoteIpAddress.Text = value;
			}
		}

        public string LocalAeTitle
        {
            get
            {
                return (this.textBoxLocalAeTitle.Text);
            }

            set
            {
                this.textBoxLocalAeTitle.Text = value.ToString();
            }
        }

        public string LocalPort
        {
            get
            {
                return (this.textBoxLocalPort.Text);
            }
            set
            {
                this.textBoxLocalPort.Text = value.ToString();
            }

        }

        public string RemoteAeTitle
        {
            get
            {
                return (this.textBoxRemoteAeTitle.Text);
            }

            set
            {
                this.textBoxRemoteAeTitle.Text = value.ToString();
            }
        }

        public string RemoteIpAddress
        {
            get
            {
                return (this.textBoxRemoteIpAddress.Text);
            }

            set
            {
                this.textBoxRemoteIpAddress.Text = value.ToString();
            }
        }

        public string RemotePort
        {
            get
            {
                return (this.textBoxRemotePort.Text);
            }

            set
            {
                this.textBoxRemotePort.Text = value.ToString();
            }
        }


		//
		// - Methods -
		//
		private void ControlKeyUp()
		{
			if ((this.dicomThreadOptions != null) && (OptionChangedEvent != null))
			{
				OptionChangedEvent();
			}		
		}

		/// <summary>
		/// Called when a key is released.
		/// This method is needed to be able to send an OptionChangedEvent if needed.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void textBoxLocalAeTitle_KeyUp(object sender, System.Windows.Forms.KeyEventArgs e)
		{
			ControlKeyUp();
		}

		/// <summary>
		/// Validate the characters entered when the control looses focus.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void textBoxLocalAeTitle_Validating(object sender, System.ComponentModel.CancelEventArgs e)
		{
			if (this.dicomThreadOptions != null)
			{
				if (this.textBoxLocalAeTitle.Text.Length == 0)
				{
					MessageBox.Show("Invalid AE title.");
					e.Cancel = true;
				}
				else
				{
					this.dicomThreadOptions.LocalAeTitle = this.textBoxLocalAeTitle.Text;
				}
			}
		}

		/// <summary>
		/// Called when a key is released.
		/// This method is needed to be able to send an OptionChangedEvent if needed.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void textBoxLocalPort_KeyUp(object sender, System.Windows.Forms.KeyEventArgs e)
		{
			ControlKeyUp();
		
		}

		/// <summary>
		/// Validate the characters entered when the control looses focus.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void textBoxLocalPort_Validating(object sender, System.ComponentModel.CancelEventArgs e)
		{
			UInt16 newPortNumber = 0;
            bool exceptionThrown = false;

			try
			{
				newPortNumber = Convert.ToUInt16(this.textBoxLocalPort.Text);
			}
			catch
			{
                exceptionThrown = true;
			}

            if (!exceptionThrown)
			{
				this.dicomThreadOptions.LocalPort = newPortNumber;
			}
			else
			{
				MessageBox.Show("Invalid port number.");
				e.Cancel = true;
			}				
		}

		/// <summary>
		/// Called when a key is released.
		/// This method is needed to be able to send an OptionChangedEvent if needed.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void textBoxRemoteAeTitle_KeyUp(object sender, System.Windows.Forms.KeyEventArgs e)
		{
			ControlKeyUp();		
		}

		/// <summary>
		/// Validate the characters entered when the control looses focus.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void textBoxRemoteAeTitle_Validating(object sender, System.ComponentModel.CancelEventArgs e)
		{
			if (this.dicomThreadOptions != null)
			{
				if (this.textBoxRemoteAeTitle.Text.Length == 0)
				{
					MessageBox.Show("Invalid AE title.");
					e.Cancel = true;
				}
				else
				{
					this.dicomThreadOptions.RemoteAeTitle = this.textBoxRemoteAeTitle.Text;
				}
			}				
		}

		/// <summary>
		/// Called when a key is released.
		/// This method is needed to be able to send an OptionChangedEvent if needed.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void textBoxRemoteIpAddress_KeyUp(object sender, System.Windows.Forms.KeyEventArgs e)
		{
			ControlKeyUp();				
		}

		/// <summary>
		/// Validate the characters entered when the control looses focus.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void textBoxRemoteIpAddress_Validating(object sender, System.ComponentModel.CancelEventArgs e)
		{
			if (this.dicomThreadOptions != null)
			{
				if (this.textBoxRemoteIpAddress.Text.Length == 0)
				{
					MessageBox.Show("Invalid TCP/IP address.");
					e.Cancel = true;
				}
				else
				{
                    this.dicomThreadOptions.RemoteHostName = this.textBoxRemoteIpAddress.Text;
				}
			}						
		}

		/// <summary>
		/// Called when a key is released.
		/// This method is needed to be able to send an OptionChangedEvent if needed.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void textBoxRemotePort_KeyUp(object sender, System.Windows.Forms.KeyEventArgs e)
		{
			ControlKeyUp();
		
		}

		/// <summary>
		/// Validate the characters entered when the control looses focus.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void textBoxRemotePort_Validating(object sender, System.ComponentModel.CancelEventArgs e)
		{
			UInt16 newPortNumber = 0;
            bool exceptionThrown = false;

			try
			{
				newPortNumber = Convert.ToUInt16(this.textBoxRemotePort.Text);
			}
			catch
			{
                exceptionThrown = true;
			}

            if (!exceptionThrown)
			{
				this.dicomThreadOptions.RemotePort = newPortNumber;
			}
			else
			{
				MessageBox.Show("Invalid port number.");
				e.Cancel = true;
			}						
		}

		private void UpdateLabelAndTextBox(System.Windows.Forms.Label label, System.Windows.Forms.TextBox textBox, String text, bool isVisible)
		{
			label.Visible = isVisible;
			textBox.Visible = isVisible;
			
			if (isVisible)
			{
				textBox.Text = text;

				label.Location = new Point(16, currentYPosition);

				textBox.Location = new Point(144, currentYPosition);

				currentYPosition+= 32;
			}
		}

		/// <summary>
		/// Update the complete user control.
		/// </summary>
		public void UpdateUserControl()
		{
			this.currentYPosition = 16;

			if (this.dicomThreadOptions == null)
			{
				UpdateLabelAndTextBox(this.labelLocalAeTitle, this.textBoxLocalAeTitle, "", this.localAeTitleVisible);
				UpdateLabelAndTextBox(this.labelLocalPort, this.textBoxLocalPort, "", this.localPortVisible);
				UpdateLabelAndTextBox(this.labelRemoteAeTitle, this.textBoxRemoteAeTitle, "", this.remoteAeTitleVisible);
				UpdateLabelAndTextBox(this.labelRemoteIpAddress, this.textBoxRemoteIpAddress, "", this.remoteIpAddressVisible);
				UpdateLabelAndTextBox(this.labelRemotePort, this.textBoxRemotePort, "", this.remotePortVisible);
			}
			else
			{
				UpdateLabelAndTextBox(this.labelLocalAeTitle, this.textBoxLocalAeTitle, this.dicomThreadOptions.LocalAeTitle, this.localAeTitleVisible);
				UpdateLabelAndTextBox(this.labelLocalPort, this.textBoxLocalPort, this.dicomThreadOptions.LocalPort.ToString(), this.localPortVisible);
				UpdateLabelAndTextBox(this.labelRemoteAeTitle, this.textBoxRemoteAeTitle, this.dicomThreadOptions.RemoteAeTitle, this.remoteAeTitleVisible);
                UpdateLabelAndTextBox(this.labelRemoteIpAddress, this.textBoxRemoteIpAddress, this.dicomThreadOptions.RemoteHostName, this.remoteIpAddressVisible);
				UpdateLabelAndTextBox(this.labelRemotePort, this.textBoxRemotePort, this.dicomThreadOptions.RemotePort.ToString(), this.remotePortVisible);
			}
		}
	}
}
