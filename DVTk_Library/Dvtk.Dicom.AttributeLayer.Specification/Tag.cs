using System;
using System.Collections.Generic;
using System.Text;
using System.Xml.XPath;

namespace Dvtk.Dicom.AttributeLayer.Specification
{
    /// <summary>
    /// A Tag specification from the DICOM standard.
    /// </summary>
    public class Tag
    {
        #region - Fields -
        // -----------------------
        // - Begin fields region -
        // -----------------------

        /// <summary>
        /// See associated property.
        /// </summary>
        private UInt16 elementNumber = 0;

        /// <summary>
        /// See associated property.
        /// </summary>
        private UInt16 groupNumber = 0;

        // ---------------------
        // - End fields region -
        // ---------------------
        #endregion



        #region - Constructors -
        // -----------------------------
        // - Begin constructors region -
        // -----------------------------

        /// <summary>
        /// Default constructor to construct a Tag with group number 0 and element number 0.
        /// </summary>
        public Tag()
        {
            this.elementNumber = 0;
            this.groupNumber = 0;
        }

        /// <summary>
        /// Constructor.
        /// </summary>
        /// <param name="groupNumber">The group number of this instance.</param>
        /// <param name="elementNumber">The element number of this instance.</param>
        public Tag(UInt16 groupNumber, UInt16 elementNumber)
        {
            this.elementNumber = elementNumber;
            this.groupNumber = groupNumber;
        }

        // ---------------------------
        // - End constructors region -
        // ---------------------------
        #endregion



        #region - Public operators -
        // ---------------------------------
        // - Begin public operators region -
        // ---------------------------------

        /// <summary>
        /// The greater than operator.
        /// </summary>
        /// <param name="tag1">The first tag.</param>
        /// <param name="tag2">The second tag.</param>
        /// <returns>Boolean indicating if the first tag is greater than the second tag.</returns>
        public static bool operator >(Tag tag1, Tag tag2)
        {
            bool returnValue = true;

            if (tag1.groupNumber < tag2.groupNumber)
            {
                returnValue = false;
            }
            else if (tag1.groupNumber == tag2.groupNumber)
            {
                returnValue = (tag1.elementNumber > tag2.elementNumber);
            }
            else
            {
                returnValue = true;
            }

            return (returnValue);
        }

        /// <summary>
        /// The less than operator.
        /// </summary>
        /// <param name="tag1">The first tag.</param>
        /// <param name="tag2">The second tag.</param>
        /// <returns>Boolean indicating if the first tag is less than the second tag.</returns>
        public static bool operator <(Tag tag1, Tag tag2)
        {
            bool returnValue = true;

            if (tag1.groupNumber < tag2.groupNumber)
            {
                returnValue = true;
            }
            else if (tag1.groupNumber == tag2.groupNumber)
            {
                returnValue = (tag1.elementNumber < tag2.elementNumber);
            }
            else
            {
                returnValue = false;
            }

            return (returnValue);
        }

        // -------------------------------
        // - End public operators region -
        // -------------------------------
        #endregion



        #region - Public properties -
        // ----------------------------------
        // - Begin public properties region -
        // ----------------------------------

        /// <summary>
        /// Gets the element number of this instance.
        /// </summary>
        public UInt16 ElementNumber
        {
            get
            {
                return (this.elementNumber);
            }
        }

        /// <summary>
        /// Gets the element number of this instance.
        /// </summary>
        public UInt16 GroupNumber
        {
            get
            {
                return (this.groupNumber);
            }
        }

        // --------------------------------
        // - End public properties region -
        // --------------------------------
        #endregion



        #region - Public methods -
        // -------------------------------
        // - Begin public methods region -
        // -------------------------------

        /// <summary>
        /// Create a new Tag instance using a node in a raw xml file (that is generated by the ODD).
        /// </summary>
        /// <param name="attributeNode">An Attribute node.</param>
        /// <returns>The created Tag instance.</returns>
        public static Tag Create(XPathNavigator attributeNode)
        {
            UInt16 groupNumber = 0;
            UInt16 elementNumber = 0;

            try
            {
                XPathNodeIterator groupNodes = attributeNode.Select("Group");

                if (groupNodes.MoveNext())
                {
                    groupNumber = Convert.ToUInt16(groupNodes.Current.Value, 16);
                }
                else
                {
                    throw new Exception("Group node not found.");
                }


                XPathNodeIterator elementNodes = attributeNode.Select("Element");

                if (elementNodes.MoveNext())
                {
                    elementNumber = Convert.ToUInt16(elementNodes.Current.Value, 16);
                }
                else
                {
                    throw new Exception("Element node not found.");
                }
            }
            catch (Exception exception)
            {
                throw (DefinitionFile.CreateException(attributeNode, "Tag", "", exception));
            }

            Tag tag = new Tag(groupNumber, elementNumber);

            return (tag);
        }

        // -----------------------------
        // - End public methods region -
        // -----------------------------
        #endregion



        #region - Internal classes -
        // ---------------------------------
        // - Begin internal classes region -
        // ---------------------------------

        /// <summary>
        /// Class that implements the IComparer(Tag) interface.
        /// This class is used in the SortedAttributeList class.
        /// </summary>
        internal class Comparer : IComparer<Tag>
        {
            public int Compare(Tag tag1, Tag tag2)
            {
                int returnValue = 0;

                if (tag1 < tag2)
                {
                    returnValue = -1;
                }
                else if (tag1 > tag2)
                {
                    returnValue = 1;
                }
                else
                {
                    returnValue = 0;
                }

                return (returnValue);
            }
        }

        // -------------------------------
        // - End internal classes region -
        // -------------------------------
        #endregion
    }
}
