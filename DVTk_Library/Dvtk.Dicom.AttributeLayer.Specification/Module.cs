using System;
using System.Collections.Generic;
using System.Text;
using System.Xml.XPath;

namespace Dvtk.Dicom.AttributeLayer.Specification
{
    /// <summary>
    ///  A Module specification from the DICOM standard.
    /// </summary>
    public class Module : AttributesAndMacros
    {
        #region - Fields -
        // -----------------------
        // - Begin fields region -
        // -----------------------

        /// <summary>
        /// See associated property.
        /// </summary>
        private string name = string.Empty;

        /// <summary>
        /// See associated property.
        /// </summary>
        private string usage = string.Empty;

        // ---------------------
        // - End fields region -
        // ---------------------
        #endregion



        #region - Constructors -
        // -----------------------------
        // - Begin constructors region -
        // -----------------------------

        /// <summary>
        /// Hide default constructor.
        /// </summary>
        private Module()
        {
            // Do nothing.
        }

        /// <summary>
        /// Constructor.
        /// </summary>
        /// <param name="name">Name of the this module.</param>
        /// <param name="usage">Usage of this module.</param>
        public Module(string name, string usage)
        {
            this.name = name;
            this.usage = usage;
        }

        // ---------------------------
        // - End constructors region -
        // ---------------------------
        #endregion



        #region - Public properties region -
        // ----------------------------------
        // - Begin public properties region -
        // ----------------------------------

        /// <summary>
        /// Gets the name of the module.
        /// </summary>
        public string Name
        {
            get
            {
                return (this.name);
            }
        }

        /// <summary>
        /// Gets the usage of te module.
        /// </summary>
        public string Usage
        {
            get
            {
                return (this.usage);
            }
        }

        // --------------------------------
        // - End public properties region -
        // --------------------------------
        #endregion

        

        #region - Internal methods -
        // --------------------------------
        // - Begin internal methods region -
        // --------------------------------

        /// <summary>
        /// Create a string representation of the path of this instance.
        /// </summary>
        /// <param name="prefix">The prefix to use of identation.</param>
        /// <returns>The string representation.</returns>
        internal override string ToString2(string prefix)
        {
            return (ToString3());
        }

        /// <summary>
        /// Create a string representation of the path of this instance.
        /// </summary>
        /// <returns>The string representation.</returns>
        internal override string ToString3()
        {
            return ("[MODULE \"" + this.name + "\"]");
        }

        // ------------------------------
        // - End internal methods region -
        // ------------------------------
        #endregion



        #region - Public methods -
        // -------------------------------
        // - Begin public methods region -
        // -------------------------------

        /// <summary>
        /// Accept method in the context of the "Hierarchical Visitor Pattern".
        /// See "DVTk_Library\Documentation\Design\Hierarchical Visitor Pattern.htm".
        /// </summary>
        /// <param name="sopClassVisitor">The SOP Class visitor.</param>
        /// <returns>
        /// true: continue traversing the siblings of this instance.
        /// false: stop traversing the siblings of this instance.
        /// </returns>
        public bool Accept(SopClassVisitor1 sopClassVisitor)
        {
            if (sopClassVisitor.VisitEnterModule(this))
            {
                foreach (IAttributeOrMacro attributeOrMacro in this)
                {
                    if (!attributeOrMacro.Accept(sopClassVisitor))
                    {
                        break;
                    }
                }
            }

            return (sopClassVisitor.VisitLeaveModule(this));
        }

        /// <summary>
        /// Create a new Module instance using a node in a raw xml file (that is generated by the ODD).
        /// </summary>
        /// <param name="moduleNode">A module node.</param>
        /// <returns>The created Module instance.</returns>
        public static Module Create(XPathNavigator moduleNode)
        {
            Module module = null; // Return value;
            string name = string.Empty;
            string usage = string.Empty;


            //
            // Determine module name.
            //

            try
            {
                name = moduleNode.GetAttribute("Name", "");
            }
            catch (Exception exception)
            {
                throw (DefinitionFile.CreateException(moduleNode, "Module", "Unable to determine Name", exception));
            }


            //
            // Determine module usage.
            //

            XPathNodeIterator usageNodes = moduleNode.Select("Usage");
            if (usageNodes.MoveNext())
            {
                usage = usageNodes.Current.Value;
            }
            else
            {
                throw (DefinitionFile.CreateException(moduleNode, "Module", "Usage node not found.", null));
            }


            //
            // Construct module instance.
            //

            module = new Module(name, usage);


            //
            // Add attribute instances and Macros instances to created module instance.
            //

            module.AddAttributesAndMacros(moduleNode);


            //
            // Return created instance.
            //

            return (module);
        }

        // -----------------------------
        // - End public methods region -
        // -----------------------------
        #endregion
    }
}
