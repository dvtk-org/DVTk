using System;
using System.Collections.Generic;
using System.Text;
using System.Xml.XPath;

namespace Dvtk.Dicom.AttributeLayer.Specification
{
    /// <summary>
    ///  A Macro specification from the DICOM standard.
    /// </summary>
    public class Macro : AttributesAndMacros, IAttributeOrMacro
    {

        #region - Fields -
        // -----------------------
        // - Begin fields region -
        // -----------------------

        /// <summary>
        /// Field needed to make sure that when creating the attribute structure, an infinite loop
        /// will not occur when dealing with recursive macros.
        /// </summary>
        private int encounteredDuringCreateAttributeReferencesRecursively = 0;

        /// <summary>
        /// See associated property.
        /// </summary>
        private string name = string.Empty;

        /// <summary>
        /// See associated property.
        /// </summary>
        private AttributesAndMacros parent = null;

        // ---------------------
        // - End fields region -
        // ---------------------
        #endregion



        #region - Constructors -
        // -----------------------------
        // - Begin constructors region -
        // -----------------------------

        /// <summary>
        /// Hide default constructor.
        /// </summary>
        private Macro()
        {
            // Do nothing.
        }


        public Macro(string name, AttributesAndMacros parent)
        {
            this.name = name;
            this.parent = parent;
        }

        // ---------------------------
        // - End constructors region -
        // ---------------------------
        #endregion



        #region - Public properties -
        // ----------------------------------
        // - Begin public properties region -
        // ----------------------------------

        /// <summary>
        /// Gets the name of this instance.
        /// </summary>
        public string Name
        {
            get
            {
                return (this.name);
            }
        }

        /// <summary>
        /// Gets the parent.
        /// </summary>
        public AttributesAndMacros Parent
        {
            get
            {
                return (this.parent);
            }
        }

        // --------------------------------
        // - End public properties region -
        // --------------------------------
        #endregion



        #region - Internal methods -
        // --------------------------------
        // - Begin internal methods region -
        // --------------------------------

        /// <summary>
        /// Create a string representation of the path of this instance.
        /// </summary>
        /// <param name="prefix">The prefix to use of identation.</param>
        /// <returns>The string representation.</returns>
        internal override string ToString2(string prefix)
        {
            return (this.parent.ToString2(prefix) + "\n" + prefix + "[MACRO \"" + Name + "\"]");
        }

        /// <summary>
        /// Create a string representation of the path of this instance.
        /// </summary>
        /// <returns>The string representation.</returns>
        internal override string ToString3()
        {
            return (this.parent.ToString3() + "/[MACRO \"" + Name + "\"]");
        }

        // ------------------------------
        // - End internal methods region -
        // ------------------------------
        #endregion



        #region - Public methods -
        // -------------------------------
        // - Begin public methods region -
        // -------------------------------

        /// <summary>
        /// Accept method in the context of the "Hierarchical Visitor Pattern".
        /// See "DVTk_Library\Documentation\Design\Hierarchical Visitor Pattern.htm".
        /// </summary>
        /// <param name="sopClassVisitor">The SOP Class visitor.</param>
        /// <returns>
        /// true: continue traversing the siblings if this instance.
        /// false: stop traversing the siblings if this instance.
        /// </returns>
        public bool Accept(SopClassVisitor1 sopClassVisitor)
        {
            if (sopClassVisitor.VisitEnterMacro(this))
            {
                foreach (IAttributeOrMacro attributeOrMacro in this)
                {
                    if (!attributeOrMacro.Accept(sopClassVisitor))
                    {
                        break;
                    }
                }
            }

            return (sopClassVisitor.VisitLeaveMacro(this));
        }

        /// <summary>
        /// Create a Macro instance using a raw xml file (that is generated by the ODD).
        /// </summary>
        /// <param name="macroNode">The Macro node.</param>
        /// <param name="parent">The parent.</param>
        /// <returns>The created Macro instance.</returns>
        public static Macro Create(XPathNavigator macroNode, AttributesAndMacros parent)
        {
            string name = string.Empty;


            //
            // Determine Macro name.
            //

            try
            {
                name = macroNode.GetAttribute("Name", "");
            }
            catch (Exception exception)
            {
                throw (DefinitionFile.CreateException(macroNode, "Macro", "Unable to determine Name", exception));
            }


            //
            // Construct Macro instance.
            //

            Macro macro = new Macro(name, parent);


            //
            // Add attribute instances and Macros instances to created Macro instance.
            //

            macro.AddAttributesAndMacros(macroNode);


            //
            // Return created instance.
            //

            return (macro);
        }

        /// <summary>
        /// Create an Attribute structure from the Module/Macro/Sequence Item structure.
        /// </summary>
        /// <param name="attributes">The list to add the Attributes to.</param>
        public override void CreateAttributeStructure(SortedAttributeList attributes)
        {
            this.encounteredDuringCreateAttributeReferencesRecursively++;

            if (this.encounteredDuringCreateAttributeReferencesRecursively <= 2)
            {
                base.CreateAttributeStructure(attributes);
            }

            this.encounteredDuringCreateAttributeReferencesRecursively--;
        }

        // -----------------------------
        // - End public methods region -
        // -----------------------------
        #endregion
    }
}
