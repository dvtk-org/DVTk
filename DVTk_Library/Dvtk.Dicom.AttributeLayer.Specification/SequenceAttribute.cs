using System;
using System.Collections.Generic;
using System.Text;
using System.Xml.XPath;

namespace Dvtk.Dicom.AttributeLayer.Specification
{
    /// <summary>
    ///  A Sequence Attribute specification from the DICOM standard.
    /// </summary>
    public class SequenceAttribute: Attribute
    {
        #region - Fields -
        // -----------------------
        // - Begin fields region -
        // -----------------------

        /// <summary>
        /// See associated property.
        /// </summary>
        private SequenceItem sequenceItem = null;

        /// <summary>
        /// See associated property.
        /// </summary>
        private SortedAttributeList sortedAttributeList = new SortedAttributeList();

        // ---------------------
        // - End fields region -
        // ---------------------
        #endregion



        #region - Constructors -
        // -----------------------------
        // - Begin constructors region -
        // -----------------------------

        /// <summary>
        /// Constructor.
        /// </summary>
        /// <param name="tag">The tag of this instance.</param>
        /// <param name="name">The name of this instance.</param>
        /// <param name="parent">The parent of this instance.</param>
        public SequenceAttribute(Tag tag, string name, AttributesAndMacros parent)
            : base(tag, VR.SQ, name, parent)
        {
            this.sequenceItem = new SequenceItem(this);
        }

        // ---------------------------
        // - End constructors region -
        // ---------------------------
        #endregion



        #region - Public properties -
        // ----------------------------------
        // - Begin public properties region -
        // ----------------------------------

        /// <summary>
        /// Gets the Sequence Item.
        /// </summary>
        public SequenceItem SequenceItem
        {
            get
            {
                return sequenceItem;
            }
        }

        /// <summary>
        /// Gets the child attributes that are contained in the Sequence Item.
        /// </summary>
        public SortedAttributeList SortedAttributeList
        {
            get
            {
                return (this.sortedAttributeList);
            }
        }

        // --------------------------------
        // - End public properties region -
        // --------------------------------
        #endregion



        #region - Public methods -
        // -------------------------------
        // - Begin public methods region -
        // -------------------------------

        /// <summary>
        /// Accept method in the context of the "Hierarchical Visitor Pattern".
        /// See "DVTk_Library\Documentation\Design\Hierarchical Visitor Pattern.htm".
        /// </summary>
        /// <param name="sopClassVisitor">The SOP Class visitor.</param>
        /// <returns>
        /// true: continue traversing the siblings if this instance.
        /// false: stop traversing the siblings if this instance.
        /// </returns>
        public override bool Accept(SopClassVisitor1 sopClassVisitor)
        {
            if (sopClassVisitor.VisitEnterSequenceAttribute(this))
            {
                sequenceItem.Accept(sopClassVisitor);
            }

            return (sopClassVisitor.VisitLeaveSequenceAttribute(this));
        }

        /// <summary>
        /// Accept method in the context of the "Hierarchical Visitor Pattern".
        /// See "DVTk_Library\Documentation\Design\Hierarchical Visitor Pattern.htm".
        /// </summary>
        /// <param name="attributeVisitor">The Attribute visitor.</param>
        /// <returns>
        /// true: continue traversing the siblings if this instance.
        /// false: stop traversing the siblings if this instance.
        /// </returns>
        public override bool Accept(SopClassVisitor2 attributeVisitor)
        {
            if (attributeVisitor.VisitEnterSequenceAttribute(this))
            {
                List<Attribute> attributes = this.sortedAttributeList.GetAttributes();

                foreach (Attribute child in attributes)
                {
                    if (!child.Accept(attributeVisitor))
                    {
                        break;
                    }
                }
            }

            return (attributeVisitor.VisitLeaveSequenceAttribute(this));
        }

        /// <summary>
        /// Create a Sequence Attribute instance using a raw xml file (that is generated by the ODD).
        /// </summary>
        /// <param name="tag">The tag.</param>
        /// <param name="name">The name.</param>
        /// <param name="attributeNode">The Attribute node.</param>
        /// <param name="parent">The parent of the instance to create.</param>
        /// <returns>The created SequenceAttribute inistance.</returns>
        internal static SequenceAttribute Create(Tag tag, string name, XPathNavigator attributeNode, AttributesAndMacros parent)
        {
            SequenceAttribute sequenceAttribute = new SequenceAttribute(tag, name, parent);

            XPathNodeIterator itemNodes = attributeNode.Select("Values/Sequence/Item");

            if (itemNodes.MoveNext())
            {
                sequenceAttribute.sequenceItem = SequenceItem.Create(itemNodes.Current, sequenceAttribute);
            }
            else
            {
                throw (DefinitionFile.CreateException(attributeNode, "SequenceAttribute", "Values/Sequence/Item node not found", null));
            }

            return (sequenceAttribute);
        }

        /// <summary>
        /// Create an Attribute structure from the Module/Macro/Sequence Item structure.
        /// </summary>
        /// <param name="attributes">The list to add this Attribute to.</param>
        public override void CreateAttributeStructure(SortedAttributeList attributes)
        {
            attributes.Add(this);

            this.sequenceItem.CreateAttributeStructure(this.sortedAttributeList);
        }

        // -----------------------------
        // - End public methods region -
        // -----------------------------
        #endregion
    }
}
